{
    "contracts":{
        "node_modules/.pnpm/@c-forge+typechain-polkadot@0.2.4_@polkadot+util-crypto@12.6.2_ts-node@10.9.2/node_modules/@c-forge/typechain-polkadot/node_modules/.bin/handlebars":"#!/bin/sh\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w \"$basedir\"`;;\nesac\n\nif [ -z \"$NODE_PATH\" ]; then\n  export NODE_PATH=\"/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/bin/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/node_modules\"\nelse\n  export NODE_PATH=\"/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/bin/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/node_modules:$NODE_PATH\"\nfi\nif [ -x \"$basedir/node\" ]; then\n  exec \"$basedir/node\"  \"$basedir/../../../../../../handlebars@4.7.8/node_modules/handlebars/bin/handlebars\" \"$@\"\nelse\n  exec node  \"$basedir/../../../../../../handlebars@4.7.8/node_modules/handlebars/bin/handlebars\" \"$@\"\nfi\n",
        "node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/bin/handlebars":"#!/usr/bin/env node\n\nvar argv = parseArgs({\n  'f': {\n    'type': 'string',\n    'description': 'Output File',\n    'alias': 'output'\n  },\n  'map': {\n    'type': 'string',\n    'description': 'Source Map File'\n  },\n  'a': {\n    'type': 'boolean',\n    'description': 'Exports amd style (require.js)',\n    'alias': 'amd'\n  },\n  'c': {\n    'type': 'string',\n    'description': 'Exports CommonJS style, path to Handlebars module',\n    'alias': 'commonjs',\n    'default': null\n  },\n  'h': {\n    'type': 'string',\n    'description': 'Path to handlebar.js (only valid for amd-style)',\n    'alias': 'handlebarPath',\n    'default': ''\n  },\n  'k': {\n    'type': 'string',\n    'description': 'Known helpers',\n    'alias': 'known'\n  },\n  'o': {\n    'type': 'boolean',\n    'description': 'Known helpers only',\n    'alias': 'knownOnly'\n  },\n  'm': {\n    'type': 'boolean',\n    'description': 'Minimize output',\n    'alias': 'min'\n  },\n  'n': {\n    'type': 'string',\n    'description': 'Template namespace',\n    'alias': 'namespace',\n    'default': 'Handlebars.templates'\n  },\n  's': {\n    'type': 'boolean',\n    'description': 'Output template function only.',\n    'alias': 'simple'\n  },\n  'N': {\n    'type': 'string',\n    'description': 'Name of passed string templates. Optional if running in a simple mode. Required when operating on multiple templates.',\n    'alias': 'name'\n  },\n  'i': {\n    'type': 'string',\n    'description': 'Generates a template from the passed CLI argument.\\n\"-\" is treated as a special value and causes stdin to be read for the template value.',\n    'alias': 'string'\n  },\n  'r': {\n    'type': 'string',\n    'description': 'Template root. Base value that will be stripped from template names.',\n    'alias': 'root'\n  },\n  'p': {\n    'type': 'boolean',\n    'description': 'Compiling a partial template',\n    'alias': 'partial'\n  },\n  'd': {\n    'type': 'boolean',\n    'description': 'Include data when compiling',\n    'alias': 'data'\n  },\n  'e': {\n    'type': 'string',\n    'description': 'Template extension.',\n    'alias': 'extension',\n    'default': 'handlebars'\n  },\n  'b': {\n    'type': 'boolean',\n    'description': 'Removes the BOM (Byte Order Mark) from the beginning of the templates.',\n    'alias': 'bom'\n  },\n  'v': {\n    'type': 'boolean',\n    'description': 'Prints the current compiler version',\n    'alias': 'version'\n  },\n  'help': {\n    'type': 'boolean',\n    'description': 'Outputs this message'\n  }\n});\n\nargv.files = argv._;\ndelete argv._;\n\nvar Precompiler = require('../dist/cjs/precompiler');\nPrecompiler.loadTemplates(argv, function(err, opts) {\n\n  if (err) {\n    throw err;\n  }\n\n  if (opts.help || (!opts.templates.length && !opts.version)) {\n    printUsage(argv._spec, 120);\n  } else {\n    Precompiler.cli(opts);\n  }\n});\n\nfunction pad(n) {\n  var str = '';\n  while (str.length < n) {\n    str += ' ';\n  }\n  return str;\n}\n\nfunction parseArgs(spec) {\n  var opts = { alias: {}, boolean: [], default: {}, string: [] };\n\n  Object.keys(spec).forEach(function (arg) {\n    var opt = spec[arg];\n    opts[opt.type].push(arg);\n    if ('alias' in opt) opts.alias[arg] = opt.alias;\n    if ('default' in opt) opts.default[arg] = opt.default;\n  });\n\n  var argv = require('minimist')(process.argv.slice(2), opts);\n  argv._spec = spec;\n  return argv;\n}\n\nfunction printUsage(spec, wrap) {\n  var wordwrap = require('wordwrap');\n\n  console.log('Precompile handlebar templates.');\n  console.log('Usage: handlebars [template|directory]...');\n\n  var opts = [];\n  var width = 0;\n  Object.keys(spec).forEach(function (arg) {\n    var opt = spec[arg];\n\n    var name = (arg.length === 1 ? '-' : '--') + arg;\n    if ('alias' in opt) name += ', --' + opt.alias;\n\n    var meta = '[' + opt.type + ']';\n    if ('default' in opt) meta += ' [default: ' + JSON.stringify(opt.default) + ']';\n\n    opts.push({ name: name, desc: opt.description, meta: meta });\n    if (name.length > width) width = name.length;\n  });\n\n  console.log('Options:');\n  opts.forEach(function (opt) {\n    var desc = wordwrap(width + 4, wrap + 1)(opt.desc);\n\n    console.log('  %s%s%s%s%s',\n      opt.name,\n      pad(width - opt.name.length + 2),\n      desc.slice(width + 4),\n      pad(wrap - opt.meta.length - desc.split(/\\n/).pop().length),\n      opt.meta\n      );\n  });\n}\n",
        "node_modules/.pnpm/node_modules/.bin/handlebars":"#!/bin/sh\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w \"$basedir\"`;;\nesac\n\nif [ -z \"$NODE_PATH\" ]; then\n  export NODE_PATH=\"/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/bin/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/node_modules\"\nelse\n  export NODE_PATH=\"/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/bin/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules/handlebars/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/handlebars@4.7.8/node_modules:/home/lukas/repos/abax/abax-protocol/node_modules/.pnpm/node_modules:$NODE_PATH\"\nfi\nif [ -x \"$basedir/node\" ]; then\n  exec \"$basedir/node\"  \"$basedir/../handlebars/bin/handlebars\" \"$@\"\nelse\n  exec node  \"$basedir/../handlebars/bin/handlebars\" \"$@\"\nfi\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/bad.toml":"[something]\nawesome = \"this is\"\n\n[something.awesome]\nthis = \"isn't\"\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/example.toml":"# This is a TOML document. Boom.\n\ntitle = \"TOML Example\"\n\n[owner]\nname = \"Tom Preston-Werner\"\norganization = \"GitHub\"\nbio = \"GitHub Cofounder & CEO\\n\\tLikes \\\"tater tots\\\" and beer and backslashes: \\\\\"\ndob = 1979-05-27T07:32:00Z # First class dates? Why not?\n\n[database]\nserver = \"192.168.1.1\"\nports = [ 8001, 8001, 8003 ]\nconnection_max = 5000\nconnection_min = -2 # Don't ask me how\nmax_temp = 87.1 # It's a float\nmin_temp = -17.76\nenabled = true\n\n[servers]\n\n  # You can indent as you please. Tabs or spaces. TOML don't care.\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"eqdc10\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ] # just an update to make sure parsers support it\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/hard_example.toml":"# Test file for TOML\n# Only this one tries to emulate a TOML file written by a user of the kind of parser writers probably hate\n# This part you'll really hate\n\n[the]\ntest_string = \"You'll hate me after this - #\"          # \" Annoying, isn't it?\n\n    [the.hard]\n    test_array = [ \"] \", \" # \"]      # ] There you go, parse this!\n    test_array2 = [ \"Test #11 ]proved that\", \"Experiment #9 was a success\" ]\n    # You didn't think it'd as easy as chucking out the last #, did you?\n    another_test_string = \" Same thing, but with a string #\"\n    harder_test_string = \" And when \\\"'s are in the string, along with # \\\"\"   # \"and comments are there too\"\n    # Things will get harder\n\n        [the.hard.\"bit#\"]\n        \"what?\" = \"You don't think some user won't do that?\"\n        multi_line_array = [\n            \"]\",\n            # ] Oh yes I did\n            ]\n\n# Each of the following keygroups/key value pairs should produce an error. Uncomment to them to test\n\n#[error]   if you didn't catch this, your parser is broken\n#string = \"Anything other than tabs, spaces and newline after a keygroup or key value pair has ended should produce an error unless it is a comment\"   like this\n#array = [\n#         \"This might most likely happen in multiline arrays\",\n#         Like here,\n#         \"or here,\n#         and here\"\n#         ]     End of array comment, forgot the #\n#number = 3.14  pi <--again forgot the #\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/inline_tables.toml":"name = { first = \"Tom\", last = \"Preston-Werner\" }\npoint = { x = 1, y = 2 }\nnested = { x = { a = { b = 3 } } }\n\npoints = [ { x = 1, y = 2, z = 3 },\n           { x = 7, y = 8, z = 9 },\n           { x = 2, y = 4, z = 8 } ]\n\narrays = [ { x = [1, 2, 3], y = [4, 5, 6] },\n           { x = [7, 8, 9], y = [0, 1, 2] } ]\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/literal_strings.toml":"# What you see is what you get.\nwinpath  = 'C:\\Users\\nodejs\\templates'\nwinpath2 = '\\\\ServerX\\admin$\\system32\\'\nquoted   = 'Tom \"Dubs\" Preston-Werner'\nregex    = '<\\i\\c*\\s*>'\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/multiline_eat_whitespace.toml":"# The following strings are byte-for-byte equivalent:\nkey1 = \"The quick brown fox jumps over the lazy dog.\"\n\nkey2 = \"\"\"\nThe quick brown \\\n\n\n  fox jumps over \\\n    the lazy dog.\"\"\"\n\nkey3 = \"\"\"\\\n       The quick brown \\\n       fox jumps over \\\n       the lazy dog.\\\n       \"\"\"\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/multiline_literal_strings.toml":"regex2 = '''I [dw]on't need \\d{2} apples'''\nlines  = '''\nThe first newline is\ntrimmed in raw strings.\n   All other whitespace\n   is preserved.\n'''\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/multiline_strings.toml":"# The following strings are byte-for-byte equivalent:\nkey1 = \"One\\nTwo\"\nkey2 = \"\"\"One\\nTwo\"\"\"\nkey3 = \"\"\"\nOne\nTwo\"\"\"\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/table_arrays_easy.toml":"[[products]]\nname = \"Hammer\"\nsku = 738594937\n\n[[products]]\n\n[[products]]\nname = \"Nail\"\nsku = 284758393\ncolor = \"gray\"\n",
        "node_modules/.pnpm/toml@3.0.0/node_modules/toml/test/table_arrays_hard.toml":"[[fruit]]\nname = \"durian\"\nvariety = []\n\n[[fruit]]\nname = \"apple\"\n\n  [fruit.physical]\n    color = \"red\"\n    shape = \"round\"\n\n  [[fruit.variety]]\n    name = \"red delicious\"\n\n  [[fruit.variety]]\n    name = \"granny smith\"\n\n[[fruit]]\n\n[[fruit]]\nname = \"banana\"\n\n  [[fruit.variety]]\n    name = \"plantain\"\n\n[[fruit]]\nname = \"orange\"\n\n[fruit.physical]\ncolor = \"orange\"\nshape = \"round\"\n",
        "src/.rustfmt.toml":"max_width = 80                   # changed\nhard_tabs = false\ntab_spaces = 4\nnewline_style = \"Auto\"\nuse_small_heuristics = \"Default\"\n\n\nreorder_imports = true\nreorder_modules = true\n\nremove_nested_parens = true\nmatch_block_trailing_comma = false\nedition = \"2021\"                   # changed\nmerge_derives = true\nuse_try_shorthand = true           # changed\nuse_field_init_shorthand = true    # changed\nforce_explicit_abi = true\ndisable_all_formatting = false\n",
        "src/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"a_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\ndependencies = [\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80\"\n\n[[package]]\nname = \"balance_viewer\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.90\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8cd6604a82acf3039f1144f54b8eb34e91ffba622051189e71b781822d5ee1f5\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a677b8922c94e01bdbb12126b0bc852f00447528dee1782229af9c720c3f348\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"platforms\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dia_oracle\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11157ac094ffbdde99aa67b23417ebdd801842852b500e395a45a9c0aac03e4a\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fee_reduction_provider_mock\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c007b1ae3abe1cb6f85a16305acd418b7ca6343b953633fee2b76d8f108b830f\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"flash_loan_receiver_mock\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"190092ea657667030ac6a35e305e62fc4dd69fd98ac98631e5d3a2b1575a12b5\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"290f1a1d9242c78d09ce40a5e87e7554ee637af1351968159f4952f028f75604\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"lending_pool\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.153\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb2cfee0de9bd869589fb9a015e155946d1be5ff415cb844c2caccc6cc4b5db9\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adf157a4dc5a29b7b464aa8fe7edeff30076e07e13646a1c3874f58477dc99f8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"523dc4f511e55ab87b694dc30d0f820d60906ef06413f93d4d7a1385599cc149\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"881331e34fa842a2fb61cc2db9643a8fedc615e47cfcc52597d1af0db9a7e8fe\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be30eaf4b0a9fba5336683b38de57bb86d179a35862ba6bfcf57625d006bde5b\"\ndependencies = [\n \"proc-macro-crate 2.0.2\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56f8023d0fb78c8e03784ea1c7f3fa36e68a723138990b8d5a47d916b651e7a8\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"platforms\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"626dec3cac7cc0e1577a2ec3fc496277ec2baa084bebad95bb6fdbfae235f84c\"\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"price_feed_provider\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b00f26d3400549137f92511a46ac1cd8ce37cb5598a96d382381458b992a5d24\"\ndependencies = [\n \"toml_datetime\",\n \"toml_edit 0.20.2\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e835ff2298f5721608eb1a980ecaee1aef2c132bf95ecc026a11b7bf3c01c02e\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291ec9ab5efd934aaf503a6466c5d5251535d108ee747472c3977cc5acc868ef\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.22\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"788745a868b0e751750388f4e6546eb921ef714a4317fa6954f7cde114eb2eb7\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dc2f4e8bc344b9fc3d5f74f72c2e55bfc38d28dc2ebc69c194a3df424e4d9ac\"\ndependencies = [\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45a28f4c49489add4ce10783f7911893516f15afe45d015608d41faca6bc4d29\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c767fd6fa65d9ccf9cf026122c1b555f2ef9a4f0cea69da4d7dbc3e258d30967\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92d43fe69e652f3df9bdc2b85b2854a0825b86e4fb76bc44d945137d053639ca\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fb1c873e1b9b056a4dc4c0c198b24c3ffa059243875552b2bd0933b1aee4ce2\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b8497c313fd43ab992087548117643f6fcd935cbf36f176ffda0aacf9591734\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7eb0b34b42edc17f6b7cac84a52a1c5f0e1bb2227e997ca9011ea3dd34e8610b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.26.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85bf8229e7920a9f636479437026331ce11aa132b4dde37d121944a44d6e5f3c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.115\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12dc5c46daa8e9fdf4f5e71b6cf9a53f2487da0e86e55808e2d35539666497dd\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"stable_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.55\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"002a1b3dbf967edfafc32655d0f377ab0bb7b994aa1d32c8cc7e9b8bf3ebb8f0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"test_psp22\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"test_reserves_minter\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.58\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03468839009160513471e86a034bb2c5c0e4baae3b43f79ffc55c4a5427b3297\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.58\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61f3ba182994efc43764a46c018c347bc492c79f024e705f46567b418f6d4f7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7cda73e2f1397b1262d6dfdcef8aafae14d1de7748d66822d3bfeeb6d03e5e4b\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"396e4d48bbb2b7554c944bde63101b5ae446cff6ec4a24227428f15eb72ef338\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"v_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"abax_library 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"927da81e25be1e1a2901d59b81b37dd2efd1fc9c9345a55007f09bf5a2d3ee03\"\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.55\",\n]\n",
        "src/Cargo.toml":"[workspace]\nmembers = [\n    \"library\",\n    \"contract_modules\",\n    \"contracts/periphery/balance_viewer\",\n    \"contracts/core/a_token\",\n    \"contracts/core/v_token\",\n    \"contracts/core/stable_token\",\n    \"contracts/core/lending_pool\",\n    \"contracts/core/price_feed_provider\",\n    \"contracts/test_purpose/dia_oracle\",\n    \"contracts/test_purpose/fee_reduction_provider_mock\",\n    \"contracts/test_purpose/flash_loan_receiver_mock\",\n    \"contracts/test_purpose/test_psp22\",\n    \"contracts/test_purpose/test_reserves_minter\"\n]\nresolver = \"2\"\n",
        "src/contract_modules/Cargo.toml":"[package]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\ndescription = \"Contracts for the Abax Protocol\"\nlicense = \"BUSL-1.1\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\n\nabax_library = { version = \"0.3.0\", default-features = false }\n\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_burnable\",\n    \"psp22_mintable\",\n    \"ownable\",\n    \"pausable\",\n    \"access_control\",\n] }\n\n[lib]\nname = \"abax_contracts\"\npath = \"lib.rs\"\ncrate-type = [\"rlib\"]\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info/std\",\n\n    # These dependencies\n    \"abax_library/std\",\n    \"pendzl/std\",\n]\n",
        "src/contract_modules/abacus_token/abacus_token_trait.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::prelude::vec::Vec;\nuse pendzl::{\n    contracts::psp22::PSP22Error,\n    traits::{AccountId, Balance},\n};\n\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\n\nuse super::structs::TransferEventData;\npub type AbacusTokenRef = contract_ref!(AbacusToken, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait AbacusToken {\n    /// returns lending_pool AccountId\n    #[ink(message)]\n    fn get_lending_pool(&self) -> AccountId;\n\n    /// Called by lending protocol whenever the state of account deposit or debt (aToken, vToken) is changed.\n    ///\n    /// On success, emits Transfer events.\n    ///\n    /// # Errors\n    /// Returns PSP22Error::Custom(\"NotLendiingPool\") if caller is not lending_pool.\n    #[ink(message)]\n    fn emit_transfer_events(\n        &mut self,\n        transfer_event_data: Vec<TransferEventData>,\n    ) -> Result<(), PSP22Error>;\n\n    /// called whenever the state of account deposit or debt (aToken, vToken) is changed and caller != on_behalf_of.\n    /// case1: Alice has allowance on Bobs ATokens and Alice makes withdraw on behalf of Bob.\n    /// case2: Alice has allowance on Bobs VTokens and Alice makes borrow on behalf of Bob.\n    ///\n    /// On success, emits Transfer event and decreases allowance.\n    ///\n    /// # Errors\n    /// Returns PSP22Error::Custom(\"NotLendingPool\") if caller is not lending_pool.\n    #[ink(message)]\n    fn emit_transfer_event_and_decrease_allowance(\n        &mut self,\n        transfer_event_data: TransferEventData,\n        from: AccountId,\n        to: AccountId,\n        decrease_allowance_by: Balance,\n    ) -> Result<(), PSP22Error>;\n}\n",
        "src/contract_modules/abacus_token/implementation/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod storage;\n\npub use storage::*;\n\nuse crate::abacus_token::TransferEventData;\nuse ink::{\n    prelude::{string::String, vec::Vec},\n    primitives::AccountId,\n};\nuse pendzl::{\n    contracts::psp22::{PSP22Error, PSP22Internal, Transfer},\n    traits::{Balance, StorageFieldGetter},\n};\n\npub trait AbacusTokenImpl:\n    StorageFieldGetter<AbacusTokenStorage> + PSP22Internal\n{\n    fn emit_transfer_events(\n        &mut self,\n        events: Vec<TransferEventData>,\n    ) -> Result<(), PSP22Error> {\n        let lending_pool: AccountId = self.get_lending_pool();\n\n        if lending_pool != Self::env().caller() {\n            return Err(PSP22Error::Custom(String::from(\"NotLendingPool\")));\n        }\n        for event in &events {\n            if event.amount != 0 {\n                Self::env().emit_event(Transfer {\n                    from: event.from,\n                    to: event.to,\n                    value: event.amount,\n                });\n            }\n        }\n        Ok(())\n    }\n\n    fn emit_transfer_event_and_decrease_allowance(\n        &mut self,\n        event: TransferEventData,\n        owner: AccountId,\n        spender: AccountId,\n        decrease_allowance_by: Balance,\n    ) -> Result<(), PSP22Error> {\n        let lending_pool: AccountId = self.get_lending_pool();\n\n        if lending_pool != Self::env().caller() {\n            return Err(PSP22Error::Custom(String::from(\"NotLendingPool\")));\n        }\n        if event.amount != 0 {\n            Self::env().emit_event(Transfer {\n                from: event.from,\n                to: event.to,\n                value: event.amount,\n            })\n        }\n\n        let allowance = self._allowance(&owner, &spender);\n\n        if allowance < decrease_allowance_by {\n            return Err(PSP22Error::InsufficientAllowance);\n        }\n\n        self._decrease_allowance_from_to(\n            &owner,\n            &spender,\n            &decrease_allowance_by,\n        )?;\n\n        Ok(())\n    }\n\n    fn get_lending_pool(&self) -> AccountId {\n        self.data::<AbacusTokenStorage>().lending_pool\n    }\n}\n",
        "src/contract_modules/abacus_token/implementation/storage/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::storage::Mapping;\nuse pendzl::traits::{AccountId, Balance};\n\n// here all the prices of reserves underlaying asssets are stored.\n#[derive(Debug)]\n#[pendzl::storage_item]\npub struct AbacusTokenStorage {\n    pub lending_pool: pendzl::traits::AccountId,\n    pub underlying_asset: pendzl::traits::AccountId,\n    pub allowances: Mapping<(AccountId, AccountId), Balance>,\n}\n\nimpl Default for AbacusTokenStorage {\n    fn default() -> Self {\n        Self {\n            lending_pool: ink::blake2x256!(\"ZERO_ADRESS\").into(),\n            underlying_asset: ink::blake2x256!(\"ZERO_ADRESS\").into(),\n            allowances: Default::default(),\n        }\n    }\n}\n",
        "src/contract_modules/abacus_token/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\npub mod implementation;\n\nmod abacus_token_trait;\nmod structs;\n\npub use abacus_token_trait::*;\npub use structs::*;\n",
        "src/contract_modules/abacus_token/structs.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::primitives::AccountId;\nuse pendzl::traits::Balance;\n\n/// Data needed to emit PSP22 Transfer event.\n#[derive(Default, Debug, scale::Decode, scale::Encode, Clone)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub struct TransferEventData {\n    pub from: Option<AccountId>,\n    pub to: Option<AccountId>,\n    pub amount: Balance,\n}\n",
        "src/contract_modules/account_registrar/implementation/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod storage;\n\npub use storage::*;\n",
        "src/contract_modules/account_registrar/implementation/storage/account_registrar.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::storage::Mapping;\nuse pendzl::traits::AccountId;\n\n#[derive(Default, Debug)]\n#[pendzl::storage_item]\npub struct AccountRegistrar {\n    pub counter_to_account: Mapping<u128, AccountId>,\n    pub account_to_counter: Mapping<AccountId, u128>,\n    pub next_counter: u128,\n}\n\nimpl AccountRegistrar {\n    pub fn ensure_registered(&mut self, account: &AccountId) {\n        if self.account_to_counter.contains(account) {\n            return;\n        }\n        let counter = self.next_counter;\n        self.counter_to_account.insert(counter, account);\n        self.account_to_counter.insert(account, &counter);\n        self.next_counter = counter.checked_add(1).unwrap();\n    }\n}\n",
        "src/contract_modules/account_registrar/implementation/storage/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod account_registrar;\n\npub use account_registrar::*;\n",
        "src/contract_modules/account_registrar/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\npub mod implementation;\n\nmod tratis;\n\npub use tratis::*;\n",
        "src/contract_modules/account_registrar/tratis/account_registrar.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::primitives::AccountId;\n\n#[ink::trait_definition]\npub trait AccountRegistrarView {\n    /// Returns the current counter value.\n    /// Represents the number of registered accounts.\n    #[ink(message)]\n    fn view_next_counter(&self) -> u128;\n    /// Returns the account associated with the given `counter`.\n    #[ink(message)]\n    fn view_counter_to_account(&self, counter: u128) -> Option<AccountId>;\n    /// Returns the counter associated with the given `account`.\n    #[ink(message)]\n    fn view_account_to_counter(&self, account: AccountId) -> Option<u128>;\n}\n",
        "src/contract_modules/account_registrar/tratis/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod account_registrar;\n\npub use account_registrar::*;\n",
        "src/contract_modules/dia_oracle/getter.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::prelude::string::String;\nuse ink::prelude::vec::Vec;\nuse ink::primitives::AccountId;\n\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\npub type OracleGettersRef = contract_ref!(OracleGetters, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait OracleGetters {\n    #[ink(message)]\n    fn get_updater(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_latest_price(&self, pair: String) -> Option<(u64, u128)>;\n\n    #[ink(message)]\n    fn get_latest_prices(&self, pairs: Vec<String>)\n        -> Vec<Option<(u64, u128)>>;\n}\n",
        "src/contract_modules/dia_oracle/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod getter;\nmod setter;\n\npub use getter::*;\npub use setter::*;\n",
        "src/contract_modules/dia_oracle/setter.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::prelude::string::String;\nuse ink::prelude::vec::Vec;\nuse ink::primitives::AccountId;\n\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\npub type OracleSettersRef = contract_ref!(OracleSetters, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait OracleSetters {\n    #[ink(message)]\n    fn transfer_ownership(&mut self, new_owner: AccountId);\n\n    #[ink(message)]\n    fn set_updater(&mut self, updater: AccountId);\n\n    #[ink(message)]\n    fn set_price(&mut self, pair: String, price: u128);\n\n    #[ink(message)]\n    fn set_prices(&mut self, pairs: Vec<(String, u128)>);\n}\n",
        "src/contract_modules/dummy.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::{contract_ref, env::DefaultEnvironment};\n\npub type DummyRef = contract_ref!(Dummy, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait Dummy {\n    #[ink(message)]\n    fn dummy(&self);\n}\n",
        "src/contract_modules/fee_reduction.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::FeeReductions;\nuse ink::primitives::AccountId;\n\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\n\npub type FeeReductionRef = contract_ref!(FeeReduction, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait FeeReduction {\n    /// Returns (deposit_fee_reduction_e6, debt_fee_reduction_e6).\n    #[ink(message)]\n    fn get_fee_reductions(&self, account: AccountId) -> FeeReductions;\n\n    /// Returns flash_loan_fee_reduction_e6.\n    #[ink(message)]\n    fn get_flash_loan_fee_reduction(&self, account: AccountId) -> u32;\n}\n",
        "src/contract_modules/flash_loan_receiver/errors.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::math::errors::MathError;\n\nuse ink::prelude::string::String;\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum FlashLoanReceiverError {\n    MathErorr(MathError),\n    Custom(String),\n}\n\nimpl From<MathError> for FlashLoanReceiverError {\n    fn from(error: MathError) -> Self {\n        FlashLoanReceiverError::MathErorr(error)\n    }\n}\n",
        "src/contract_modules/flash_loan_receiver/flash_loan_receiver_trait.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\nuse ink::prelude::vec::Vec;\nuse pendzl::traits::AccountId;\n\nuse super::FlashLoanReceiverError;\npub type FlashLoanReceiverRef =\n    contract_ref!(FlashLoanReceiver, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait FlashLoanReceiver {\n    /// Called by lending protocol to execute the operation after flash loan is given and before it is paid back.\n    ///\n    /// # Note\n    /// - The function should not pay the tokens back to the lending protocol. The tokens are automatically paid back after the function is executed.\n    /// - After the function is executed, the contract should have enough tokens to cover the flash loan amount and fees.\n    /// - After the function is executed, the lending pool should have allowance to transfer appropriate amount of each asset.\n    ///\n    /// # Errors\n    /// May return FlashLoanReceiverError.\n    #[ink(message)]\n    fn execute_operation(\n        &mut self,\n        assets: Vec<AccountId>,\n        amounts: Vec<u128>,\n        fees: Vec<u128>,\n        receiver_params: Vec<u8>,\n    ) -> Result<(), FlashLoanReceiverError>;\n}\n",
        "src/contract_modules/flash_loan_receiver/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod errors;\nmod flash_loan_receiver_trait;\n\npub use errors::*;\npub use flash_loan_receiver_trait::*;\n",
        "src/contract_modules/lending_pool/constants.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::contracts::access_control::RoleType;\n\n// can mint given asset\npub const MINTER: RoleType = ink::selector_id!(\"MINTER\"); // 4_254_773_782_u32\n\n// can burn given asset\npub const BURNER: RoleType = ink::selector_id!(\"BURNER\"); // 1_711_057_910_u32;\n\n/// can add new asset to the market\npub const ASSET_LISTING_ADMIN: RoleType =\n    ink::selector_id!(\"ASSET_LISTING_ADMIN\"); // 1_094_072_439_u32\n\n/// can modify reserveData parameters\npub const PARAMETERS_ADMIN: RoleType = ink::selector_id!(\"PARAMETERS_ADMIN\"); // 368_001_360_u32\n\n/// can modify current debt rate in ReserveData of asset that is protocol stablecoin\npub const STABLECOIN_RATE_ADMIN: RoleType =\n    ink::selector_id!(\"STABLECOIN_RATE_ADMIN\"); // 2_742_621_032\n\n/// can pause/unpause freeze/unfreeze reserves\npub const EMERGENCY_ADMIN: RoleType = ink::selector_id!(\"EMERGENCY_ADMIN\"); // 297_099_943_u32\n\n/// can assign all the roles\npub const ROLE_ADMIN: RoleType = 0; // 0\n\n/// can withdraw protocol income\npub const TREASURY: RoleType = ink::selector_id!(\"TREASURY\"); // 2_434_241_257_u32\n",
        "src/contract_modules/lending_pool/errors.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::{\n    AssetRulesError, ReserveDataError, ReserveRestrictionsError,\n};\nuse pendzl::{\n    contracts::{access_control::AccessControlError, psp22::PSP22Error},\n    math::errors::MathError,\n};\n\nuse crate::{\n    flash_loan_receiver::FlashLoanReceiverError, price_feed::PriceFeedError,\n};\n\nuse ink::prelude::format;\n\n/// Possible errors returned by `LendingPool` messages.\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum LendingPoolError {\n    PSP22Error(PSP22Error),\n    AccessControlError(AccessControlError),\n\n    MathError(MathError),\n\n    AssetRulesError(AssetRulesError),\n    ReserveDataError(ReserveDataError),\n    ReserveRestrictionsError(ReserveRestrictionsError),\n\n    PriceFeedError(PriceFeedError),\n    FlashLoanReceiverError(FlashLoanReceiverError),\n\n    /// returned if the `amount` argument is zero.\n    AmountNotGreaterThanZero,\n    /// returned if asset that is alerady registered is tried to be registered again.\n    AlreadyRegistered,\n    /// returned if an asset that is not registered is passed as an argument to message.\n    AssetNotRegistered,\n    /// returned if Abax native Stable Tokens AccountId is passed as argument to the message where these tokens are not supported.\n    AssetIsProtocolStablecoin,\n    /// returned if an operation reserved only to abax stable tokens is calles on normal asset.\n    AssetIsNotProtocolStablecoin,\n    /// returned if one tries to borrow an asset that id not allowed to be borrowed based on the market rule chosen by one.\n    RuleBorrowDisable,\n    /// returned if one tries to use as colalteral an asset that id not allowed to be borrowed based on the market rule chosen by one.\n    RuleCollateralDisable,\n    /// returned if after the action account would become undercollaterized\n    InsufficientCollateral,\n    /// returned if one is trying to transfer a debt one doesn't have.\n    InsufficientDebt,\n    /// returned if one is trying to liquidate collaterized account.\n    Collaterized,\n    /// returned if one is trying to transfer or withdraw a deposit one doesn't have.\n    InsufficientDeposit,\n    /// returned if the liquidation would result in not enough recompensation per repaid token.\n    MinimumRecieved,\n    /// returned if there is nothing to be repaid (in an asset) during repay liquidation.\n    NothingToRepay,\n    /// returned if there is nothing (in an asset) to to recompensate the liquidation.\n    NothingToCompensateWith,\n    /// returned if a liquidator tries to take an asset that is not a collateral as a compensation.\n    TakingNotACollateral,\n    /// returned if a pair of vectors used during the operation has inconsistent lengths.\n    VectorsInconsistentLengths,\n    /// returned if passed 'market_rule_id' that is not used.\n    MarketRuleInvalidId,\n    /// returned if the fee is too high (greater then 1 = 10^6).\n    DepositFeeTooHigh,\n    /// returned if the calculated to be used tw entry's index is invalid - points to a non existing entry or the entry's value is too recent.\n    TwEntryInvalidIndex(u8),\n    /// returned if the attempt to adjust the rate is made earlier then the minimal time between adjustments.\n    TooEarlyToAdjustRate,\n}\n\nimpl From<AssetRulesError> for LendingPoolError {\n    fn from(error: AssetRulesError) -> Self {\n        LendingPoolError::AssetRulesError(error)\n    }\n}\nimpl From<ReserveDataError> for LendingPoolError {\n    fn from(error: ReserveDataError) -> Self {\n        LendingPoolError::ReserveDataError(error)\n    }\n}\n\nimpl From<ReserveRestrictionsError> for LendingPoolError {\n    fn from(error: ReserveRestrictionsError) -> Self {\n        LendingPoolError::ReserveRestrictionsError(error)\n    }\n}\n\nimpl From<MathError> for LendingPoolError {\n    fn from(error: MathError) -> Self {\n        LendingPoolError::MathError(error)\n    }\n}\n\nimpl From<PSP22Error> for LendingPoolError {\n    fn from(error: PSP22Error) -> Self {\n        LendingPoolError::PSP22Error(error)\n    }\n}\n\nimpl From<PriceFeedError> for LendingPoolError {\n    fn from(error: PriceFeedError) -> Self {\n        LendingPoolError::PriceFeedError(error)\n    }\n}\n\nimpl From<AccessControlError> for LendingPoolError {\n    fn from(error: AccessControlError) -> Self {\n        LendingPoolError::AccessControlError(error)\n    }\n}\n\nimpl From<LendingPoolError> for PSP22Error {\n    fn from(error: LendingPoolError) -> Self {\n        match error {\n            LendingPoolError::MathError(MathError::Underflow) => {\n                PSP22Error::InsufficientBalance\n            }\n            e => PSP22Error::Custom(format!(\"{e:?}\")),\n        }\n    }\n}\n\nimpl From<FlashLoanReceiverError> for LendingPoolError {\n    fn from(flash_error: FlashLoanReceiverError) -> Self {\n        LendingPoolError::FlashLoanReceiverError(flash_error)\n    }\n}\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum MultiOpError {\n    OperationError(u32, LendingPoolError),\n}\n",
        "src/contract_modules/lending_pool/events.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::{InterestRateModelParams, ReserveRestrictions};\nuse ink::{prelude::string::String, primitives::AccountId};\nuse pendzl::traits::Balance;\n\nuse super::{RuleId, SetReserveFeesArgs};\n\n/// Emitted when a deposit of 'amount' in 'asset' is made by 'caller' on behalf of 'on_behalf_of'.\n/// The data coresponding to asset and (asset, on_behalf_of) is updated (interests are accumulated).\n#[ink::event]\npub struct Deposit {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub on_behalf_of: AccountId,\n    pub amount: Balance,\n}\n/// Emitted when a withdraw of 'amount' in 'asset' is made by 'caller' on behalf of 'on_behalf_of'.\n/// The data coresponding to asset and (asset, on_behalf_of) is updated (interests are accumulated).\n#[ink::event]\npub struct Withdraw {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub on_behalf_of: AccountId,\n    pub amount: Balance,\n}\n\n/// Emitted when a market rule is chosen.\n#[ink::event]\npub struct MarketRuleChosen {\n    #[ink(topic)]\n    pub caller: AccountId,\n    pub market_rule_id: RuleId,\n}\n\n/// Emitted when an `asset` is enabled or disabled as collateral by the `caller`.\n#[ink::event]\npub struct CollateralSet {\n    #[ink(topic)]\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub set: bool,\n}\n\n/// Emitted when a borrow of 'amount' in 'asset' is made by 'caller' on behalf of 'on_behalf_of'.\n/// The data coresponding to asset and (asset, on_behalf_of) is updated (interests are accumulated).\n#[ink::event]\npub struct Borrow {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub on_behalf_of: AccountId,\n    pub amount: Balance,\n}\n\n/// Emitted when a repay of 'amount' in 'asset' is made by 'caller' on behalf of 'on_behalf_of'.\n/// The data coresponding to asset and (asset, on_behalf_of) is updated (interests are accumulated).\n#[ink::event]\npub struct Repay {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub on_behalf_of: AccountId,\n    pub amount: Balance,\n}\n\n/// Emitted when a flash loan of `amount` in `asset` is initiated by `caller` to the `receiver`.\n/// The receiver pays back the `amount` and `fee` in the same transaction.\n#[ink::event]\npub struct FlashLoan {\n    #[ink(topic)]\n    pub receiver: AccountId,\n    #[ink(topic)]\n    pub caller: AccountId,\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub amount: u128,\n    pub fee: u128,\n}\n\n/// Emitted when a liquidation is made by 'liquidator' on 'liquidated_account'.\n/// The liquidator takes 'amount_taken' of 'asset_to_take' and repays 'amount_repaid' of 'asset_to_repay'.\n///\n/// # Note\n/// The data coresponding to asset_to_take, amount_repaid\n/// and (asset_to_repay, liquidated_account)\n/// and (asset_to_take, liquidator) and (asset_to_take, liquidated_account) is updated (interests are accumulated).\n#[ink::event]\npub struct Liquidation {\n    pub liquidator: AccountId,\n    #[ink(topic)]\n    pub liquidated_account: AccountId,\n    #[ink(topic)]\n    pub asset_to_repay: AccountId,\n    #[ink(topic)]\n    pub asset_to_take: AccountId,\n    pub amount_repaid: Balance,\n    pub amount_taken: Balance,\n}\n\n/// Emitted when a interest indexes are updated in reserve coreespoding to asset.\n///\n/// # Note\n/// This event is not emitted when Deposit, Withdraw, Borrow, Repay, Liquidation events are emitted eventhougth the interest indexes are updated.\n#[ink::event]\npub struct InterestsAccumulated {\n    #[ink(topic)]\n    pub asset: AccountId,\n}\n\n/// Emitted when an asset is registered.\n#[ink::event]\npub struct AssetRegistered {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub decimals: u8,\n    pub name: String,\n    pub symbol: String,\n    pub a_token_code_hash: [u8; 32],\n    pub v_token_code_hash: [u8; 32],\n    pub a_token_address: AccountId,\n    pub v_token_address: AccountId,\n}\n\n/// Emitted when a price feed provider is changed.\n#[ink::event]\npub struct PriceFeedProviderChanged {\n    pub price_feed_provider: AccountId,\n}\n\n/// Emitted when a fee reduction provider is changed.\n#[ink::event]\npub struct FeeReductionChanged {\n    pub fee_reduction_provider: AccountId,\n}\n\n/// Emitted when a flash loan fee is changed.\n#[ink::event]\npub struct FlashLoanFeeChanged {\n    pub flash_loan_fee_e6: u128,\n}\n\n/// Emitted when a reserve is activated.\n#[ink::event]\npub struct ReserveActivated {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub active: bool,\n}\n\n/// Emitted when a reserve is frozen.\n#[ink::event]\npub struct ReserveFrozen {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub frozen: bool,\n}\n\n/// Emitted when a interest rate model is changed.\n#[ink::event]\npub struct ReserveInterestRateModelChanged {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub interest_rate_model_params: InterestRateModelParams,\n}\n\n/// Emitted when a reserve restrictions are changed.\n#[ink::event]\npub struct ReserveRestrictionsChanged {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub reserve_restrictions: ReserveRestrictions,\n}\n\n/// Emitted when a reserve fees are changed.\n#[ink::event]\npub struct ReserveFeesChanged {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub reserve_fees: SetReserveFeesArgs,\n}\n\n/// Emitted when an asset rules in an martket rule are changed.\n#[ink::event]\npub struct AssetRulesChanged {\n    #[ink(topic)]\n    pub market_rule_id: RuleId,\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub collateral_coefficient_e6: Option<u128>,\n    pub borrow_coefficient_e6: Option<u128>,\n    pub penalty_e6: Option<u128>,\n}\n\n/// Emitted when a protocol income genareted in 'asset' is taken.\n#[ink::event]\npub struct IncomeTaken {\n    #[ink(topic)]\n    pub asset: AccountId,\n}\n\n/// Emitted when stablecoin debt rate is changed.\n#[ink::event]\npub struct StablecoinDebtRateChanged {\n    #[ink(topic)]\n    pub asset: AccountId,\n    pub debt_rate_e18: u64,\n}\n",
        "src/contract_modules/lending_pool/implementation/a_token_interface.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse super::{_check_amount_not_zero, storage::LendingPoolStorage};\nuse crate::{\n    abacus_token::{AbacusToken, AbacusTokenRef, TransferEventData},\n    lending_pool::{\n        events::{Deposit, Withdraw},\n        LendingPoolError,\n    },\n};\nuse ink::codegen::TraitCallBuilder;\nuse ink::{env::DefaultEnvironment, prelude::*};\nuse pendzl::{\n    contracts::access_control::AccessControlError,\n    traits::{AccountId, Balance, StorageFieldGetter},\n};\n\npub trait LendingPoolATokenInterfaceImpl:\n    StorageFieldGetter<LendingPoolStorage>\n{\n    fn total_deposit_of(&self, underlying_asset: AccountId) -> Balance {\n        let timestamp = Self::env().block_timestamp();\n        self.data::<LendingPoolStorage>()\n            .total_deposit_of(&underlying_asset, &timestamp)\n            .unwrap()\n    }\n\n    fn account_deposit_of(\n        &self,\n        underlying_asset: AccountId,\n        account: AccountId,\n    ) -> Balance {\n        let timestamp = Self::env().block_timestamp();\n        self.data::<LendingPoolStorage>()\n            .account_deposit_of(&underlying_asset, &account, &timestamp)\n            .unwrap()\n    }\n\n    fn transfer_deposit_from_to(\n        &mut self,\n        underlying_asset: AccountId,\n        from: AccountId,\n        to: AccountId,\n        amount: Balance,\n    ) -> Result<(Balance, Balance), LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let reserve_abacus_tokens_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(underlying_asset)\n            .ok_or(LendingPoolError::AssetNotRegistered)?;\n        if Self::env().caller() != reserve_abacus_tokens_tokens.a_token_address\n        {\n            return Err((AccessControlError::MissingRole).into());\n        }\n\n        let timestamp = Self::env().block_timestamp();\n        let (\n            (from_accumulated_deposit_interest, from_accumulated_debt_interest),\n            (to_accumulated_deposit_interest, to_accumulated_debt_interest),\n        ) = self\n            .data::<LendingPoolStorage>()\n            .account_for_deposit_transfer_from_to(\n                &underlying_asset,\n                &from,\n                &to,\n                &amount,\n                &timestamp,\n            )?;\n\n        // check if there ie enought collateral\n        self.data::<LendingPoolStorage>()\n            .ensure_collateralized_by_account(&from)?;\n\n        //// ABACUS TOKEN EVENTS\n        // AToken interests are returned.\n        // VToken intersts\n        if from_accumulated_debt_interest != 0\n            || to_accumulated_debt_interest != 0\n        {\n            let mut abacus_token_contract: AbacusTokenRef =\n                reserve_abacus_tokens_tokens.v_token_address.into();\n\n            abacus_token_contract\n                .call_mut()\n                .emit_transfer_events(vec![\n                    TransferEventData {\n                        from: None,\n                        to: Some(from),\n                        amount: from_accumulated_debt_interest,\n                    },\n                    TransferEventData {\n                        from: None,\n                        to: Some(to),\n                        amount: to_accumulated_debt_interest,\n                    },\n                ])\n                .call_v1()\n                .invoke()?;\n        }\n\n        //// EVENT\n        ink::env::emit_event::<DefaultEnvironment, Deposit>(Deposit {\n            asset: underlying_asset,\n            caller: Self::env().caller(),\n            on_behalf_of: to,\n            amount,\n        });\n        ink::env::emit_event::<DefaultEnvironment, Withdraw>(Withdraw {\n            asset: underlying_asset,\n            caller: Self::env().caller(),\n            on_behalf_of: from,\n            amount,\n        });\n\n        Ok((\n            from_accumulated_deposit_interest,\n            to_accumulated_deposit_interest,\n        ))\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/borrow.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{\n    events::{Borrow, CollateralSet, MarketRuleChosen, Repay},\n    LendingPoolError, RuleId,\n};\nuse ink::{\n    env::DefaultEnvironment,\n    prelude::{vec, vec::Vec},\n};\nuse pendzl::{\n    math::errors::MathError,\n    traits::{AccountId, Balance, StorageFieldGetter},\n};\n\nuse abax_library::structs::{Action, Operation, OperationArgs};\n\nuse super::{\n    internal::{\n        Transfer, _check_amount_not_zero, _emit_abacus_token_transfer_event,\n        _emit_abacus_token_transfer_event_and_decrease_allowance,\n    },\n    storage::LendingPoolStorage,\n};\n\npub trait LendingPoolBorrowImpl:\n    StorageFieldGetter<LendingPoolStorage>\n{\n    fn choose_market_rule(\n        &mut self,\n        market_rule_id: RuleId,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self.data::<LendingPoolStorage>()\n            .account_for_market_rule_change(&caller, market_rule_id)?;\n\n        // check if there ie enought collateral\n        self.data::<LendingPoolStorage>()\n            .ensure_collateralized_by_account(&caller)?;\n\n        ink::env::emit_event::<DefaultEnvironment, MarketRuleChosen>(\n            MarketRuleChosen {\n                caller,\n                market_rule_id,\n            },\n        );\n        Ok(())\n    }\n    fn set_as_collateral(\n        &mut self,\n        asset: AccountId,\n        use_as_collateral_to_set: bool,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self.data::<LendingPoolStorage>()\n            .account_for_set_as_collateral(\n                &caller,\n                &asset,\n                use_as_collateral_to_set,\n            )?;\n\n        // if the collateral is turned off collateralization must be checked\n        if !use_as_collateral_to_set {\n            self.data::<LendingPoolStorage>()\n                .ensure_collateralized_by_account(&caller)?;\n        }\n\n        ink::env::emit_event::<DefaultEnvironment, CollateralSet>(\n            CollateralSet {\n                caller,\n                asset,\n                set: use_as_collateral_to_set,\n            },\n        );\n\n        Ok(())\n    }\n\n    fn borrow(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        #[allow(unused_variables)] data: Vec<u8>,\n    ) -> Result<(), LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let mut actions = vec![Action {\n            op: Operation::Borrow,\n            args: OperationArgs { asset, amount },\n        }];\n        let res = self\n            .data::<LendingPoolStorage>()\n            .account_for_account_actions(&on_behalf_of, &mut actions)?;\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ) = res.first().unwrap();\n\n        //// TOKEN TRANSFER\n        self._transfer_out(&asset, &Self::env().caller(), &amount)?;\n\n        //// ABACUS TOKEN EVENTS\n        let abacus_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.a_token_address,\n            &on_behalf_of,\n            *account_accumulated_deposit_interest as i128,\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_event_and_decrease_allowance(\n            &abacus_tokens.v_token_address,\n            &on_behalf_of,\n            (account_accumulated_debt_interest\n                .checked_add(amount)\n                .ok_or(MathError::Overflow)?) as i128,\n            &(Self::env().caller()),\n            amount,\n        )?;\n        //// emit event\n        ink::env::emit_event::<DefaultEnvironment, Borrow>(Borrow {\n            asset,\n            caller: Self::env().caller(),\n            on_behalf_of,\n            amount,\n        });\n        Ok(())\n    }\n\n    fn repay(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        #[allow(unused_variables)] data: Vec<u8>,\n    ) -> Result<Balance, LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let mut actions = vec![Action {\n            op: Operation::Repay,\n            args: OperationArgs { asset, amount },\n        }];\n        let res = self\n            .data::<LendingPoolStorage>()\n            .account_for_account_actions(&on_behalf_of, &mut actions)?;\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ) = res.first().unwrap();\n        //// TOKEN TRANSFER\n        self._transfer_in(\n            &asset,\n            &Self::env().caller(),\n            &actions[0].args.amount,\n        )?;\n        //// ABACUS TOKEN EVENTS\n        let abacus_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.a_token_address,\n            &on_behalf_of,\n            *account_accumulated_deposit_interest as i128,\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.v_token_address,\n            &on_behalf_of,\n            (*account_accumulated_debt_interest as i128)\n                .overflowing_sub(actions[0].args.amount as i128)\n                .0,\n        )?;\n        //// EVENT\n        ink::env::emit_event::<DefaultEnvironment, Repay>(Repay {\n            asset,\n            caller: Self::env().caller(),\n            on_behalf_of,\n            amount: actions[0].args.amount,\n        });\n        Ok(actions[0].args.amount)\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/deposit.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{\n    events::{Deposit, Withdraw},\n    LendingPoolError,\n};\nuse ink::{\n    env::DefaultEnvironment,\n    prelude::{vec, vec::Vec},\n};\nuse pendzl::{\n    math::errors::MathError,\n    traits::{AccountId, Balance, StorageFieldGetter},\n};\n\nuse abax_library::structs::{Action, Operation, OperationArgs};\n\nuse super::{\n    internal::{\n        Transfer, _check_amount_not_zero, _emit_abacus_token_transfer_event,\n        _emit_abacus_token_transfer_event_and_decrease_allowance,\n    },\n    storage::LendingPoolStorage,\n};\n\npub trait LendingPoolDepositImpl:\n    StorageFieldGetter<LendingPoolStorage> + Transfer\n{\n    fn deposit(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        #[allow(unused_variables)] data: Vec<u8>,\n    ) -> Result<(), LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let mut actions = vec![Action {\n            op: Operation::Deposit,\n            args: OperationArgs { asset, amount },\n        }];\n        let res = self\n            .data::<LendingPoolStorage>()\n            .account_for_account_actions(&on_behalf_of, &mut actions)?;\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ) = res.first().unwrap();\n        //// TOKEN TRANSFERS\n        self._transfer_in(\n            &asset,\n            &Self::env().caller(),\n            &actions[0].args.amount,\n        )?;\n        //// ABACUS TOKEN EVENTS\n        let abacus_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.a_token_address,\n            &on_behalf_of,\n            (account_accumulated_deposit_interest\n                .checked_add(amount)\n                .ok_or(MathError::Overflow)?) as i128,\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.v_token_address,\n            &on_behalf_of,\n            *account_accumulated_debt_interest as i128,\n        )?;\n\n        //// EVENT\n        ink::env::emit_event::<DefaultEnvironment, Deposit>(Deposit {\n            asset,\n            caller: Self::env().caller(),\n            on_behalf_of,\n            amount,\n        });\n\n        Ok(())\n    }\n\n    fn withdraw(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        #[allow(unused_variables)] data: Vec<u8>,\n    ) -> Result<Balance, LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let mut actions = vec![Action {\n            op: Operation::Withdraw,\n            args: OperationArgs { asset, amount },\n        }];\n        let res = self\n            .data::<LendingPoolStorage>()\n            .account_for_account_actions(&on_behalf_of, &mut actions)?;\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ) = res.first().unwrap();\n\n        //// TOKEN TRANSFERS\n        self._transfer_out(\n            &asset,\n            &Self::env().caller(),\n            &actions[0].args.amount,\n        )?;\n\n        //// ABACUS TOKEN EVENTS\n        let abacus_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_event_and_decrease_allowance(\n            &abacus_tokens.a_token_address,\n            &on_behalf_of,\n            (*account_accumulated_deposit_interest as i128)\n                .overflowing_sub(actions[0].args.amount as i128)\n                .0,\n            &(Self::env().caller()),\n            actions[0].args.amount,\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens.v_token_address,\n            &on_behalf_of,\n            *account_accumulated_debt_interest as i128,\n        )?;\n\n        //// EVENT\n        ink::env::emit_event::<DefaultEnvironment, Withdraw>(Withdraw {\n            asset,\n            caller: Self::env().caller(),\n            on_behalf_of,\n            amount: actions[0].args.amount,\n        });\n\n        Ok(actions[0].args.amount)\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/flash.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::fee_reduction::FeeReduction;\nuse crate::{\n    fee_reduction::FeeReductionRef,\n    flash_loan_receiver::FlashLoanReceiverError,\n    lending_pool::{events::FlashLoan, LendingPoolError},\n};\n\nuse abax_library::math::{E6_U128, E6_U32};\nuse ink::{\n    env::{\n        call::{build_call, ExecutionInput},\n        CallFlags, DefaultEnvironment,\n    },\n    prelude::{vec, vec::Vec},\n};\n\nuse pendzl::math::operations::{mul_div, Rounding};\nuse pendzl::traits::{AccountId, Balance, StorageFieldGetter};\n\nuse super::{\n    internal::{Transfer, _check_amount_not_zero},\n    storage::LendingPoolStorage,\n};\nuse ink::codegen::TraitCallBuilder;\n\npub trait LendingPoolFlashImpl: StorageFieldGetter<LendingPoolStorage> {\n    fn flash_loan(\n        &mut self,\n        receiver: AccountId,\n        assets: Vec<AccountId>,\n        amounts: Vec<Balance>,\n        receiver_params: Vec<u8>,\n    ) -> Result<(), LendingPoolError> {\n        if assets.len() != amounts.len() {\n            return Err(LendingPoolError::VectorsInconsistentLengths);\n        }\n\n        let mut fees: Vec<u128> = vec![];\n        let flash_fee_e6 = self\n            .data::<LendingPoolStorage>()\n            .flash_loan_fee_e6\n            .get()\n            .unwrap();\n\n        let fee_reduction_e6 = {\n            if let Some(free_provider_account) = self\n                .data::<LendingPoolStorage>()\n                .fee_reduction_provider\n                .get()\n            {\n                let free_provider: FeeReductionRef =\n                    free_provider_account.into();\n                free_provider\n                    .call()\n                    .get_flash_loan_fee_reduction(Self::env().caller())\n                    .call_v1()\n                    .invoke()\n            } else {\n                0\n            }\n        };\n        let fee_part_e6 = E6_U32.saturating_sub(fee_reduction_e6);\n\n        for i in 0..assets.len() {\n            _check_amount_not_zero(amounts[i])?;\n\n            let pre_fee =\n                mul_div(amounts[i], flash_fee_e6, E6_U128, Rounding::Up)?;\n            let fee =\n                mul_div(pre_fee, fee_part_e6 as u128, E6_U128, Rounding::Up)?;\n\n            fees.push(fee);\n            self._transfer_out(&assets[i], &receiver, &amounts[i])?;\n        }\n\n        build_call::<DefaultEnvironment>()\n            .call_v1(receiver)\n            .call_flags(CallFlags::ALLOW_REENTRY)\n            .exec_input(\n                ExecutionInput::new(ink::env::call::Selector::new(\n                    ink::selector_bytes!(\n                        \"FlashLoanReceiver::execute_operation\"\n                    ),\n                ))\n                .push_arg(assets.clone())\n                .push_arg(amounts.clone())\n                .push_arg(fees.clone())\n                .push_arg(receiver_params),\n            )\n            .returns::<Result<(), FlashLoanReceiverError>>()\n            .try_invoke()\n            .unwrap()\n            .unwrap()?;\n\n        for i in 0..assets.len() {\n            self._transfer_in(\n                &assets[i],\n                &receiver,\n                &amounts[i].checked_add(fees[i]).unwrap(),\n            )?;\n\n            ink::env::emit_event::<DefaultEnvironment, FlashLoan>(FlashLoan {\n                receiver,\n                caller: Self::env().account_id(),\n                asset: assets[i],\n                amount: amounts[i],\n                fee: fees[i],\n            });\n        }\n        Ok(())\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/internal.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse core::{cmp::Ordering, ops::Neg};\n\nuse crate::{\n    abacus_token::{AbacusToken, AbacusTokenRef, TransferEventData},\n    lending_pool::LendingPoolError,\n};\nuse ink::{\n    prelude::{vec::Vec, *},\n    primitives::AccountId,\n};\n\nuse pendzl::{\n    contracts::psp22::{\n        burnable::{PSP22Burnable, PSP22BurnableRef},\n        mintable::{PSP22Mintable, PSP22MintableRef},\n        PSP22Error, PSP22Ref, PSP22,\n    },\n    traits::{Balance, StorageFieldGetter},\n};\n\nuse super::storage::LendingPoolStorage;\nuse ink::codegen::TraitCallBuilder;\n\npub fn _check_amount_not_zero(amount: u128) -> Result<(), LendingPoolError> {\n    if amount == 0 {\n        return Err(LendingPoolError::AmountNotGreaterThanZero);\n    }\n    Ok(())\n}\npub fn _emit_abacus_token_transfer_event(\n    abacus_token: &AccountId,\n    account: &AccountId,\n    amount_transferred: i128,\n) -> Result<(), PSP22Error> {\n    let mut abacus_token_contract: AbacusTokenRef = (*abacus_token).into();\n    match amount_transferred.cmp(&0) {\n        Ordering::Greater => abacus_token_contract\n            .call_mut()\n            .emit_transfer_events(vec![TransferEventData {\n                from: None,\n                to: Some(*account),\n                amount: u128::try_from(amount_transferred).unwrap(), // Ordering::Greater => amount is greater than zero\n            }])\n            .call_v1()\n            .invoke(),\n        Ordering::Less => abacus_token_contract\n            .call_mut()\n            .emit_transfer_events(vec![TransferEventData {\n                from: Some(*account),\n                to: None,\n                amount: u128::try_from(amount_transferred.neg()).unwrap(), // Ordering::Less => amount is less than zero => neg() is positive\n            }])\n            .call_v1()\n            .invoke(),\n        Ordering::Equal => Ok(()),\n    }\n}\n\npub struct TransferEventDataSimplified {\n    pub account: AccountId,\n    pub amount: i128,\n}\n\npub fn _emit_abacus_token_transfer_events(\n    abacus_token: &AccountId,\n    data: &Vec<TransferEventDataSimplified>,\n) -> Result<(), PSP22Error> {\n    let mut events: Vec<TransferEventData> = vec![];\n    for event in data {\n        if event.amount > 0 {\n            events.push(TransferEventData {\n                from: None,\n                to: Some(event.account),\n                amount: event.amount as u128,\n            })\n        } else {\n            events.push(TransferEventData {\n                from: Some(event.account),\n                to: None,\n                amount: u128::try_from(event.amount.neg()).unwrap(), // event.amount is less than zero => neg() is positive\n            })\n        }\n    }\n    let mut abacus_token_contract: AbacusTokenRef = (*abacus_token).into();\n\n    abacus_token_contract\n        .call_mut()\n        .emit_transfer_events(events)\n        .call_v1()\n        .invoke()\n}\n\npub fn _emit_abacus_token_transfer_event_and_decrease_allowance(\n    abacus_token: &AccountId,\n    account: &AccountId,\n    amount_transferred: i128,\n    spender: &AccountId,\n    decrease_alowance_by: Balance,\n) -> Result<(), PSP22Error> {\n    if *spender == *account {\n        _emit_abacus_token_transfer_event(\n            abacus_token,\n            account,\n            amount_transferred,\n        )\n    } else {\n        let event = if amount_transferred > 0 {\n            TransferEventData {\n                from: None,\n                to: Some(*account),\n                amount: amount_transferred as u128,\n            }\n        } else {\n            TransferEventData {\n                from: Some(*account),\n                to: None,\n                amount: amount_transferred as u128,\n            }\n        };\n        let mut abacus_token_contract: AbacusTokenRef = (*abacus_token).into();\n\n        abacus_token_contract\n            .call_mut()\n            .emit_transfer_event_and_decrease_allowance(\n                event,\n                *account,\n                *spender,\n                decrease_alowance_by,\n            )\n            .call_v1()\n            .invoke()\n    }\n}\n\npub trait Transfer {\n    /// Transfers `want` tokens from `account` to self.\n    fn _transfer_in(\n        &self,\n        asset: &AccountId,\n        from: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Transfers `want` tokens from self to `account`.\n    fn _transfer_out(\n        &self,\n        asset: &AccountId,\n        to: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), LendingPoolError>;\n}\n\nimpl<T: StorageFieldGetter<LendingPoolStorage>> Transfer for T {\n    fn _transfer_in(\n        &self,\n        asset: &AccountId,\n        from: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), LendingPoolError> {\n        if self\n            .data()\n            .interest_rate_model\n            .contains(self.data().asset_id(asset)?)\n        {\n            let mut psp22: PSP22Ref = (*asset).into();\n            psp22\n                .call_mut()\n                .transfer_from(\n                    *from,\n                    Self::env().account_id(),\n                    *amount,\n                    Vec::<u8>::new(),\n                )\n                .call_v1()\n                .invoke()?;\n        } else {\n            let mut psp22: PSP22BurnableRef = (*asset).into();\n            psp22.call_mut().burn(*from, *amount).call_v1().invoke()?\n        }\n        Ok(())\n    }\n\n    /// Transfers `want` tokens from self to `account`.\n    fn _transfer_out(\n        &self,\n        asset: &AccountId,\n        to: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), LendingPoolError> {\n        if self\n            .data()\n            .interest_rate_model\n            .contains(self.data().asset_id(asset)?)\n        {\n            let mut psp22: PSP22Ref = (*asset).into();\n            psp22\n                .call_mut()\n                .transfer(*to, *amount, vec![])\n                .call_v1()\n                .invoke()?;\n        } else {\n            let mut psp22: PSP22MintableRef = (*asset).into();\n            psp22.call_mut().mint(*to, *amount).call_v1().invoke()?\n        }\n        Ok(())\n    }\n}\n\npub trait InternalIncome {\n    fn _view_protocol_income(\n        &self,\n        assets: &[AccountId],\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError>;\n\n    fn _take_protocol_income(\n        &mut self,\n        assets: &[AccountId],\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError>;\n}\n\nimpl<T: StorageFieldGetter<LendingPoolStorage>> InternalIncome for T {\n    fn _view_protocol_income(\n        &self,\n        assets: &[AccountId],\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError> {\n        let mut result: Vec<(AccountId, Balance)> = vec![];\n        for asset in assets.iter() {\n            let asset_id = self.data().asset_id(asset)?;\n            let mut reserve_indexes_and_fees = self\n                .data()\n                .reserve_indexes_and_fees\n                .get(asset_id)\n                .ok_or(LendingPoolError::AssetNotRegistered)?;\n\n            let income = reserve_indexes_and_fees.fees.take_earned_fee();\n\n            result.push((*asset, income));\n        }\n        Ok(result)\n    }\n    fn _take_protocol_income(\n        &mut self,\n        assets: &[AccountId],\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError> {\n        let mut result: Vec<(AccountId, Balance)> = vec![];\n        for asset in assets.iter() {\n            let asset_id = self.data().asset_id(asset)?;\n            let mut reserve_indexes_and_fees = self\n                .data()\n                .reserve_indexes_and_fees\n                .get(asset_id)\n                .ok_or(LendingPoolError::AssetNotRegistered)?;\n\n            let income = reserve_indexes_and_fees.fees.take_earned_fee();\n\n            self.data()\n                .reserve_indexes_and_fees\n                .insert(asset_id, &reserve_indexes_and_fees);\n\n            result.push((*asset, income));\n        }\n        Ok(result)\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/liquidate.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{events::Liquidation, LendingPoolError};\nuse abax_library::math::E18_U128;\nuse ink::{\n    env::DefaultEnvironment,\n    prelude::{vec::Vec, *},\n};\n\nuse pendzl::{\n    math::{\n        errors::MathError,\n        operations::{mul_div, Rounding},\n    },\n    traits::{AccountId, Balance, StorageFieldGetter},\n};\n\nuse super::{\n    internal::{\n        Transfer, TransferEventDataSimplified,\n        _emit_abacus_token_transfer_event, _emit_abacus_token_transfer_events,\n    },\n    storage::LendingPoolStorage,\n};\n\npub trait LendingPoolLiquidateImpl:\n    StorageFieldGetter<LendingPoolStorage> + Transfer\n{\n    fn liquidate(\n        &mut self,\n        liquidated_account: AccountId,\n        asset_to_repay: AccountId,\n        asset_to_take: AccountId,\n        mut amount_to_repay: Balance,\n        minimum_recieved_for_one_repaid_token_e18: u128,\n        #[allow(unused_variables)] data: Vec<u8>,\n    ) -> Result<(Balance, Balance), LendingPoolError> {\n        // ensure account is undercollaterized\n        match self\n            .data::<LendingPoolStorage>()\n            .ensure_collateralized_by_account(&liquidated_account)\n        {\n            Ok(_) => Err(LendingPoolError::Collaterized),\n            Err(_) => Ok(()),\n        }?;\n\n        let timestamp = Self::env().block_timestamp();\n        let caller = Self::env().caller();\n\n        let (\n            amount_to_take,\n            (\n                account_accumulated_deposit_interest_to_repay,\n                account_accumulated_debt_interest_to_repay,\n            ),\n            (\n                account_accumulated_deposit_interest_to_take,\n                account_accumulated_debt_interest_to_take,\n            ),\n            (\n                caller_accumulated_deposit_interest_to_take,\n                caller_accumulated_debt_interest_to_take,\n            ),\n        ) = self.data::<LendingPoolStorage>().account_for_liquidate(\n            &caller,\n            &liquidated_account,\n            &asset_to_repay,\n            &asset_to_take,\n            &mut amount_to_repay,\n            &timestamp,\n        )?;\n\n        let recieved_for_one_repaid_token_e18 =\n            mul_div(amount_to_take, E18_U128, amount_to_repay, Rounding::Down)?;\n\n        if recieved_for_one_repaid_token_e18\n            < minimum_recieved_for_one_repaid_token_e18\n        {\n            return Err(LendingPoolError::MinimumRecieved);\n        }\n        //// TOKEN TRANSFERS\n\n        self._transfer_in(&asset_to_repay, &caller, &amount_to_repay)?;\n\n        //// ABACUS TOKEN EVENTS\n        //// to_repay_token\n\n        let abacus_tokens_to_repay = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset_to_repay)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens_to_repay.a_token_address,\n            &liquidated_account,\n            (account_accumulated_deposit_interest_to_repay) as i128,\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_event(\n            &abacus_tokens_to_repay.v_token_address,\n            &liquidated_account,\n            (account_accumulated_debt_interest_to_repay as i128)\n                .overflowing_sub(amount_to_repay as i128)\n                .0,\n        )?;\n\n        //// to_take_token\n        let abacus_tokens_to_take = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset_to_take)\n            .unwrap();\n        // ATOKEN\n        _emit_abacus_token_transfer_events(\n            &abacus_tokens_to_take.a_token_address,\n            &vec![\n                TransferEventDataSimplified {\n                    account: liquidated_account,\n                    amount: (account_accumulated_deposit_interest_to_take\n                        as i128)\n                        .overflowing_sub(amount_to_take as i128)\n                        .0,\n                },\n                TransferEventDataSimplified {\n                    account: caller,\n                    amount: caller_accumulated_deposit_interest_to_take\n                        .checked_add(amount_to_take)\n                        .ok_or(MathError::Overflow)?\n                        as i128,\n                },\n            ],\n        )?;\n        // VTOKEN\n        _emit_abacus_token_transfer_events(\n            &abacus_tokens_to_take.v_token_address,\n            &vec![\n                TransferEventDataSimplified {\n                    account: liquidated_account,\n                    amount: account_accumulated_debt_interest_to_take as i128,\n                },\n                TransferEventDataSimplified {\n                    account: caller,\n                    amount: caller_accumulated_debt_interest_to_take as i128,\n                },\n            ],\n        )?;\n\n        // EVENT\n        ink::env::emit_event::<DefaultEnvironment, Liquidation>(Liquidation {\n            liquidator: caller,\n            liquidated_account,\n            asset_to_repay,\n            asset_to_take,\n            amount_repaid: amount_to_repay,\n            amount_taken: amount_to_take,\n        });\n\n        Ok((amount_to_repay, amount_to_take))\n    }\n\n    // fn liquidate_outside(\n    //     &mut self,\n    //     account: AccountId,\n    //     asset_to_repay: AccountId,\n    //     asset_to_take: AccountId,\n    //     mut amount_to_repay: Balance,\n    //     #[allow(unused_variables)] data: Vec<u8>,\n    // ) -> Result<(Balance, Balance), LendingPoolError> {\n    //     let block_timestamp = Self::env().block_timestamp();\n    //     let caller = Self::env().caller();\n    //     let (collaterized, _) = self\n    //         .data::<LendingPoolStorage>()\n    //         .calculate_account_lending_power_e6(&account)?;\n    //     if collaterized {\n    //         return Err(LendingPoolError::Collaterized);\n    //     }\n\n    //     let (\n    //         account_accumulated_deposit_interest_to_repay,\n    //         account_accumulated_debt_interest_to_repay,\n    //     ) = self.data::<LendingPoolStorage>().account_for_repay(\n    //         &asset_to_repay,\n    //         &caller,\n    //         &mut amount_to_repay,\n    //         &block_timestamp,\n    //     )?;\n    //     self._transfer_in(&asset_to_repay, &caller, &amount_to_repay)?;\n\n    //     let mut amount_to_take = self\n    //         .data::<LendingPoolStorage>()\n    //         .calculate_liquidated_amount_and_check_if_collateral(\n    //             &account,\n    //             &asset_to_repay,\n    //             &asset_to_take,\n    //             &amount_to_repay,\n    //         )?;\n\n    //     let (\n    //         account_accumulated_deposit_interest_to_take,\n    //         account_accumulated_debt_interest_to_take,\n    //     ) = self.data::<LendingPoolStorage>().account_for_withdraw(\n    //         &asset_to_take,\n    //         &account,\n    //         &mut amount_to_take,\n    //         &block_timestamp,\n    //     )?;\n\n    //     self._transfer_out(&asset_to_take, &caller, &amount_to_take)?;\n\n    //     //// ABACUS TOKEN EVENTS\n    //     //// to_repay_token\n    //     let abacus_tokens_to_repay = self\n    //         .data::<LendingPoolStorage>()\n    //         .reserve_abacus_tokens\n    //         .get(&asset_to_repay)\n    //         .unwrap();\n    //     // ATOKEN\n    //     _emit_abacus_token_transfer_event(\n    //         &abacus_tokens_to_repay.a_token_address,\n    //         &account,\n    //         (account_accumulated_deposit_interest_to_repay) as i128,\n    //     )?;\n    //     // VTOKEN\n    //     _emit_abacus_token_transfer_event(\n    //         &abacus_tokens_to_repay.v_token_address,\n    //         &account,\n    //         account_accumulated_debt_interest_to_repay as i128\n    //             - amount_to_repay as i128,\n    //     )?;\n    //     //// to_take_token\n    //     let abacus_tokens_to_take = self\n    //         .data::<LendingPoolStorage>()\n    //         .reserve_abacus_tokens\n    //         .get(&asset_to_take)\n    //         .unwrap();\n    //     // ATOKEN\n    //     // ATOKEN\n    //     _emit_abacus_token_transfer_event(\n    //         &abacus_tokens_to_take.a_token_address,\n    //         &account,\n    //         (account_accumulated_deposit_interest_to_take) as i128,\n    //     )?;\n    //     // VTOKEN\n    //     _emit_abacus_token_transfer_event(\n    //         &abacus_tokens_to_take.v_token_address,\n    //         &account,\n    //         account_accumulated_debt_interest_to_take as i128\n    //             - amount_to_take as i128,\n    //     )?;\n    //     // EVENT\n    //     self._emit_liquidation_variable_event(\n    //         caller,\n    //         account,\n    //         asset_to_repay,\n    //         asset_to_take,\n    //         amount_to_repay,\n    //         amount_to_take,\n    //     );\n    //     Ok((amount_to_repay, amount_to_take))\n    // }\n}\n",
        "src/contract_modules/lending_pool/implementation/maintain.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{events::InterestsAccumulated, LendingPoolError};\nuse ink::{env::DefaultEnvironment, primitives::AccountId};\nuse pendzl::{math::errors::MathError, traits::StorageFieldGetter};\n\nuse super::storage::LendingPoolStorage;\n\npub trait LendingPoolMaintainImpl:\n    StorageFieldGetter<LendingPoolStorage>\n{\n    fn accumulate_interest(\n        &mut self,\n        asset: AccountId,\n    ) -> Result<(), LendingPoolError> {\n        //// PULL DATA\n        let timestamp = Self::env().block_timestamp();\n        self.data::<LendingPoolStorage>()\n            .account_for_accumulate_interest(&asset, &timestamp)?;\n        ink::env::emit_event::<DefaultEnvironment, InterestsAccumulated>(\n            InterestsAccumulated { asset },\n        );\n\n        Ok(())\n    }\n\n    fn adjust_rate_at_target(\n        &mut self,\n        asset: AccountId,\n        guessed_index: u32,\n    ) -> Result<u64, LendingPoolError> {\n        let timestamp = Self::env().block_timestamp();\n\n        let asset_id = self.data::<LendingPoolStorage>().asset_id(&asset)?;\n\n        if let Some(mut interest_rate_model) = self\n            .data::<LendingPoolStorage>()\n            .interest_rate_model\n            .get(asset_id)\n        {\n            if timestamp\n                < interest_rate_model\n                    .last_adjustment_timestamp\n                    .checked_add(\n                        interest_rate_model.minimal_time_between_adjustments,\n                    )\n                    .ok_or(MathError::Overflow)?\n            {\n                return Err(LendingPoolError::TooEarlyToAdjustRate);\n            }\n\n            let twa_ur_e6 = self\n                .data::<LendingPoolStorage>()\n                .get_tw_ur_from_shortest_period_longer_than(\n                    interest_rate_model.minimal_time_between_adjustments,\n                    asset_id,\n                    guessed_index,\n                )?;\n\n            let res = interest_rate_model\n                .adjust_rate_at_target(twa_ur_e6, timestamp)?;\n\n            self.data::<LendingPoolStorage>()\n                .interest_rate_model\n                .insert(asset_id, &interest_rate_model);\n\n            Ok(res)\n        } else {\n            Err(LendingPoolError::AssetNotRegistered)\n        }\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/manage.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::dummy::DummyRef;\nuse crate::lending_pool::events::FeeReductionChanged;\nuse crate::lending_pool::SetReserveFeesArgs;\nuse crate::lending_pool::{\n    events::{\n        AssetRegistered, AssetRulesChanged, FlashLoanFeeChanged, IncomeTaken,\n        PriceFeedProviderChanged, ReserveActivated, ReserveFeesChanged,\n        ReserveFrozen, ReserveInterestRateModelChanged,\n        ReserveRestrictionsChanged, StablecoinDebtRateChanged,\n    },\n    LendingPoolError, MarketRule, ASSET_LISTING_ADMIN, EMERGENCY_ADMIN,\n    PARAMETERS_ADMIN, STABLECOIN_RATE_ADMIN, TREASURY,\n};\nuse abax_library::structs::{\n    AssetRules, InterestRateModel, InterestRateModelParams,\n    ReserveAbacusTokens, ReserveData, ReserveFees, ReserveRestrictions,\n};\nuse ink::env::DefaultEnvironment;\nuse ink::prelude::string::{String, ToString};\nuse ink::{\n    env::call::ExecutionInput,\n    prelude::vec::Vec,\n    primitives::{AccountId, Hash},\n    ToAccountId,\n};\nuse pendzl::contracts::access_control;\nuse pendzl::traits::{Balance, StorageFieldGetter};\n\nuse super::internal::InternalIncome;\nuse super::storage::LendingPoolStorage;\nuse super::Transfer;\n\npub trait LendingPoolManageImpl:\n    ManageInternal + access_control::AccessControlInternal\n{\n    fn set_price_feed_provider(\n        &mut self,\n        price_feed_provider: AccountId,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_price_feed_provider_change(&price_feed_provider);\n        ink::env::emit_event::<DefaultEnvironment, PriceFeedProviderChanged>(\n            PriceFeedProviderChanged {\n                price_feed_provider,\n            },\n        );\n        Ok(())\n    }\n    fn set_fee_reduction_provider(\n        &mut self,\n        fee_reduction_provider: AccountId,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_fee_reduction_provider_change(&fee_reduction_provider);\n        ink::env::emit_event::<DefaultEnvironment, FeeReductionChanged>(\n            FeeReductionChanged {\n                fee_reduction_provider,\n            },\n        );\n        Ok(())\n    }\n\n    fn set_flash_loan_fee_e6(\n        &mut self,\n        flash_loan_fee_e6: u128,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .flash_loan_fee_e6\n            .set(&flash_loan_fee_e6);\n        ink::env::emit_event::<DefaultEnvironment, FlashLoanFeeChanged>(\n            FlashLoanFeeChanged { flash_loan_fee_e6 },\n        );\n        Ok(())\n    }\n\n    #[allow(clippy::too_many_arguments)]\n    fn register_asset(\n        &mut self,\n        asset: AccountId,\n        a_token_code_hash: [u8; 32],\n        v_token_code_hash: [u8; 32],\n        name: String,\n        symbol: String,\n        decimals: u8,\n        asset_rules: AssetRules,\n        reserve_restrictions: ReserveRestrictions,\n        reserve_fees: SetReserveFeesArgs,\n        interest_rate_model_params: Option<InterestRateModelParams>,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(ASSET_LISTING_ADMIN, Some(caller))?;\n\n        let timestamp = Self::env().block_timestamp();\n\n        if reserve_fees.deposit_fee_e6 > 1_000_000 {\n            return Err(LendingPoolError::DepositFeeTooHigh);\n        }\n\n        let interest_rate_model = {\n            if let Some(params) = interest_rate_model_params {\n                let model = InterestRateModel::new(params, timestamp);\n                Some(model)\n            } else {\n                None\n            }\n        };\n\n        self.data::<LendingPoolStorage>()\n            .account_for_register_asset(\n                &asset,\n                &ReserveData::default(),\n                &reserve_restrictions,\n                &10_u128.pow(decimals.into()),\n                &ReserveFees::new(\n                    reserve_fees.deposit_fee_e6,\n                    reserve_fees.debt_fee_e6,\n                ),\n                &interest_rate_model,\n                &timestamp,\n            )?;\n\n        let (a_token_address, v_token_address) = (\n            self._instantiate_a_token_contract(\n                &a_token_code_hash,\n                &asset,\n                name.clone(),\n                symbol.clone(),\n                decimals,\n            ),\n            self._instantiate_v_token_contract(\n                &v_token_code_hash,\n                &asset,\n                name.clone(),\n                symbol.clone(),\n                decimals,\n            ),\n        );\n\n        self.data::<LendingPoolStorage>()\n            .account_for_set_abacus_tokens(\n                &asset,\n                &ReserveAbacusTokens::new(&a_token_address, &v_token_address),\n            )?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_asset_rule_change(&0, &asset, &asset_rules)?;\n\n        ink::env::emit_event::<DefaultEnvironment, AssetRegistered>(\n            AssetRegistered {\n                asset,\n                name,\n                symbol,\n                decimals,\n                a_token_code_hash,\n                v_token_code_hash,\n                a_token_address,\n                v_token_address,\n            },\n        );\n\n        ink::env::debug_println!(\"register asset:\");\n        if let Some(params) = interest_rate_model_params {\n            ink::env::debug_println!(\"InterestRateModelParams: {:?}\", params);\n            ink::env::emit_event::<\n                DefaultEnvironment,\n                ReserveInterestRateModelChanged,\n            >(ReserveInterestRateModelChanged {\n                asset,\n                interest_rate_model_params: params,\n            });\n        };\n\n        ink::env::emit_event::<DefaultEnvironment, ReserveRestrictionsChanged>(\n            ReserveRestrictionsChanged {\n                asset,\n                reserve_restrictions,\n            },\n        );\n\n        ink::env::emit_event::<DefaultEnvironment, AssetRulesChanged>(\n            AssetRulesChanged {\n                market_rule_id: 0,\n                asset,\n                collateral_coefficient_e6: asset_rules\n                    .collateral_coefficient_e6,\n                borrow_coefficient_e6: asset_rules.borrow_coefficient_e6,\n                penalty_e6: asset_rules.penalty_e6,\n            },\n        );\n\n        ink::env::emit_event::<DefaultEnvironment, ReserveFeesChanged>(\n            ReserveFeesChanged {\n                asset,\n                reserve_fees,\n            },\n        );\n        Ok(())\n    }\n    fn set_reserve_is_active(\n        &mut self,\n        asset: AccountId,\n        active: bool,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(EMERGENCY_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_changing_activity(&asset, active)?;\n\n        ink::env::emit_event::<DefaultEnvironment, ReserveActivated>(\n            ReserveActivated { asset, active },\n        );\n\n        Ok(())\n    }\n\n    fn set_reserve_is_frozen(\n        &mut self,\n        asset: AccountId,\n        new_is_frozen: bool,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(EMERGENCY_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_changing_is_frozen(&asset, new_is_frozen)?;\n        ink::env::emit_event::<DefaultEnvironment, ReserveFrozen>(\n            ReserveFrozen {\n                asset,\n                frozen: new_is_frozen,\n            },\n        );\n        Ok(())\n    }\n\n    fn set_reserve_restrictions(\n        &mut self,\n        asset: AccountId,\n        reserve_restrictions: ReserveRestrictions,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_reserve_restricitions_change(\n                &asset,\n                &reserve_restrictions,\n            )?;\n\n        ink::env::emit_event::<DefaultEnvironment, ReserveRestrictionsChanged>(\n            ReserveRestrictionsChanged {\n                asset,\n                reserve_restrictions,\n            },\n        );\n\n        Ok(())\n    }\n\n    fn set_interest_rate_model(\n        &mut self,\n        asset: AccountId,\n        interest_rate_model_params: InterestRateModelParams,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        let timestamp = Self::env().block_timestamp();\n\n        let interest_rate_model =\n            InterestRateModel::new(interest_rate_model_params, timestamp);\n\n        self.data::<LendingPoolStorage>()\n            .account_for_interest_rate_model_change(\n                &asset,\n                &interest_rate_model,\n                &timestamp,\n            )?;\n\n        ink::env::emit_event::<\n            DefaultEnvironment,\n            ReserveInterestRateModelChanged,\n        >(ReserveInterestRateModelChanged {\n            asset,\n            interest_rate_model_params,\n        });\n        Ok(())\n    }\n\n    fn set_reserve_fees(\n        &mut self,\n        asset: AccountId,\n        reserve_fees: SetReserveFeesArgs,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        if reserve_fees.deposit_fee_e6 > 1_000_000 {\n            return Err(LendingPoolError::DepositFeeTooHigh);\n        }\n\n        self.data::<LendingPoolStorage>()\n            .account_for_reserve_fees_change(\n                &asset,\n                &ReserveFees::new(\n                    reserve_fees.deposit_fee_e6,\n                    reserve_fees.debt_fee_e6,\n                ),\n            )?;\n        ink::env::emit_event::<DefaultEnvironment, ReserveFeesChanged>(\n            ReserveFeesChanged {\n                asset,\n                reserve_fees,\n            },\n        );\n        Ok(())\n    }\n\n    fn set_stablecoin_debt_rate_e18(\n        &mut self,\n        asset: AccountId,\n        debt_rate_e18: u64,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(STABLECOIN_RATE_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_stablecoin_debt_rate_e18_change(\n                &asset,\n                &debt_rate_e18,\n            )?;\n        ink::env::emit_event::<DefaultEnvironment, StablecoinDebtRateChanged>(\n            StablecoinDebtRateChanged {\n                asset,\n                debt_rate_e18,\n            },\n        );\n\n        Ok(())\n    }\n\n    fn add_market_rule(\n        &mut self,\n        market_rule: MarketRule,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        for asset_rule in market_rule.iter().flatten() {\n            asset_rule.validate_new_rule(&None)?;\n        }\n\n        let market_rule_id = self\n            .data::<LendingPoolStorage>()\n            .account_for_add_market_rule(&market_rule);\n\n        let registerd_assets = self\n            .data::<LendingPoolStorage>()\n            .get_all_registered_assets();\n\n        for asset_id in 0..market_rule.len() {\n            if let Some(asset_rules) = market_rule[asset_id] {\n                ink::env::emit_event::<DefaultEnvironment, AssetRulesChanged>(\n                    AssetRulesChanged {\n                        market_rule_id,\n                        asset: registerd_assets[asset_id],\n                        collateral_coefficient_e6: asset_rules\n                            .collateral_coefficient_e6,\n                        borrow_coefficient_e6: asset_rules\n                            .borrow_coefficient_e6,\n                        penalty_e6: asset_rules.penalty_e6,\n                    },\n                );\n            }\n        }\n\n        Ok(())\n    }\n\n    fn modify_asset_rule(\n        &mut self,\n        market_rule_id: u32,\n        asset: AccountId,\n        asset_rules: AssetRules,\n    ) -> Result<(), LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n        self.data::<LendingPoolStorage>()\n            .account_for_asset_rule_change(\n                &market_rule_id,\n                &asset,\n                &asset_rules,\n            )?;\n\n        ink::env::emit_event::<DefaultEnvironment, AssetRulesChanged>(\n            AssetRulesChanged {\n                market_rule_id,\n                asset,\n                collateral_coefficient_e6: asset_rules\n                    .collateral_coefficient_e6,\n                borrow_coefficient_e6: asset_rules.borrow_coefficient_e6,\n                penalty_e6: asset_rules.penalty_e6,\n            },\n        );\n\n        Ok(())\n    }\n\n    fn take_protocol_income(\n        &mut self,\n        assets: Option<Vec<AccountId>>,\n        to: AccountId,\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError> {\n        let caller = Self::env().caller();\n        self._ensure_has_role(TREASURY, Some(caller))?;\n\n        let assets_and_amounts = match assets {\n            Some(assets_vec) => self._take_protocol_income(&assets_vec)?,\n            None => {\n                let registered_assets = self\n                    .data::<LendingPoolStorage>()\n                    .get_all_registered_assets();\n                self._take_protocol_income(&registered_assets)?\n            }\n        };\n\n        for asset_and_amount in\n            assets_and_amounts.iter().take_while(|x| x.1 > 0)\n        {\n            self._transfer_out(&asset_and_amount.0, &to, &asset_and_amount.1)?;\n            ink::env::emit_event::<DefaultEnvironment, IncomeTaken>(\n                IncomeTaken {\n                    asset: asset_and_amount.0,\n                },\n            );\n        }\n\n        Ok(assets_and_amounts)\n    }\n}\n\npub trait ManageInternal: StorageFieldGetter<LendingPoolStorage> {\n    fn _instantiate_a_token_contract(\n        &self,\n        a_token_code_hash: &[u8; 32],\n        underlying_asset: &AccountId,\n        name: String,\n        symbol: String,\n        decimals: u8,\n    ) -> AccountId {\n        let lending_pool: AccountId = Self::env().account_id();\n\n        let mut token_name = \"Abax Deposit \".to_string();\n        token_name.push_str(&name);\n\n        let mut token_symbol = \"a\".to_string();\n        token_symbol.push_str(&symbol);\n\n        self._instantiate_abacus_token(\n            a_token_code_hash,\n            &lending_pool,\n            underlying_asset,\n            token_name,\n            token_symbol,\n            decimals,\n        )\n    }\n\n    fn _instantiate_v_token_contract(\n        &self,\n        v_token_code_hash: &[u8; 32],\n        underlying_asset: &AccountId,\n        name: String,\n        symbol: String,\n        decimals: u8,\n    ) -> AccountId {\n        let lending_pool: AccountId = Self::env().account_id();\n\n        let mut token_name = \"Abax Variable Debt \".to_string();\n        token_name.push_str(&name);\n\n        let mut token_symbol = \"v\".to_string();\n        token_symbol.push_str(&symbol);\n\n        self._instantiate_abacus_token(\n            v_token_code_hash,\n            &lending_pool,\n            underlying_asset,\n            token_name,\n            token_symbol,\n            decimals,\n        )\n    }\n\n    fn _instantiate_abacus_token(\n        &self,\n        abacus_token_code_hash: &[u8; 32],\n        lending_pool: &AccountId,\n        underlying_asset: &AccountId,\n        name: String,\n        symbol: String,\n        decimals: u8,\n    ) -> AccountId {\n        let create_params = ink::env::call::build_create::<DummyRef>()\n            .instantiate_v1()\n            .code_hash(Hash::from(*abacus_token_code_hash))\n            .gas_limit(10_000_000_000)\n            .endowment(0)\n            .exec_input(\n                ExecutionInput::new(ink::env::call::Selector::new(\n                    ink::selector_bytes!(\"new\"),\n                ))\n                .push_arg(name)\n                .push_arg(symbol)\n                .push_arg(decimals)\n                .push_arg(*lending_pool)\n                .push_arg(*underlying_asset),\n            )\n            .salt_bytes(underlying_asset)\n            .returns::<DummyRef>()\n            .params();\n        let contract = Self::env()\n            .instantiate_contract_v1(&create_params)\n            .unwrap_or_else(|error| {\n                panic!(\"Contract pallet error: {:?}\", error)\n            })\n            .unwrap_or_else(|error| panic!(\"LangError: {:?}\", error));\n        contract.to_account_id()\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod a_token_interface;\nmod borrow;\nmod deposit;\nmod flash;\nmod internal;\nmod liquidate;\nmod maintain;\nmod manage;\nmod multi_op;\nmod storage;\nmod v_token_interface;\nmod view;\n\npub use a_token_interface::*;\npub use borrow::*;\npub use deposit::*;\npub use flash::*;\npub use internal::*;\npub use liquidate::*;\npub use maintain::*;\npub use manage::*;\npub use multi_op::*;\npub use storage::*;\npub use v_token_interface::*;\npub use view::*;\n",
        "src/contract_modules/lending_pool/implementation/multi_op.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{\n    events::{Borrow, Deposit, Repay, Withdraw},\n    LendingPoolError,\n};\nuse abax_library::structs::{Action, Operation, ReserveAbacusTokens};\nuse ink::{\n    env::DefaultEnvironment, prelude::vec::Vec, primitives::AccountId,\n    storage::Mapping,\n};\nuse pendzl::{math::errors::MathError, traits::StorageFieldGetter};\n\nuse super::{\n    internal::{\n        Transfer, _emit_abacus_token_transfer_event,\n        _emit_abacus_token_transfer_event_and_decrease_allowance,\n    },\n    storage::LendingPoolStorage,\n};\n\npub trait LendingPoolMultiOpImpl:\n    StorageFieldGetter<LendingPoolStorage> + Transfer\n{\n    fn multi_op(\n        &mut self,\n        op: Vec<Action>,\n        on_behalf_of: AccountId,\n        _data: Vec<u8>,\n    ) -> Result<(), LendingPoolError> {\n        let mut actions = op.clone();\n        let act_slice = actions.as_mut_slice();\n        let res = self\n            .data()\n            .account_for_account_actions(&on_behalf_of, act_slice)?;\n        let caller = Self::env().caller();\n\n        let mut abacus_tokens =\n            Mapping::<AccountId, ReserveAbacusTokens>::new();\n\n        for (\n            i,\n            (\n                account_accumulated_deposit_interest,\n                account_accumulated_debt_interest,\n            ),\n        ) in res.iter().enumerate()\n        {\n            let asset = actions[i].args.asset;\n            let amount = actions[i].args.amount;\n            let op = actions[i].op;\n            let abacus_tokens = abacus_tokens\n                .get(asset)\n                .or_else(|| {\n                    let present = self\n                        .data::<LendingPoolStorage>()\n                        .reserve_abacus_tokens\n                        .get(asset)\n                        .unwrap();\n                    abacus_tokens.insert(asset, &present);\n                    Some(present)\n                })\n                .unwrap();\n\n            match op {\n                Operation::Deposit => {\n                    self._transfer_in(&asset, &caller, &amount)?;\n                    // ATOKEN\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.a_token_address,\n                        &on_behalf_of,\n                        (account_accumulated_deposit_interest\n                            .checked_add(amount)\n                            .ok_or(MathError::Overflow)?)\n                            as i128,\n                    )?;\n                    // VTOKEN\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.v_token_address,\n                        &on_behalf_of,\n                        *account_accumulated_debt_interest as i128,\n                    )?;\n                    ink::env::emit_event::<DefaultEnvironment, Deposit>(\n                        Deposit {\n                            asset,\n                            caller,\n                            on_behalf_of,\n                            amount,\n                        },\n                    );\n                }\n                Operation::Withdraw => {\n                    self._transfer_out(&asset, &caller, &amount)?;\n                    // ATOKEN\n                    _emit_abacus_token_transfer_event_and_decrease_allowance(\n                        &abacus_tokens.a_token_address,\n                        &on_behalf_of,\n                        (*account_accumulated_deposit_interest as i128)\n                            .overflowing_sub(actions[0].args.amount as i128)\n                            .0,\n                        &(Self::env().caller()),\n                        actions[0].args.amount,\n                    )?;\n                    // VTOKEN\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.v_token_address,\n                        &on_behalf_of,\n                        *account_accumulated_debt_interest as i128,\n                    )?;\n\n                    ink::env::emit_event::<DefaultEnvironment, Withdraw>(\n                        Withdraw {\n                            asset,\n                            caller,\n                            on_behalf_of,\n                            amount,\n                        },\n                    );\n                }\n                Operation::Borrow => {\n                    self._transfer_out(&asset, &caller, &amount)?;\n                    // ATOKEN\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.a_token_address,\n                        &on_behalf_of,\n                        *account_accumulated_deposit_interest as i128,\n                    )?;\n                    // VTOKEN\n                    _emit_abacus_token_transfer_event_and_decrease_allowance(\n                        &abacus_tokens.v_token_address,\n                        &on_behalf_of,\n                        (account_accumulated_debt_interest\n                            .checked_add(amount)\n                            .ok_or(MathError::Overflow)?)\n                            as i128,\n                        &(caller),\n                        amount,\n                    )?;\n                    ink::env::emit_event::<DefaultEnvironment, Borrow>(\n                        Borrow {\n                            asset,\n                            caller,\n                            on_behalf_of,\n                            amount,\n                        },\n                    );\n                }\n                Operation::Repay => {\n                    self._transfer_in(&asset, &caller, &amount)?;\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.a_token_address,\n                        &on_behalf_of,\n                        *account_accumulated_deposit_interest as i128,\n                    )?;\n                    // VTOKEN\n                    _emit_abacus_token_transfer_event(\n                        &abacus_tokens.v_token_address,\n                        &on_behalf_of,\n                        (*account_accumulated_debt_interest as i128)\n                            .overflowing_sub(actions[0].args.amount as i128)\n                            .0,\n                    )?;\n\n                    ink::env::emit_event::<DefaultEnvironment, Repay>(Repay {\n                        asset,\n                        caller,\n                        on_behalf_of,\n                        amount,\n                    });\n                }\n            }\n        }\n\n        Ok(())\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/storage/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::{\n    fee_reduction::{FeeReduction, FeeReductionRef},\n    lending_pool::{DecimalMultiplier, LendingPoolError, MarketRule, RuleId},\n    price_feed::{PriceFeed, PriceFeedRef},\n};\nuse abax_library::{\n    math::{\n        calculate_amount_to_take, calculate_asset_amount_value_e8,\n        e8_mul_e6_to_e6_rdown,\n    },\n    structs::{\n        AccountConfig, AccountReserveData, Action, AssetId, AssetRules,\n        FeeReductions, InterestRateModel, Operation, ReserveAbacusTokens,\n        ReserveData, ReserveFees, ReserveIndexesAndFees, ReserveRestrictions,\n        TwEntry, TwIndex,\n    },\n};\nuse ink::codegen::TraitCallBuilder;\nuse ink::storage::Mapping;\nuse ink::{env::DefaultEnvironment, prelude::vec, prelude::vec::Vec};\nuse pendzl::{\n    math::errors::MathError,\n    traits::{AccountId, Balance, Timestamp},\n};\n\n#[derive(Debug)]\npub enum ReserveAction<'a> {\n    Deposit(u32, &'a Balance),\n    Withdraw(u32, &'a mut Balance, bool),\n    Borrow(u32, &'a Balance),\n    Repay(u32, &'a mut Balance),\n    DepositTransfer(u32, u32, &'a mut Balance, bool),\n    DebtTransfer(u32, u32, &'a mut Balance, bool),\n}\n\n#[derive(Default, Debug)]\n#[pendzl::storage_item]\npub struct LendingPoolStorage {\n    #[lazy]\n    pub price_feed_provider: AccountId,\n    #[lazy]\n    pub fee_reduction_provider: AccountId,\n\n    #[lazy]\n    pub next_asset_id: AssetId,\n    pub asset_to_id: Mapping<AccountId, AssetId>,\n    pub id_to_asset: Mapping<AssetId, AccountId>,\n\n    #[lazy]\n    pub next_rule_id: RuleId,\n    pub market_rules: Mapping<RuleId, MarketRule>,\n\n    pub reserve_abacus_tokens: Mapping<AccountId, ReserveAbacusTokens>,\n\n    pub reserve_restrictions: Mapping<AssetId, ReserveRestrictions>,\n    pub reserve_indexes_and_fees: Mapping<AssetId, ReserveIndexesAndFees>,\n    pub reserve_decimal_multiplier: Mapping<AssetId, DecimalMultiplier>,\n    pub reserve_datas: Mapping<AssetId, ReserveData>,\n\n    pub tw_ur_indexes: Mapping<AssetId, TwIndex>,\n    pub tw_ur_entries: Mapping<(AssetId, u32), TwEntry>,\n    pub interest_rate_model: Mapping<AssetId, InterestRateModel>,\n\n    /// The AccountReserveData is stored in a vector, where the index is coresponding to the asset_id.\n    #[allow(clippy::type_complexity)]\n    pub account_reserve_datas:\n        Mapping<AccountId, Vec<Option<AccountReserveData>>>,\n    pub account_configs: Mapping<AccountId, AccountConfig>,\n\n    #[lazy]\n    /// fee that must be paid while taking flash loan. 10^6 = 100%.\n    pub flash_loan_fee_e6: u128,\n}\n\n/// Holds references to reserve related data used during accounting for actions.\nstruct ReserveDataContext<'a> {\n    asset_id: u32,\n    reserve_data: &'a mut ReserveData,\n    reserve_indexes_and_fees: &'a mut ReserveIndexesAndFees,\n    reserve_restrictions: &'a ReserveRestrictions,\n}\n\n/// Used to accumulate interests for each account.\nstruct InterestsAcc {\n    items: Vec<(u128, u128)>,\n}\n\nimpl InterestsAcc {\n    pub fn new(len: usize) -> Self {\n        Self {\n            items: vec![(0, 0); len],\n        }\n    }\n    pub fn update_at(\n        &mut self,\n        index: u32,\n        interests: (u128, u128),\n    ) -> Result<(), MathError> {\n        let to_modify = self.items.get_mut(index as usize).unwrap();\n        to_modify.0 = to_modify\n            .0\n            .checked_add(interests.0)\n            .ok_or(MathError::Overflow)?;\n        to_modify.1 = to_modify\n            .1\n            .checked_add(interests.1)\n            .ok_or(MathError::Overflow)?;\n        Ok(())\n    }\n}\n\nimpl LendingPoolStorage {\n    /*\n    LENDING SECTION - methods responsible for accounting for depositing, withdrawing, borrowing, repaying, liquidating, transferring deposits and debts.\n    */\n\n    /// acccount for list of action for one account\n    ///\n    /// # Note\n    /// - This function could be improved to gather acction for the same asset - however many actions on the same asset are rare\n    pub fn account_for_account_actions(\n        &mut self,\n        account: &AccountId,\n        actions: &mut [Action],\n    ) -> Result<Vec<(u128, u128)>, LendingPoolError> {\n        let mut account_datas = self.get_account_datas(account);\n        let mut account_config = self.get_account_config(account);\n        let fee_reductions = self.get_fee_reductions_of_account(account);\n\n        let timestamp = ink::env::block_timestamp::<DefaultEnvironment>();\n\n        let mut results: Vec<(u128, u128)> = Vec::new();\n\n        let mut must_check_collateralization = false;\n\n        for action in actions.iter_mut() {\n            let asset_id = self.asset_id(&action.args.asset)?;\n            let account_data =\n                get_account_data_entry_mut(&mut account_datas, asset_id);\n\n            match action.op {\n                Operation::Deposit => {\n                    let res = self.account_for_reserve_action(\n                        asset_id,\n                        &mut [account_data],\n                        &mut [&mut account_config],\n                        &[&fee_reductions],\n                        &mut [&mut ReserveAction::Deposit(\n                            0,\n                            &action.args.amount,\n                        )],\n                        &timestamp,\n                    )?;\n                    results.push(*res.first().unwrap());\n                }\n                Operation::Withdraw => {\n                    if (account_config.collaterals >> asset_id) & 1 == 1 {\n                        must_check_collateralization = true;\n                    }\n                    let res = self.account_for_reserve_action(\n                        asset_id,\n                        &mut [account_data],\n                        &mut [&mut account_config],\n                        &[&fee_reductions],\n                        &mut [&mut ReserveAction::Withdraw(\n                            0,\n                            &mut action.args.amount,\n                            true,\n                        )],\n                        &timestamp,\n                    )?;\n                    results.push(*res.first().unwrap());\n                }\n                Operation::Borrow => {\n                    must_check_collateralization = true;\n                    let res = self.account_for_reserve_action(\n                        asset_id,\n                        &mut [account_data],\n                        &mut [&mut account_config],\n                        &[&fee_reductions],\n                        &mut [&mut ReserveAction::Borrow(\n                            0,\n                            &action.args.amount,\n                        )],\n                        &timestamp,\n                    )?;\n                    results.push(*res.first().unwrap());\n                }\n                Operation::Repay => {\n                    let res = self.account_for_reserve_action(\n                        asset_id,\n                        &mut [account_data],\n                        &mut [&mut account_config],\n                        &[&fee_reductions],\n                        &mut [&mut ReserveAction::Repay(\n                            0,\n                            &mut action.args.amount,\n                        )],\n                        &timestamp,\n                    )?;\n                    results.push(*res.first().unwrap());\n                }\n            }\n        }\n\n        // check if there is enought collatera\n        if must_check_collateralization {\n            self.ensure_collateralized_from_raw(\n                &account_datas,\n                &account_config,\n                &fee_reductions,\n            )?;\n        }\n\n        self.account_reserve_datas.insert(account, &account_datas);\n        self.account_configs.insert(account, &account_config);\n        Ok(results)\n    }\n\n    /// accounts for one list of ReserveActions\n    ///\n    /// # Arguments\n    /// * `asset_id` - the id of the asset that the actions are acting on.\n    /// * `accounts_data` - a list of different accounts' data coresponding to the asset_id.\n    /// * `accounts_config` - a list of different accounts' config coresponding to the asset_id, the order (coresponding to accounts) must be the same as in accounts_data\n    /// * `actions` - a list of actions that are to be accounted for.\n    ///\n    /// # Note\n    /// - This function does not check collateralization! - it must be done after calling this function on each account that colllateral or debt was changed.\n    fn account_for_reserve_action(\n        &mut self,\n        asset_id: AssetId,\n        accounts_data: &mut [&mut AccountReserveData],\n        accounts_config: &mut [&mut AccountConfig],\n        accounts_fee_reductions: &[&FeeReductions],\n        actions: &mut [&mut ReserveAction<'_>],\n        timestamp: &Timestamp,\n    ) -> Result<Vec<(u128, u128)>, LendingPoolError> {\n        if accounts_data.len() != accounts_config.len() {\n            return Err(LendingPoolError::VectorsInconsistentLengths);\n        }\n\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        let reserve_restrictions = self.get_reserve_restrictions(asset_id);\n\n        self.store_utilization_rate_snapshot(\n            asset_id,\n            &reserve_data,\n            timestamp,\n        )?;\n\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n\n        let mut interests_acc = InterestsAcc::new(accounts_data.len());\n\n        let mut reserve_ctx = ReserveDataContext {\n            asset_id,\n            reserve_data: &mut reserve_data,\n            reserve_indexes_and_fees: &mut reserve_indexes_and_fees,\n            reserve_restrictions: &reserve_restrictions,\n        };\n\n        for action in actions.iter_mut() {\n            match action {\n                ReserveAction::Deposit(account_id, amount) => {\n                    let interest_res = self.account_for_deposit(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*account_id as usize).unwrap(),\n                        accounts_config.get_mut(*account_id as usize).unwrap(),\n                        accounts_fee_reductions\n                            .get(*account_id as usize)\n                            .unwrap(),\n                        amount,\n                    )?;\n                    interests_acc.update_at(*account_id, interest_res)?;\n                }\n                ReserveAction::Withdraw(\n                    account_id,\n                    amount,\n                    can_mutate_amount,\n                ) => {\n                    let interest_res = self.account_for_withdraw(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*account_id as usize).unwrap(),\n                        accounts_config.get_mut(*account_id as usize).unwrap(),\n                        accounts_fee_reductions\n                            .get(*account_id as usize)\n                            .unwrap(),\n                        amount,\n                        *can_mutate_amount,\n                    )?;\n                    interests_acc.update_at(*account_id, interest_res)?;\n                }\n                ReserveAction::Borrow(account_id, amount) => {\n                    let interest_res = self.account_for_borrow(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*account_id as usize).unwrap(),\n                        accounts_config.get_mut(*account_id as usize).unwrap(),\n                        accounts_fee_reductions\n                            .get(*account_id as usize)\n                            .unwrap(),\n                        amount,\n                    )?;\n                    interests_acc.update_at(*account_id, interest_res)?;\n                }\n                ReserveAction::Repay(account_id, amount) => {\n                    let interest_res = self.account_for_repay(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*account_id as usize).unwrap(),\n                        accounts_config.get_mut(*account_id as usize).unwrap(),\n                        accounts_fee_reductions\n                            .get(*account_id as usize)\n                            .unwrap(),\n                        amount,\n                        true,\n                    )?;\n                    interests_acc.update_at(*account_id, interest_res)?;\n                }\n\n                ReserveAction::DepositTransfer(\n                    from_id,\n                    to_id,\n                    amount,\n                    mutable,\n                ) => {\n                    let from_interest_res = self.account_for_withdraw(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*from_id as usize).unwrap(),\n                        accounts_config.get_mut(*from_id as usize).unwrap(),\n                        accounts_fee_reductions.get(*from_id as usize).unwrap(),\n                        amount,\n                        *mutable,\n                    )?;\n\n                    interests_acc.update_at(*from_id, from_interest_res)?;\n\n                    let to_interest_res = self.account_for_deposit(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*to_id as usize).unwrap(),\n                        accounts_config.get_mut(*to_id as usize).unwrap(),\n                        accounts_fee_reductions.get(*to_id as usize).unwrap(),\n                        amount,\n                    )?;\n                    interests_acc.update_at(*to_id, to_interest_res)?;\n                }\n                ReserveAction::DebtTransfer(\n                    from_id,\n                    to_id,\n                    amount,\n                    mutable,\n                ) => {\n                    let from_interest_res = self.account_for_repay(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*from_id as usize).unwrap(),\n                        accounts_config.get_mut(*from_id as usize).unwrap(),\n                        accounts_fee_reductions.get(*from_id as usize).unwrap(),\n                        amount,\n                        *mutable,\n                    )?;\n                    interests_acc.update_at(*from_id, from_interest_res)?;\n\n                    let to_interest_res = self.account_for_borrow(\n                        &mut reserve_ctx,\n                        accounts_data.get_mut(*to_id as usize).unwrap(),\n                        accounts_config.get_mut(*to_id as usize).unwrap(),\n                        accounts_fee_reductions.get(*to_id as usize).unwrap(),\n                        amount,\n                    )?;\n                    interests_acc.update_at(*to_id, to_interest_res)?;\n                }\n            }\n        }\n\n        if let Some(params) = self.interest_rate_model.get(asset_id) {\n            reserve_data.recalculate_current_rates(&params)?\n        }\n\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        self.reserve_indexes_and_fees\n            .insert(asset_id, &reserve_indexes_and_fees);\n\n        Ok(interests_acc.items)\n    }\n\n    fn account_for_deposit(\n        &mut self,\n        reserve_ctx: &mut ReserveDataContext,\n        account_reserve_data: &mut AccountReserveData,\n        account_config: &mut AccountConfig,\n        fee_reductions: &FeeReductions,\n        amount: &Balance,\n    ) -> Result<(u128, u128), LendingPoolError> {\n        reserve_ctx.reserve_data.ensure_activated()?;\n        reserve_ctx.reserve_data.ensure_not_frozen()?;\n\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ): (Balance, Balance) = reserve_ctx.reserve_data.add_interests(\n            account_reserve_data.accumulate_account_interest(\n                &reserve_ctx.reserve_indexes_and_fees.indexes,\n                &mut reserve_ctx.reserve_indexes_and_fees.fees,\n                fee_reductions,\n            )?,\n        )?;\n        account_reserve_data.increase_account_deposit(\n            &reserve_ctx.asset_id,\n            account_config,\n            reserve_ctx.reserve_data,\n            amount,\n        )?;\n\n        reserve_ctx\n            .reserve_restrictions\n            .ensure_max_total_deposit_not_reached(reserve_ctx.reserve_data)?;\n\n        Ok((\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ))\n    }\n\n    fn account_for_withdraw(\n        &mut self,\n        reserve_ctx: &mut ReserveDataContext,\n        account_reserve_data: &mut AccountReserveData,\n        account_config: &mut AccountConfig,\n        fee_reductions: &FeeReductions,\n        amount: &mut Balance,\n        can_mutate_amount: bool,\n    ) -> Result<(u128, u128), LendingPoolError> {\n        reserve_ctx.reserve_data.ensure_activated()?;\n\n        if account_reserve_data.deposit == 0 {\n            return Err(LendingPoolError::InsufficientDeposit);\n        }\n\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ): (Balance, Balance) = reserve_ctx.reserve_data.add_interests(\n            account_reserve_data.accumulate_account_interest(\n                &reserve_ctx.reserve_indexes_and_fees.indexes,\n                &mut reserve_ctx.reserve_indexes_and_fees.fees,\n                fee_reductions,\n            )?,\n        )?;\n\n        if *amount > account_reserve_data.deposit && can_mutate_amount {\n            *amount = account_reserve_data.deposit;\n            // else the decrease_account_deposit will fail\n        }\n\n        account_reserve_data.decrease_account_deposit(\n            &reserve_ctx.asset_id,\n            account_config,\n            reserve_ctx.reserve_data,\n            reserve_ctx.reserve_restrictions,\n            amount,\n        )?;\n\n        Ok((\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ))\n    }\n\n    fn account_for_borrow(\n        &mut self,\n        reserve_ctx: &mut ReserveDataContext,\n        account_reserve_data: &mut AccountReserveData,\n        account_config: &mut AccountConfig,\n        fee_reductions: &FeeReductions,\n        amount: &Balance,\n    ) -> Result<(u128, u128), LendingPoolError> {\n        reserve_ctx.reserve_data.ensure_activated()?;\n        reserve_ctx.reserve_data.ensure_not_frozen()?;\n\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ): (Balance, Balance) = reserve_ctx.reserve_data.add_interests(\n            account_reserve_data.accumulate_account_interest(\n                &reserve_ctx.reserve_indexes_and_fees.indexes,\n                &mut reserve_ctx.reserve_indexes_and_fees.fees,\n                fee_reductions,\n            )?,\n        )?;\n        account_reserve_data.increase_account_debt(\n            &reserve_ctx.asset_id,\n            account_config,\n            reserve_ctx.reserve_data,\n            amount,\n        )?;\n\n        reserve_ctx\n            .reserve_restrictions\n            .ensure_debt_exceeds_minimum(account_reserve_data)?;\n        reserve_ctx\n            .reserve_restrictions\n            .ensure_max_total_debt_not_reached(reserve_ctx.reserve_data)?;\n\n        Ok((\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ))\n    }\n\n    fn account_for_repay(\n        &mut self,\n        reserve_ctx: &mut ReserveDataContext,\n        account_reserve_data: &mut AccountReserveData,\n        account_config: &mut AccountConfig,\n        fee_reductions: &FeeReductions,\n        amount: &mut Balance,\n        can_mutate_amount: bool,\n    ) -> Result<(u128, u128), LendingPoolError> {\n        reserve_ctx.reserve_data.ensure_activated()?;\n\n        let (\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ): (Balance, Balance) = reserve_ctx.reserve_data.add_interests(\n            account_reserve_data.accumulate_account_interest(\n                &reserve_ctx.reserve_indexes_and_fees.indexes,\n                &mut reserve_ctx.reserve_indexes_and_fees.fees,\n                fee_reductions,\n            )?,\n        )?;\n\n        if account_reserve_data.debt == 0 {\n            return Err(LendingPoolError::NothingToRepay);\n        }\n\n        if *amount > account_reserve_data.debt && can_mutate_amount {\n            *amount = account_reserve_data.debt;\n            // else  the decrease_account_debt will fail\n        }\n\n        account_reserve_data.decrease_account_debt(\n            &reserve_ctx.asset_id,\n            account_config,\n            reserve_ctx.reserve_data,\n            amount,\n        )?;\n        reserve_ctx\n            .reserve_restrictions\n            .ensure_debt_exceeds_minimum(account_reserve_data)?;\n\n        Ok((\n            account_accumulated_deposit_interest,\n            account_accumulated_debt_interest,\n        ))\n    }\n\n    #[allow(clippy::too_many_arguments)]\n    #[allow(clippy::type_complexity)]\n    pub fn account_for_liquidate(\n        &mut self,\n        caller: &AccountId,\n        liquidated_account: &AccountId,\n        asset_to_repay: &AccountId,\n        asset_to_take: &AccountId,\n        amount_to_repay: &mut Balance,\n        timestamp: &Timestamp,\n    ) -> Result<\n        (u128, (u128, u128), (u128, u128), (u128, u128)),\n        LendingPoolError,\n    > {\n        let asset_to_repay_id = self.asset_id(asset_to_repay)?;\n        let asset_to_take_id = self.asset_id(asset_to_take)?;\n\n        let mut liquidated_account_datas =\n            self.get_account_datas(liquidated_account);\n        let mut caller_account_datas = self.get_account_datas(caller);\n        let mut liquidated_account_config =\n            self.get_account_config(liquidated_account);\n        let mut caller_config = self.get_account_config(caller);\n        let liquidated_account_fee_reductions =\n            self.get_fee_reductions_of_account(liquidated_account);\n        let caller_fee_reductions = self.get_fee_reductions_of_account(caller);\n\n        let liquidated_account_data_to_repay = liquidated_account_datas\n            .get_mut(asset_to_repay_id as usize)\n            .unwrap()\n            .as_mut()\n            .ok_or(LendingPoolError::NothingToRepay)?;\n\n        if liquidated_account_data_to_repay.debt == 0 {\n            return Err(LendingPoolError::NothingToRepay);\n        }\n\n        let res = self.account_for_reserve_action(\n            asset_to_repay_id,\n            &mut [liquidated_account_data_to_repay],\n            &mut [&mut liquidated_account_config],\n            &[&liquidated_account_fee_reductions],\n            &mut [&mut ReserveAction::Repay(0, amount_to_repay)],\n            timestamp,\n        )?;\n        let (\n            liquidated_account_accumulated_deposit_interest_to_repay,\n            liquidated_account_accumulated_debt_interest_to_repay,\n        ) = res.first().unwrap();\n\n        let prices_e18 = self.get_assets_prices_e18()?;\n        let mut amount_to_take = self\n            .calculate_liquidated_amount_and_ensure_collateralized(\n                liquidated_account,\n                asset_to_repay_id,\n                asset_to_take_id,\n                &prices_e18[asset_to_repay_id as usize],\n                &prices_e18[asset_to_take_id as usize],\n                amount_to_repay,\n            )?;\n\n        let liquidated_account_data_to_take = liquidated_account_datas\n            .get_mut(asset_to_take_id as usize)\n            .unwrap()\n            .as_mut()\n            .ok_or(LendingPoolError::NothingToCompensateWith)?;\n\n        let callers_data_to_take = get_account_data_entry_mut(\n            &mut caller_account_datas,\n            asset_to_take_id,\n        );\n\n        let res = self.account_for_reserve_action(\n            asset_to_take_id,\n            &mut [liquidated_account_data_to_take, callers_data_to_take],\n            &mut [&mut liquidated_account_config, &mut caller_config],\n            &[&liquidated_account_fee_reductions, &caller_fee_reductions],\n            &mut [&mut ReserveAction::DepositTransfer(\n                0,\n                1,\n                &mut amount_to_take,\n                true,\n            )],\n            timestamp,\n        )?;\n\n        self.account_configs\n            .insert(liquidated_account, &liquidated_account_config);\n        self.account_reserve_datas\n            .insert(liquidated_account, &liquidated_account_datas);\n\n        self.account_configs.insert(caller, &caller_config);\n        self.account_reserve_datas\n            .insert(caller, &caller_account_datas);\n\n        Ok((\n            amount_to_take,\n            (\n                *liquidated_account_accumulated_deposit_interest_to_repay,\n                *liquidated_account_accumulated_debt_interest_to_repay,\n            ),\n            *res.first().unwrap(),\n            *res.get(1).unwrap(),\n        ))\n    }\n\n    #[allow(clippy::type_complexity)]\n    pub fn account_for_deposit_transfer_from_to(\n        &mut self,\n        asset: &AccountId,\n        from: &AccountId,\n        to: &AccountId,\n        amount: &Balance,\n        timestamp: &Timestamp,\n    ) -> Result<((Balance, Balance), (Balance, Balance)), LendingPoolError>\n    {\n        let asset_id = self.asset_id(asset)?;\n        let mut from_config = self\n            .account_configs\n            .get(from)\n            .ok_or(LendingPoolError::InsufficientDeposit)?;\n        let mut from_datas = self\n            .account_reserve_datas\n            .get(from)\n            .ok_or(LendingPoolError::InsufficientDeposit)?;\n        let mut to_config = self.get_account_config(to);\n        let (mut to_account_reserve_data, to_account_datas) =\n            self.get_account_reserve_data(asset_id, to);\n        let from_fee_reductions = self.get_fee_reductions_of_account(from);\n        let to_fee_reductions = self.get_fee_reductions_of_account(to);\n        let result;\n        {\n            let mut from_account_reserve_data = from_datas\n                .get_mut(asset_id as usize)\n                .unwrap()\n                .as_mut()\n                .ok_or(LendingPoolError::InsufficientDeposit)?;\n\n            let mut amount_tmp = *amount;\n            result = self.account_for_reserve_action(\n                asset_id,\n                &mut [\n                    &mut from_account_reserve_data,\n                    &mut to_account_reserve_data,\n                ],\n                &mut [&mut from_config, &mut to_config],\n                &[&from_fee_reductions, &to_fee_reductions],\n                &mut [&mut ReserveAction::DepositTransfer(\n                    0,\n                    1,\n                    &mut amount_tmp,\n                    false,\n                )],\n                timestamp,\n            )?;\n        }\n\n        if from_config.collaterals & (1 << asset_id) == 1 {\n            self.ensure_collateralized_from_raw(\n                &from_datas,\n                &from_config,\n                &self.get_fee_reductions_of_account(from),\n            )?;\n        }\n\n        self.insert_account_data(\n            to_account_datas,\n            asset_id,\n            to_account_reserve_data,\n            to,\n        );\n        self.account_reserve_datas.insert(from, &from_datas);\n        self.account_configs.insert(from, &from_config);\n        self.account_configs.insert(to, &to_config);\n        Ok((*result.first().unwrap(), *result.get(1).unwrap()))\n    }\n\n    #[allow(clippy::type_complexity)]\n    pub fn account_for_debt_transfer_from_to(\n        &mut self,\n        asset: &AccountId,\n        from: &AccountId,\n        to: &AccountId,\n        amount: &Balance,\n        timestamp: &Timestamp,\n    ) -> Result<((Balance, Balance), (Balance, Balance)), LendingPoolError>\n    {\n        let asset_id = self.asset_id(asset)?;\n        let mut from_config =\n            self.account_configs.get(from).unwrap_or_default();\n        let (mut from_account_data, from_account_datas) =\n            self.get_account_reserve_data(asset_id, from);\n        let mut to_config = self\n            .account_configs\n            .get(to)\n            .ok_or(LendingPoolError::InsufficientCollateral)?;\n        let mut to_datas = self\n            .account_reserve_datas\n            .get(to)\n            .ok_or(LendingPoolError::InsufficientCollateral)?;\n        let from_fee_reductions = self.get_fee_reductions_of_account(from);\n        let to_fee_reductions = self.get_fee_reductions_of_account(to);\n\n        let result;\n        {\n            let mut to_account_reserve_data =\n                get_account_data_entry_mut(&mut to_datas, asset_id);\n\n            let mut amount_tmp = *amount;\n            result = self.account_for_reserve_action(\n                asset_id,\n                &mut [&mut from_account_data, &mut to_account_reserve_data],\n                &mut [&mut from_config, &mut to_config],\n                &[&from_fee_reductions, &to_fee_reductions],\n                &mut [&mut ReserveAction::DebtTransfer(\n                    0,\n                    1,\n                    &mut amount_tmp,\n                    false,\n                )],\n                timestamp,\n            )?;\n        }\n        self.ensure_collateralized_from_raw(\n            &to_datas,\n            &to_config,\n            &self.get_fee_reductions_of_account(to),\n        )?;\n\n        self.insert_account_data(\n            from_account_datas,\n            asset_id,\n            from_account_data,\n            from,\n        );\n        self.account_reserve_datas.insert(to, &to_datas);\n        self.account_configs.insert(to, &to_config);\n        self.account_configs.insert(from, &from_config);\n        Ok((*result.first().unwrap(), *result.get(1).unwrap()))\n    }\n\n    pub fn account_for_set_as_collateral(\n        &mut self,\n        account: &AccountId,\n        asset: &AccountId,\n        use_as_collateral_to_set: bool,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n\n        let (account_reserve_data, _) =\n            self.get_account_reserve_data(asset_id, account);\n        let mut account_config = self.get_account_config(account);\n        let reserve_restrictions = self.get_reserve_restrictions(asset_id);\n        let market_rule = self.get_market_rule(&account_config);\n\n        let collateral_coefficient_e6 = market_rule\n            .get(asset_id as usize)\n            .ok_or(LendingPoolError::RuleCollateralDisable)?\n            .ok_or(LendingPoolError::RuleCollateralDisable)?\n            .collateral_coefficient_e6\n            .unwrap_or_default();\n\n        if use_as_collateral_to_set && collateral_coefficient_e6 == 0 {\n            return Err(LendingPoolError::RuleCollateralDisable);\n        }\n\n        if use_as_collateral_to_set {\n            reserve_restrictions\n                .ensure_collateral_exceeds_minimum(&account_reserve_data)?\n        };\n\n        if use_as_collateral_to_set {\n            account_config.collaterals |= 1_u128 << asset_id;\n        } else {\n            account_config.collaterals &= !(1_u128 << asset_id);\n        }\n\n        self.account_configs.insert(account, &account_config);\n\n        Ok(())\n    }\n\n    pub fn account_for_accumulate_interest(\n        &mut self,\n        asset: &AccountId,\n        timestamp: &Timestamp,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        let interest_rate_model = self.interest_rate_model.get(asset_id);\n\n        self.store_utilization_rate_snapshot(\n            asset_id,\n            &reserve_data,\n            timestamp,\n        )?;\n\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n        if let Some(params) = interest_rate_model {\n            reserve_data.recalculate_current_rates(&params)?\n        }\n\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        self.reserve_indexes_and_fees\n            .insert(asset_id, &reserve_indexes_and_fees);\n\n        Ok(())\n    }\n    /*\n    CALCUALTION SECTION - calculating and checking lending power, liquidation calculations.\n    */\n\n    pub fn calculate_lending_power_e6(\n        &self,\n        account_reserve_datas: &[Option<AccountReserveData>],\n        account_config: &AccountConfig,\n        fee_reductions: &FeeReductions,\n        prices_e18: &[u128],\n    ) -> Result<(bool, u128), LendingPoolError> {\n        let mut total_collateral_power_e6: u128 = 0;\n        let mut total_debt_power_e6: u128 = 0;\n\n        let market_rule = self.get_market_rule(account_config);\n\n        let collaterals = account_config.deposits & account_config.collaterals;\n        let debts = account_config.borrows;\n        let active_account_assets = collaterals | debts;\n\n        let next_asset_id = self.next_asset_id.get().unwrap_or(0);\n\n        for asset_id in 0..next_asset_id {\n            if (active_account_assets >> asset_id) == 0 {\n                break;\n            }\n            if ((active_account_assets >> asset_id) & 1) == 0 {\n                continue;\n            }\n\n            let mut account_reserve_data =\n                match account_reserve_datas[asset_id as usize] {\n                    Some(data) => data,\n                    None => continue,\n                };\n\n            // Reserve indexes are not updated\n            let mut reserve_indexes_and_fees =\n                self.get_reserve_indexes_and_fees(asset_id);\n\n            account_reserve_data.accumulate_account_interest(\n                &reserve_indexes_and_fees.indexes,\n                &mut reserve_indexes_and_fees.fees,\n                fee_reductions,\n            )?;\n\n            if ((collaterals >> asset_id) & 1) == 1 {\n                let collateral_value_e8 = calculate_asset_amount_value_e8(\n                    &account_reserve_data.deposit,\n                    &prices_e18[asset_id as usize],\n                    &self.get_decimal_multiplier(asset_id),\n                );\n\n                let collateral_coefficient_e6 = market_rule\n                    .get(asset_id as usize)\n                    .ok_or(LendingPoolError::RuleCollateralDisable)?\n                    .ok_or(LendingPoolError::RuleCollateralDisable)?\n                    .collateral_coefficient_e6\n                    .ok_or(LendingPoolError::RuleCollateralDisable)?;\n\n                total_collateral_power_e6 = total_collateral_power_e6\n                    .checked_add(e8_mul_e6_to_e6_rdown(\n                        collateral_value_e8,\n                        collateral_coefficient_e6,\n                    )?)\n                    .ok_or(MathError::Overflow)?;\n            }\n\n            if ((debts >> asset_id) & 1) == 1 {\n                let debt_value_e8 = calculate_asset_amount_value_e8(\n                    &account_reserve_data.debt,\n                    &prices_e18[asset_id as usize],\n                    &self.get_decimal_multiplier(asset_id),\n                );\n\n                let debt_coefficient_e6 = market_rule\n                    .get(asset_id as usize)\n                    .ok_or(LendingPoolError::RuleBorrowDisable)?\n                    .ok_or(LendingPoolError::RuleBorrowDisable)?\n                    .borrow_coefficient_e6\n                    .ok_or(LendingPoolError::RuleBorrowDisable)?;\n\n                total_debt_power_e6 = total_debt_power_e6\n                    .checked_add(e8_mul_e6_to_e6_rdown(\n                        debt_value_e8,\n                        debt_coefficient_e6,\n                    )?)\n                    .ok_or(MathError::Overflow)?;\n            }\n        }\n\n        if total_collateral_power_e6 >= total_debt_power_e6 {\n            Ok((\n                true,\n                total_collateral_power_e6\n                    .checked_sub(total_debt_power_e6)\n                    .ok_or(MathError::Underflow)?,\n            ))\n        } else {\n            Ok((\n                false,\n                total_debt_power_e6\n                    .checked_sub(total_collateral_power_e6)\n                    .ok_or(MathError::Underflow)?,\n            ))\n        }\n    }\n\n    pub fn calculate_lending_power_of_an_account_e6(\n        &self,\n        account: &AccountId,\n    ) -> Result<(bool, u128), LendingPoolError> {\n        self.calculate_lending_power_e6(\n            &self.get_account_datas(account),\n            &self.get_account_config(account),\n            &self.get_fee_reductions_of_account(account),\n            &self.get_assets_prices_e18()?,\n        )\n    }\n\n    pub fn ensure_collateralized_by_account(\n        &self,\n        account: &AccountId,\n    ) -> Result<(), LendingPoolError> {\n        self.ensure_collateralized_from_raw(\n            &self.get_account_datas(account),\n            &self.get_account_config(account),\n            &self.get_fee_reductions_of_account(account),\n        )\n    }\n\n    fn ensure_collateralized_from_raw(\n        &self,\n        account_datas: &[Option<AccountReserveData>],\n        account_config: &AccountConfig,\n        fee_reductions: &FeeReductions,\n    ) -> Result<(), LendingPoolError> {\n        self.ensure_collateralized(\n            account_datas,\n            account_config,\n            fee_reductions,\n            &self.get_assets_prices_e18()?,\n        )?;\n        Ok(())\n    }\n\n    fn ensure_collateralized(\n        &self,\n        account_reserve_datas: &[Option<AccountReserveData>],\n        account_config: &AccountConfig,\n        fee_reductions: &FeeReductions,\n        prices_e18: &[u128],\n    ) -> Result<(), LendingPoolError> {\n        match self.calculate_lending_power_e6(\n            account_reserve_datas,\n            account_config,\n            fee_reductions,\n            prices_e18,\n        )? {\n            (false, _) => Err(LendingPoolError::InsufficientCollateral),\n            _ => Ok(()),\n        }\n    }\n\n    pub fn calculate_liquidated_amount_and_ensure_collateralized(\n        &self,\n        account: &AccountId,\n        asset_to_repay_id: u32,\n        asset_to_take_id: u32,\n        asset_to_repay_price_e18: &u128,\n        asset_to_take_price_e18: &u128,\n        amount_to_repay: &Balance,\n    ) -> Result<Balance, LendingPoolError> {\n        let account_config = &self\n            .account_configs\n            .get(account)\n            .ok_or(LendingPoolError::NothingToRepay)?;\n        if (account_config.collaterals >> asset_to_take_id) & 1_u128 != 1 {\n            return Err(LendingPoolError::TakingNotACollateral);\n        }\n\n        let reserve_to_repay_decimal_multiplier =\n            self.get_decimal_multiplier(asset_to_repay_id);\n\n        let reserve_to_take_decimal_multiplier =\n            self.get_decimal_multiplier(asset_to_take_id);\n\n        let market_rule = self.get_market_rule(account_config);\n        let penalty_to_repay_e6 = get_penalty(&market_rule, asset_to_repay_id);\n        let penalty_to_take_e6 = get_penalty(&market_rule, asset_to_take_id);\n\n        let amount_to_take = calculate_amount_to_take(\n            amount_to_repay,\n            asset_to_repay_price_e18,\n            asset_to_take_price_e18,\n            &reserve_to_repay_decimal_multiplier,\n            &reserve_to_take_decimal_multiplier,\n            &penalty_to_repay_e6,\n            &penalty_to_take_e6,\n        )?;\n        Ok(amount_to_take)\n    }\n\n    /*\n    TIME-WEIGHTED UTILIZATION RATE CALCULATIONS\n    */\n    /// Snap the utilization rate for the given asset at the given timestamp.\n    /// To snap utilization a new time weighted entry is created.\n    fn store_utilization_rate_snapshot(\n        &mut self,\n        asset_id: AssetId,\n        reserve_data: &ReserveData,\n        timestamp: &Timestamp,\n    ) -> Result<(), LendingPoolError> {\n        let tw_index = self.tw_ur_indexes.get(asset_id).unwrap();\n\n        let last_tw_entry = self\n            .tw_ur_entries\n            .get((asset_id, tw_index.value))\n            .unwrap_or_default();\n\n        if last_tw_entry.timestamp >= *timestamp {\n            return Ok(());\n        }\n\n        let delta_timestamp = timestamp.saturating_sub(last_tw_entry.timestamp);\n\n        ink::env::debug_println!(\"Delta timestamp: {}\", delta_timestamp);\n\n        let utilization_rate_e6 = reserve_data.current_utilization_rate_e6()?;\n\n        ink::env::debug_println!(\"Utilization rate: {}\", utilization_rate_e6);\n\n        let delta_accumulator = (utilization_rate_e6 as u64)\n            .checked_mul(delta_timestamp)\n            .ok_or(MathError::Overflow)?;\n\n        ink::env::debug_println!(\"Delta accumulator: {}\", delta_accumulator);\n\n        let new_accumulator = last_tw_entry\n            .accumulator\n            .overflowing_add(delta_accumulator)\n            .0;\n\n        let new_tw_index = tw_index.next();\n\n        self.tw_ur_entries.insert(\n            (asset_id, new_tw_index.value),\n            &TwEntry {\n                timestamp: *timestamp,\n                accumulator: new_accumulator,\n            },\n        );\n\n        self.tw_ur_indexes.insert(asset_id, &new_tw_index);\n\n        Ok(())\n    }\n\n    /// Returns the time-weighted utilization rate for the given asset.\n    /// The rate is calculated for the latest shortest period longer than the given period.\n    /// arg guessed_index is adjusted to the nearest index that would return a tw_entry\n    /// with smallest time diff between latest_tw_entry & tw_entry and is distant enough from the latest_tw_entry at the same time.\n    /// If timestamp entry at guessed_index is not distant enough (at least period) from the last entry, the function returns WrongIndex error.\n    pub fn get_tw_ur_from_shortest_period_longer_than(\n        &self,\n        period: u64,\n        asset_id: AssetId,\n        guessed_index: u32,\n    ) -> Result<u32, LendingPoolError> {\n        let tw_index = self.tw_ur_indexes.get(asset_id).unwrap();\n        let last_tw_entry =\n            self.get_tw_ur_entry(asset_id, tw_index.value).unwrap();\n\n        let mut curr_apr_tw_index = TwIndex {\n            value: guessed_index,\n        };\n\n        let mut after_appropriate_tw_entry = self\n            .get_tw_ur_entry(asset_id, curr_apr_tw_index.next().value)\n            .ok_or(LendingPoolError::TwEntryInvalidIndex(0))?;\n\n        while last_tw_entry\n            .timestamp\n            .saturating_sub(after_appropriate_tw_entry.timestamp)\n            >= period\n        {\n            curr_apr_tw_index = curr_apr_tw_index.next();\n            after_appropriate_tw_entry = self\n                .get_tw_ur_entry(asset_id, curr_apr_tw_index.next().value)\n                .ok_or(LendingPoolError::TwEntryInvalidIndex(1))?;\n        }\n\n        let appropriate_tw_entry = self\n            .get_tw_ur_entry(asset_id, curr_apr_tw_index.value)\n            .ok_or(LendingPoolError::TwEntryInvalidIndex(2))?;\n\n        // if the entry is too recent\n        // may occur when while body has not executed even once\n        let delta_timestamp = last_tw_entry\n            .timestamp\n            .saturating_sub(appropriate_tw_entry.timestamp);\n        if delta_timestamp < period {\n            return Err(LendingPoolError::TwEntryInvalidIndex(3));\n        }\n\n        let delta_accumulator = last_tw_entry\n            .accumulator\n            .overflowing_sub(appropriate_tw_entry.accumulator)\n            .0;\n\n        let tw_ur_e6 = match u32::try_from(\n            delta_accumulator\n                .checked_div(delta_timestamp)\n                .ok_or(MathError::DivByZero)?,\n        ) {\n            Ok(value) => value,\n            Err(_) => return Err(LendingPoolError::from(MathError::Overflow)),\n        };\n\n        Ok(tw_ur_e6)\n    }\n\n    /*\n    MANAGEMENT SECTION - methods responsible for changing parameters of the lending pool.\n    Registering new assets, chaning the parameters, freezing, activating.\n     */\n    pub fn account_for_price_feed_provider_change(\n        &mut self,\n        price_feed_provider: &AccountId,\n    ) {\n        self.price_feed_provider.set(price_feed_provider);\n    }\n    pub fn account_for_fee_reduction_provider_change(\n        &mut self,\n        fee_reduction_provider: &AccountId,\n    ) {\n        self.fee_reduction_provider.set(fee_reduction_provider);\n    }\n\n    #[allow(clippy::too_many_arguments)]\n    pub fn account_for_register_asset(\n        &mut self,\n        asset: &AccountId,\n        reserve_data: &ReserveData,\n        reserve_restrictions: &ReserveRestrictions,\n        decimal_multiplier: &DecimalMultiplier,\n        reserve_fees: &ReserveFees,\n        interest_rate_model: &Option<InterestRateModel>,\n        timestamp: &Timestamp,\n    ) -> Result<(), LendingPoolError> {\n        if self.asset_to_id.contains(asset) {\n            return Err(LendingPoolError::AlreadyRegistered);\n        }\n        let id = self.next_asset_id.get_or_default();\n\n        self.asset_to_id.insert(asset, &id);\n        self.id_to_asset.insert(id, asset);\n        self.reserve_datas.insert(id, reserve_data);\n        self.reserve_restrictions.insert(id, reserve_restrictions);\n        self.reserve_decimal_multiplier\n            .insert(id, decimal_multiplier);\n        self.reserve_indexes_and_fees\n            .insert(id, &ReserveIndexesAndFees::new(timestamp, reserve_fees));\n\n        self.tw_ur_indexes.insert(id, &TwIndex::new());\n\n        if let Some(model) = interest_rate_model {\n            self.interest_rate_model.insert(id, model);\n        };\n\n        self.next_asset_id\n            .set(&(id.checked_add(1).ok_or(MathError::Overflow)?));\n        Ok(())\n    }\n\n    pub fn account_for_set_abacus_tokens(\n        &mut self,\n        asset: &AccountId,\n        reserve_abacus_tokens: &ReserveAbacusTokens,\n    ) -> Result<(), LendingPoolError> {\n        if !self.asset_to_id.contains(asset) {\n            return Err(LendingPoolError::AssetNotRegistered);\n        }\n\n        self.reserve_abacus_tokens\n            .insert(asset, reserve_abacus_tokens);\n\n        Ok(())\n    }\n\n    pub fn account_for_market_rule_change(\n        &mut self,\n        account: &AccountId,\n        market_rule_id: RuleId,\n    ) -> Result<(), LendingPoolError> {\n        self.ensure_market_rule_in_bounds(market_rule_id)?;\n\n        let mut account_config = self.get_account_config(account);\n\n        account_config.market_rule_id = market_rule_id;\n\n        self.account_configs.insert(account, &account_config);\n\n        Ok(())\n    }\n\n    pub fn account_for_changing_activity(\n        &mut self,\n        asset: &AccountId,\n        active: bool,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        reserve_data.set_is_active(active)?;\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        Ok(())\n    }\n\n    pub fn account_for_changing_is_frozen(\n        &mut self,\n        asset: &AccountId,\n        new_is_frozen: bool,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        reserve_data.set_is_frozen(new_is_frozen)?;\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        Ok(())\n    }\n\n    pub fn account_for_reserve_restricitions_change(\n        &mut self,\n        asset: &AccountId,\n        reserve_restrictions: &ReserveRestrictions,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        self.reserve_restrictions\n            .insert(asset_id, reserve_restrictions);\n        Ok(())\n    }\n\n    pub fn account_for_interest_rate_model_change(\n        &mut self,\n        asset: &AccountId,\n        interest_rate_model: &InterestRateModel,\n        timestamp: &Timestamp,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        if !self.interest_rate_model.contains(asset_id) {\n            return Err(LendingPoolError::AssetIsProtocolStablecoin);\n        }\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n        reserve_data.recalculate_current_rates(interest_rate_model)?;\n\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        self.interest_rate_model\n            .insert(asset_id, interest_rate_model);\n        self.reserve_indexes_and_fees\n            .insert(asset_id, &reserve_indexes_and_fees);\n        Ok(())\n    }\n\n    pub fn account_for_reserve_fees_change(\n        &mut self,\n        asset: &AccountId,\n        reserve_fees: &ReserveFees,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        if !self.interest_rate_model.contains(asset_id) {\n            return Err(LendingPoolError::AssetIsProtocolStablecoin);\n        }\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        reserve_indexes_and_fees.fees = *reserve_fees;\n        self.reserve_indexes_and_fees\n            .insert(asset_id, &reserve_indexes_and_fees);\n        Ok(())\n    }\n\n    pub fn account_for_add_market_rule(\n        &mut self,\n        market_rule: &MarketRule,\n    ) -> u32 {\n        let rule_id = self.next_rule_id.get_or_default();\n        self.market_rules.insert(rule_id, market_rule);\n        self.next_rule_id.set(&(rule_id.checked_add(1).unwrap()));\n        rule_id\n    }\n\n    pub fn account_for_asset_rule_change(\n        &mut self,\n        market_rule_id: &RuleId,\n        asset: &AccountId,\n        asset_rules: &AssetRules,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        self.ensure_market_rule_in_bounds(*market_rule_id)?;\n        let mut market_rule = self.market_rules.get(market_rule_id).unwrap();\n        while (market_rule.len() as u32) <= asset_id {\n            market_rule.push(None);\n        }\n        market_rule[asset_id as usize] = Some(*asset_rules);\n        let old_asset_rule = market_rule[asset_id as usize];\n        asset_rules.validate_new_rule(&old_asset_rule)?;\n        self.market_rules.insert(market_rule_id, &market_rule);\n        Ok(())\n    }\n\n    pub fn account_for_stablecoin_debt_rate_e18_change(\n        &mut self,\n        asset: &AccountId,\n        debt_rate_e18: &u64,\n    ) -> Result<(), LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        if self.interest_rate_model.contains(asset_id) {\n            return Err(LendingPoolError::AssetIsNotProtocolStablecoin);\n        }\n        let mut reserve_data = self.get_reserve_data(asset_id);\n        reserve_data.current_debt_rate_e18 = *debt_rate_e18;\n        self.reserve_datas.insert(asset_id, &reserve_data);\n        Ok(())\n    }\n\n    /*\n        SECTION REST - getters, setters, ensure methods, etc.\n    */\n\n    pub fn total_deposit_of(\n        &self,\n        asset: &AccountId,\n        timestamp: &Timestamp,\n    ) -> Result<Balance, LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n\n        Ok(reserve_data.total_deposit)\n    }\n\n    pub fn account_deposit_of(\n        &self,\n        asset: &AccountId,\n        account: &AccountId,\n        timestamp: &Timestamp,\n    ) -> Result<Balance, LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        let (mut account_reserve_data, _) =\n            self.get_account_reserve_data(asset_id, account);\n\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n        account_reserve_data.accumulate_account_interest(\n            &reserve_indexes_and_fees.indexes,\n            &mut reserve_indexes_and_fees.fees,\n            &self.get_fee_reductions_of_account(account),\n        )?;\n\n        Ok(account_reserve_data.deposit)\n    }\n\n    pub fn total_debt_of(\n        &self,\n        asset: &AccountId,\n        timestamp: &Timestamp,\n    ) -> Result<Balance, LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n\n        Ok(reserve_data.total_debt)\n    }\n\n    pub fn account_debt_of(\n        &self,\n        asset: &AccountId,\n        account: &AccountId,\n        timestamp: &Timestamp,\n    ) -> Result<Balance, LendingPoolError> {\n        let asset_id = self.asset_id(asset)?;\n        let reserve_data = self.get_reserve_data(asset_id);\n        let mut reserve_indexes_and_fees =\n            self.get_reserve_indexes_and_fees(asset_id);\n        let (mut account_reserve_data, _) =\n            self.get_account_reserve_data(asset_id, account);\n        reserve_indexes_and_fees\n            .indexes\n            .update(&reserve_data, timestamp)?;\n        account_reserve_data.accumulate_account_interest(\n            &reserve_indexes_and_fees.indexes,\n            &mut reserve_indexes_and_fees.fees,\n            &self.get_fee_reductions_of_account(account),\n        )?;\n\n        Ok(account_reserve_data.debt)\n    }\n\n    fn insert_account_data(\n        &mut self,\n        mut account_datas: Vec<Option<AccountReserveData>>,\n        asset_id: u32,\n        updated_account_data: AccountReserveData,\n        of: &AccountId,\n    ) {\n        account_datas.insert(asset_id as usize, Some(updated_account_data));\n        self.account_reserve_datas.insert(of, &account_datas);\n    }\n\n    pub fn get_all_registered_assets(&self) -> Vec<AccountId> {\n        (0..self.next_asset_id.get().unwrap_or(0))\n            .map(|u| self.id_to_asset.get(u).unwrap()) // iterating over all assets => id_to_asset exists\n            .collect()\n    }\n\n    pub fn asset_id(\n        &self,\n        asset: &AccountId,\n    ) -> Result<AssetId, LendingPoolError> {\n        self.asset_to_id\n            .get(asset)\n            .ok_or(LendingPoolError::AssetNotRegistered)\n    }\n\n    fn get_account_reserve_datas_defaults(\n        &self,\n    ) -> Vec<Option<AccountReserveData>> {\n        (0..(self.next_asset_id.get().unwrap_or(0)))\n            .map(|_| None)\n            .collect()\n    }\n\n    fn get_account_datas(\n        &self,\n        account: &AccountId,\n    ) -> Vec<Option<AccountReserveData>> {\n        let mut account_datas = self\n            .account_reserve_datas\n            .get(account)\n            .unwrap_or(self.get_account_reserve_datas_defaults());\n\n        let next_id = self.next_asset_id.get().unwrap_or(0) as usize;\n        if account_datas.len() < next_id {\n            account_datas.resize(next_id, None);\n        }\n\n        account_datas\n    }\n\n    pub fn get_account_reserve_data(\n        &self,\n        asset_id: AssetId,\n        account: &AccountId,\n    ) -> (AccountReserveData, Vec<Option<AccountReserveData>>) {\n        let account_reserve_datas = self.get_account_datas(account);\n\n        let account_data = match account_reserve_datas.get(asset_id as usize) {\n            Some(data) => *data,\n            None => None,\n        };\n        (account_data.unwrap_or_default(), account_reserve_datas)\n    }\n    fn ensure_market_rule_in_bounds(\n        &mut self,\n        market_rule_id: u32,\n    ) -> Result<(), LendingPoolError> {\n        if market_rule_id >= self.next_rule_id.get_or_default() {\n            return Err(LendingPoolError::MarketRuleInvalidId);\n        };\n        Ok(())\n    }\n\n    fn get_market_rule(\n        &self,\n        account_config: &AccountConfig,\n    ) -> Vec<Option<AssetRules>> {\n        self.market_rules\n            .get(account_config.market_rule_id)\n            .unwrap() // account used market rule => market rule exists\n    }\n\n    fn get_reserve_restrictions(\n        &mut self,\n        asset_id: u32,\n    ) -> ReserveRestrictions {\n        self.reserve_restrictions.get(asset_id).unwrap() // asset_id exists => reserve_restrictions exists\n    }\n\n    fn get_reserve_indexes_and_fees(\n        &self,\n        asset_id: u32,\n    ) -> ReserveIndexesAndFees {\n        self.reserve_indexes_and_fees.get(asset_id).unwrap() // asset_id exists => reserve_indexes_and_fees exists\n    }\n\n    fn get_reserve_data(&self, asset_id: u32) -> ReserveData {\n        self.reserve_datas.get(asset_id).unwrap() // asset_id exists => reserve_data exists\n    }\n\n    fn get_decimal_multiplier(&self, asset_id: u32) -> u128 {\n        self.reserve_decimal_multiplier.get(asset_id).unwrap() // asset_id exists => reserve_decimal_multiplier exists\n    }\n\n    fn get_account_config(&self, account: &AccountId) -> AccountConfig {\n        self.account_configs.get(account).unwrap_or_default()\n    }\n\n    fn get_assets_prices_e18(&self) -> Result<Vec<u128>, LendingPoolError> {\n        let all_assets = self.get_all_registered_assets();\n        let price_feeder: PriceFeedRef =\n            self.price_feed_provider.get().unwrap().into();\n        Ok(price_feeder\n            .call()\n            .get_latest_prices(all_assets)\n            .call_v1()\n            .invoke()?)\n    }\n    pub fn get_fee_reductions_of_account(\n        &self,\n        account: &AccountId,\n    ) -> FeeReductions {\n        match self.fee_reduction_provider.get() {\n            None => FeeReductions::default(),\n            Some(provider) => FeeReductionRef::from(provider)\n                .call()\n                .get_fee_reductions(*account)\n                .call_v1()\n                .invoke(),\n        }\n    }\n\n    pub fn get_tw_ur_entry(\n        &self,\n        asset_id: AssetId,\n        index: u32,\n    ) -> Option<TwEntry> {\n        self.tw_ur_entries.get((asset_id, index))\n    }\n}\nfn get_account_data_entry_mut(\n    account_datas: &mut [Option<AccountReserveData>],\n    asset_id: u32,\n) -> &mut AccountReserveData {\n    let account_data_entry = account_datas.get_mut(asset_id as usize).unwrap(); // retrieving account datas should account for resizing the array\n    if account_data_entry.is_none() {\n        account_data_entry.replace(AccountReserveData::default());\n    }\n    let account_data = account_data_entry.as_mut().unwrap(); //checked above\n    account_data\n}\nfn get_penalty(market_rule: &[Option<AssetRules>], asset_id: u32) -> u128 {\n    market_rule[asset_id as usize].unwrap().penalty_e6.unwrap() //  asset_id exists => market_rule exists, borrow_coefficient_e6 exists => penalty_e6 exists\n}\n",
        "src/contract_modules/lending_pool/implementation/v_token_interface.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::{\n    abacus_token::{AbacusToken, AbacusTokenRef, TransferEventData},\n    lending_pool::{\n        events::{Borrow, Repay},\n        LendingPoolError,\n    },\n};\nuse pendzl::{\n    contracts::access_control::AccessControlError,\n    traits::{AccountId, Balance, StorageFieldGetter},\n};\n\nuse ink::{env::DefaultEnvironment, prelude::*};\n\nuse super::{_check_amount_not_zero, storage::LendingPoolStorage};\nuse ink::codegen::TraitCallBuilder;\n\npub trait LendingPoolVTokenInterfaceImpl:\n    StorageFieldGetter<LendingPoolStorage>\n{\n    fn total_debt_of(&self, underlying_asset: AccountId) -> Balance {\n        let timestamp = Self::env().block_timestamp();\n        self.data::<LendingPoolStorage>()\n            .total_debt_of(&underlying_asset, &timestamp)\n            .unwrap()\n    }\n\n    fn account_debt_of(\n        &self,\n        underlying_asset: AccountId,\n        account: AccountId,\n    ) -> Balance {\n        let timestamp = Self::env().block_timestamp();\n        self.data::<LendingPoolStorage>()\n            .account_debt_of(&underlying_asset, &account, &timestamp)\n            .unwrap()\n    }\n\n    fn transfer_debt_from_to(\n        &mut self,\n        underlying_asset: AccountId,\n        from: AccountId,\n        to: AccountId,\n        amount: Balance,\n    ) -> Result<(Balance, Balance), LendingPoolError> {\n        _check_amount_not_zero(amount)?;\n\n        let reserve_abacus_tokens_tokens = self\n            .data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(underlying_asset)\n            .ok_or(LendingPoolError::AssetNotRegistered)?;\n        if Self::env().caller() != reserve_abacus_tokens_tokens.v_token_address\n        {\n            return Err((AccessControlError::MissingRole).into());\n        }\n\n        let timestamp = Self::env().block_timestamp();\n\n        let (\n            (from_accumulated_deposit_interest, from_accumulated_debt_interest),\n            (to_accumulated_deposit_interest, to_accumulated_debt_interest),\n        ) = self\n            .data::<LendingPoolStorage>()\n            .account_for_debt_transfer_from_to(\n                &underlying_asset,\n                &from,\n                &to,\n                &amount,\n                &timestamp,\n            )?;\n\n        // check if there ie enought collateral\n        self.data::<LendingPoolStorage>()\n            .ensure_collateralized_by_account(&to)?;\n\n        //// ABACUS TOKEN EVENTS\n        // AToken interests\n        if from_accumulated_deposit_interest != 0\n            || to_accumulated_deposit_interest != 0\n        {\n            let mut abacus_token_contract: AbacusTokenRef =\n                reserve_abacus_tokens_tokens.a_token_address.into();\n\n            abacus_token_contract\n                .call_mut()\n                .emit_transfer_events(vec![\n                    TransferEventData {\n                        from: None,\n                        to: Some(from),\n                        amount: from_accumulated_deposit_interest,\n                    },\n                    TransferEventData {\n                        from: None,\n                        to: Some(to),\n                        amount: to_accumulated_deposit_interest,\n                    },\n                ])\n                .call_v1()\n                .invoke()?;\n        }\n        // VToken intersts are returned\n\n        //// EVENT\n\n        ink::env::emit_event::<DefaultEnvironment, Repay>(Repay {\n            asset: underlying_asset,\n            caller: Self::env().caller(),\n            on_behalf_of: from,\n            amount,\n        });\n        ink::env::emit_event::<DefaultEnvironment, Borrow>(Borrow {\n            asset: underlying_asset,\n            caller: Self::env().caller(),\n            on_behalf_of: to,\n            amount,\n        });\n\n        Ok((from_accumulated_debt_interest, to_accumulated_debt_interest))\n    }\n}\n",
        "src/contract_modules/lending_pool/implementation/view.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse crate::lending_pool::{\n    DecimalMultiplier, LendingPoolError, MarketRule, RuleId,\n};\nuse abax_library::{\n    math::E18_U128,\n    structs::{\n        AccountConfig, AccountReserveData, InterestRateModel,\n        ReserveAbacusTokens, ReserveData, ReserveFees, ReserveIndexes,\n        ReserveRestrictions, TwEntry, TwIndex,\n    },\n};\nuse pendzl::traits::{AccountId, Balance, StorageFieldGetter};\n\nuse ink::prelude::vec::Vec;\n\nuse super::{internal::InternalIncome, storage::LendingPoolStorage};\n\npub trait LendingPoolViewImpl: StorageFieldGetter<LendingPoolStorage> {\n    fn view_flash_loan_fee_e6(&self) -> u128 {\n        self.data::<LendingPoolStorage>()\n            .flash_loan_fee_e6\n            .get()\n            .unwrap()\n    }\n    fn view_asset_id(&self, asset: AccountId) -> Option<RuleId> {\n        self.data::<LendingPoolStorage>().asset_to_id.get(asset)\n    }\n    fn view_registered_assets(&self) -> Vec<AccountId> {\n        self.data::<LendingPoolStorage>()\n            .get_all_registered_assets()\n    }\n\n    fn view_reserve_data(&self, asset: AccountId) -> Option<ReserveData> {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => self\n                .data::<LendingPoolStorage>()\n                .reserve_datas\n                .get(asset_id),\n            None => None,\n        }\n    }\n\n    fn view_unupdated_reserve_indexes(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveIndexes> {\n        self.data::<LendingPoolStorage>()\n            .asset_to_id\n            .get(asset)\n            .map(|asset_id| {\n                self.data::<LendingPoolStorage>()\n                    .reserve_indexes_and_fees\n                    .get(asset_id)\n                    .unwrap()\n                    .indexes\n            })\n    }\n\n    fn view_reserve_indexes(&self, asset: AccountId) -> Option<ReserveIndexes> {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => {\n                let reserve_data = self\n                    .data::<LendingPoolStorage>()\n                    .reserve_datas\n                    .get(asset_id)\n                    .unwrap();\n                let mut reserve_indexes_and_fees = self\n                    .data::<LendingPoolStorage>()\n                    .reserve_indexes_and_fees\n                    .get(asset_id)\n                    .unwrap();\n\n                reserve_indexes_and_fees\n                    .indexes\n                    .update(&reserve_data, &Self::env().block_timestamp())\n                    .unwrap();\n                Some(reserve_indexes_and_fees.indexes)\n            }\n            None => None,\n        }\n    }\n\n    fn view_reserve_fees(&self, asset: AccountId) -> Option<ReserveFees> {\n        self.data::<LendingPoolStorage>()\n            .asset_to_id\n            .get(asset)\n            .map(|asset_id| {\n                self.data::<LendingPoolStorage>()\n                    .reserve_indexes_and_fees\n                    .get(asset_id)\n                    .unwrap()\n                    .fees\n            })\n    }\n\n    fn view_interest_rate_model(\n        &self,\n        asset: AccountId,\n    ) -> Option<InterestRateModel> {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => self\n                .data::<LendingPoolStorage>()\n                .interest_rate_model\n                .get(asset_id),\n            None => None,\n        }\n    }\n\n    fn view_reserve_restrictions(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveRestrictions> {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => self\n                .data::<LendingPoolStorage>()\n                .reserve_restrictions\n                .get(asset_id),\n            None => None,\n        }\n    }\n    fn view_reserve_tokens(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveAbacusTokens> {\n        self.data::<LendingPoolStorage>()\n            .reserve_abacus_tokens\n            .get(asset)\n    }\n    fn view_reserve_decimal_multiplier(\n        &self,\n        reserve_token_address: AccountId,\n    ) -> Option<DecimalMultiplier> {\n        self.data::<LendingPoolStorage>()\n            .reserve_decimal_multiplier\n            .get(\n                self.data::<LendingPoolStorage>()\n                    .asset_to_id\n                    .get(reserve_token_address)\n                    .unwrap(),\n            )\n    }\n\n    fn view_unupdated_account_reserve_data(\n        &self,\n        asset: AccountId,\n        account: AccountId,\n    ) -> AccountReserveData {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => {\n                self.data::<LendingPoolStorage>()\n                    .get_account_reserve_data(asset_id, &account)\n                    .0\n            }\n            None => AccountReserveData {\n                deposit: 0,\n                debt: 0,\n                applied_deposit_index_e18: E18_U128,\n                applied_debt_index_e18: E18_U128,\n            },\n        }\n    }\n\n    fn view_account_reserve_data(\n        &self,\n        asset: AccountId,\n        account: AccountId,\n    ) -> AccountReserveData {\n        match self.data::<LendingPoolStorage>().asset_to_id.get(asset) {\n            Some(asset_id) => {\n                let mut account_reserve_data = self\n                    .data::<LendingPoolStorage>()\n                    .get_account_reserve_data(asset_id, &account)\n                    .0;\n                let reserve_data = self\n                    .data::<LendingPoolStorage>()\n                    .reserve_datas\n                    .get(asset_id)\n                    .unwrap();\n                let mut reserve_indexes_and_fees = self\n                    .data::<LendingPoolStorage>()\n                    .reserve_indexes_and_fees\n                    .get(asset_id)\n                    .unwrap();\n                let fee_reductions = self\n                    .data::<LendingPoolStorage>()\n                    .get_fee_reductions_of_account(&account);\n\n                reserve_indexes_and_fees\n                    .indexes\n                    .update(&reserve_data, &Self::env().block_timestamp())\n                    .unwrap();\n                account_reserve_data\n                    .accumulate_account_interest(\n                        &reserve_indexes_and_fees.indexes,\n                        &mut reserve_indexes_and_fees.fees,\n                        &fee_reductions,\n                    )\n                    .unwrap();\n                account_reserve_data\n            }\n            None => AccountReserveData {\n                deposit: 0,\n                debt: 0,\n                applied_deposit_index_e18: E18_U128,\n                applied_debt_index_e18: E18_U128,\n            },\n        }\n    }\n\n    fn view_account_config(&self, account: AccountId) -> AccountConfig {\n        self.data::<LendingPoolStorage>()\n            .account_configs\n            .get(account)\n            .unwrap_or_default()\n    }\n\n    fn view_market_rule(&self, market_rule_id: RuleId) -> Option<MarketRule> {\n        self.data::<LendingPoolStorage>()\n            .market_rules\n            .get(market_rule_id)\n    }\n\n    fn get_account_free_collateral_coefficient(\n        &self,\n        account: AccountId,\n    ) -> (bool, u128) {\n        self.data::<LendingPoolStorage>()\n            .calculate_lending_power_of_an_account_e6(&account)\n            .unwrap()\n    }\n\n    fn view_protocol_income(\n        &self,\n        assets: Option<Vec<AccountId>>,\n    ) -> Vec<(AccountId, Balance)> {\n        match assets {\n            Some(assets_vec) => {\n                self._view_protocol_income(&assets_vec).unwrap()\n            }\n            None => {\n                let registered_assets = self\n                    .data::<LendingPoolStorage>()\n                    .get_all_registered_assets();\n                self._view_protocol_income(&registered_assets).unwrap()\n            }\n        }\n    }\n\n    fn view_asset_tw_index(&self, asset: AccountId) -> Option<TwIndex> {\n        if let Some(asset_id) =\n            self.data::<LendingPoolStorage>().asset_to_id.get(asset)\n        {\n            self.data::<LendingPoolStorage>()\n                .tw_ur_indexes\n                .get(asset_id)\n        } else {\n            None\n        }\n    }\n\n    fn view_asset_tw_entries(\n        &self,\n        asset: AccountId,\n        from: u32,\n        to: u32,\n    ) -> Vec<Option<TwEntry>> {\n        let mut res: Vec<Option<TwEntry>> = Vec::new();\n        if let Some(asset_id) =\n            self.data::<LendingPoolStorage>().asset_to_id.get(asset)\n        {\n            for i in from..to {\n                res.push(\n                    self.data::<LendingPoolStorage>()\n                        .tw_ur_entries\n                        .get((asset_id, i)),\n                );\n            }\n            res\n        } else {\n            Vec::new()\n        }\n    }\n\n    fn view_tw_ur_from_period_longer_than(\n        &self,\n        period: u64,\n        asset: AccountId,\n        guessed_index: u32,\n    ) -> Result<u32, LendingPoolError> {\n        let asset_id = self\n            .data::<LendingPoolStorage>()\n            .asset_to_id\n            .get(asset)\n            .ok_or(LendingPoolError::AssetNotRegistered)?;\n\n        self.data::<LendingPoolStorage>()\n            .get_tw_ur_from_shortest_period_longer_than(\n                period,\n                asset_id,\n                guessed_index,\n            )\n    }\n}\n",
        "src/contract_modules/lending_pool/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\npub mod implementation;\n\npub mod events;\n\nmod constants;\nmod errors;\nmod traits;\nmod types;\n\npub use constants::*;\npub use errors::*;\npub use traits::*;\npub use types::*;\n",
        "src/contract_modules/lending_pool/traits/a_token_interface.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::{contract_ref, env::DefaultEnvironment, primitives::AccountId};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::LendingPoolError;\n\npub type LendingPoolATokenInterfaceRef =\n    contract_ref!(LendingPoolATokenInterface, DefaultEnvironment);\n\n/// Trait containing messages that are accessible to **AToken** - the PSP22 wrapeer of deposits.\n#[ink::trait_definition]\npub trait LendingPoolATokenInterface {\n    /// Returns LendingPool's total deposit of an underlying asset.\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to look up total deposit of.\n    ///\n    /// # Errors None\n    #[ink(message)]\n    fn total_deposit_of(&self, underlying_asset: AccountId) -> Balance;\n\n    /// Returns the specified `account`'s account Balance of an `underlying_asset`.\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to look up deposit of.\n    /// * `account` - AccountId (aka address) of an account to look up deposit of.\n    ///\n    /// # Errors None\n    #[ink(message)]\n    fn account_deposit_of(\n        &self,\n        underlying_asset: AccountId,\n        account: AccountId,\n    ) -> Balance;\n\n    /// Transfers an `amount` of `underlying_asset` deposit on the behalf of `from` to the account `to`\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to transfer tokens from/to.\n    /// * `from` - AccountId (aka address) of an account to transfer from.\n    /// * `to` - AccountId (aka address) of an account to transfer to.\n    ///\n    /// On success a number of PSP22's `Transfer` events are emitted.\n    /// The number of events and their type/values depend on the interests that may be accrued both for `from` and `to` accounts.\n    ///\n    /// # Errors\n    /// * `TransfersDisabled` returned if deposit for given `underlying_asset` is disabled.\n    /// * `WrongCaller` returned if the caller is not an `underlying_asset`'s AToken contract.\n    /// * `InsufficientBalance` returned if tdeposit of an `underlying_asset` of `from` is smaller than `amount`.\n    #[ink(message)]\n    fn transfer_deposit_from_to(\n        &mut self,\n        underlying_asset: AccountId,\n        from: AccountId,\n        to: AccountId,\n        amount: Balance,\n    ) -> Result<(Balance, Balance), LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/lending_pool_actions.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::Action;\nuse ink::prelude::vec::Vec;\nuse ink::{contract_ref, env::DefaultEnvironment, primitives::AccountId};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::{LendingPoolError, RuleId};\n\npub type LendingPoolActionsRef =\n    contract_ref!(LendingPoolActions, DefaultEnvironment);\n\n/// Trait containing messges that are used by **lenders**, **borrowers** and **liquidators**.\n#[ink::trait_definition]\npub trait LendingPoolActions {\n    /// Callers choses a market rule caller want to use.\n    ///\n    /// * `market_rule_id` - the id of the market_rule to use.\n    ///\n    /// # Errors\n    /// * `MarketRuleInvalidId` returned if the rule with `market_rule_id` doesn't exist.\n    /// * `PriceFeedError` returned  if there is a problem with Price Oracle.\n    /// * `InsufficientCollateral` returned if there is insufficient collateral after choosing rule with `market_rule_id` returned .\n    #[ink(message)]\n    fn choose_market_rule(\n        &mut self,\n        market_rule_id: RuleId,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Caller chooses to `use_as_colalteral` an `asset`.\n    /// i.e. if the callers's deposit of the `asset` should back caller's debt and be vulnerable to liquidation.\n    ///\n    /// * `asset` - AccountId (aka address) of PSP22 that should be allowed as collateral.\n    /// * `use_as_collateral` - true if the account wants to use the asset as collateral, false in the opposite case.\n    ///\n    /// # Errors\n    /// * `RuleCollateralDisable` returned if the `market_rule` chosen by caller doesn't support `asset` returned  as collateral.\n    /// * `MinimalCollateralDeposit` returned if the caller's deposit of an `asset` is smaller than `minimal_collateral` returned .\n    /// * `PriceFeedError` returned  if there is a problem with Price Oracle.\n    /// * `InsufficientCollateral` returned if `use_as_collateral` ==false and insufficient collateralafter disabling `asset` returned  as a collateral.\n    #[ink(message)]\n    fn set_as_collateral(\n        &mut self,\n        asset: AccountId,\n        use_as_collateral: bool,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Caller make deposits `amount` of an `asset` `on_behalf_of`.\n    ///\n    /// * `asset` - AccountId (aka address) of PSP22 that is deposited.\n    /// * `on_behalf_of` - AccountId (aka address) on behalf of which deposit is done.\n    /// * `amount` - the number of tokens to be deposited in an absolute value (1USDT = 1_000_000, 1AZERO = 1_000_000_000_000).\n    /// * `data` - additional data, currently unused.\n    ///\n    /// # Errors\n    /// * `AmountNotGreaterThanZero` returned if `amount` returned  == 0.\n    /// * `AssetNotRegistered` returned if the `asset` is not registered in the `LendingPool` returned.\n    /// * `Inactive` returned if the reserve coresponding to the `asset` is inactive.\n    /// * `Frozen` returned if the reserve coresponding to the `asset' is frozen.\n    /// * `MaxDepositReached` returned if the total deposit after this deposit is higher than maximal_deposit.\n    /// * `PSP22Error` returned if transfer of `asset`fails.\n    #[ink(message)]\n    fn deposit(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), LendingPoolError>;\n    /// is used by a account0, to withdraw on an account of on_behalf_of an asset to LendingPool.\n    /// Withdraw can fail if the account has current debt and withdrawing would make the account's position undercollateralized.\n    ///\n    /// * `asset` - AccountId (aka address) of PSP22 that must be allowed to be borrowed.\n    /// * `on_behalf_of` - AccountId (aka address) of a account1 (may be the same or not as account0) on behalf of who\n    ///     account0 is making withdraw. If account0 != account1 then the allowance of on appropriate AToken will be decreased.\n    /// * `amount` - the number of tokens to be withdrawed. if greater then deposit_amount then only deposit_amopunt will be withdrawn.\n    /// * `data` - additional data currently unused.\n    ///\n    /// # Errors\n    /// * `AmountNotGreaterThanZero` returned if `amount`  == 0.\n    /// * `AssetNotRegistered` returned if the `asset` is not registered in the `LendingPool`.\n    /// * `Inactive` returned if the reserve coresponding to the `asset` is inactive.\n    /// * `InsufficientCollateral` returned if the 'asset' is used as colalteral by 'on_behalf_of\" and after withdraw the 'on_behalf_of' would become undercollaterized.\n    /// * `PSP22Error` returned if transfer of `asset`fails.\n    #[ink(message)]\n    fn withdraw(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<Balance, LendingPoolError>;\n\n    /// Caller takes `amount` of an `asset` as a debt that is accounted `on_bahalf_of`.\n    /// Tokens are transferred to the `caller`.\n    ///\n    /// * `asset` - AccountId (aka address) of PSP22 that is borrowed.\n    /// * `on_behalf_of` - AccountId (aka address) on behalf of who caller is taking debt. If `caller` != `on_behalf_of` then tje allowance of appropriate VToken will be decerased.\n    /// * `amount` - the number of tokens to be borrowed in absolute value (1 USDT = 1_000_000, 1 AZERO = 1_000_000_000_000).\n    /// * `data` - additional data that is unused.\n    ///\n    /// # Errors\n    /// * `AmountNotGreaterThanZero` returned  if `amount`  == 0.\n    /// * `AssetNotRegistered` returned if the `asset` is not registered in the `LendingPool`.\n    /// * `Inactive` returned if the reserve coresponding to the `asset` is inactive.\n    /// * `Frozen` returned if the reserve coresponding to the `asset` is frozen.\n    /// * `MinimalDebt` returned if after taking the loan the debt of `on_bahalf_of` is smaller than minimal_debt.\n    /// * `MaxDebtReached` returned if after borrowig the total_debt is greated than maximal_total_debt.\n    /// * `PriceFeedError` returned if there is a problem with Price Oracle.\n    /// * `InsufficientCollateral` returned if `use_as_collateral` ==false and insufficient collateralafter disabling `asset` as a collateral.\n    /// * `PSP22Error` returned if transfer of `asset` fails (also in the case if the `caller` != `on_behalf_of` and the caller has not enough allowance).\n    #[ink(message)]\n    fn borrow(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), LendingPoolError>;\n    /// Caller repays `amount` of `asset` `on_behalf_of`'s debt. Tokens are transferred from the `caller`.\n    ///\n    /// * `asset` - AccountId (aka address) of PSP22 that is repayed.\n    /// * `on_behalf_of` - AccountId (aka address) on behalf of who caller is repaying the debt.\n    /// * `amount` - the number of tokens to be repaid. If it is greater then debt_amount only debt_amount will be repaid.\n    /// * `data` - additional data currently unused.\n    ///\n    /// # Errors\n    /// * `AmountNotGreaterThanZero` returned if `amount`== 0.\n    /// * `AssetNotRegistered` returned if the `asset` is not registered in the `LendingPool`.\n    /// * `Inactive` returned if the reserve coresponding to the `asset` is inactive.\n    /// * `MinimalDebt` returned if after repaying the loan the debt of `on_bahalf_of` is smaller than minimal_debt and != 0.\n    /// * `PSP22Error` returned if transfer of the `asset` fails.\n    #[ink(message)]\n    fn repay(\n        &mut self,\n        asset: AccountId,\n        on_behalf_of: AccountId,\n        amount: Balance,\n        data: Vec<u8>,\n    ) -> Result<Balance, LendingPoolError>;\n\n    /// Caller perform `actions` on behalf of `on_behalf_of`.\n    ///\n    /// * `actions` - a vector of actions that should be performed.\n    /// * `on_behalf_of` - AccountId (aka address) on behalf of who caller is performing.\n    /// * `data` - additional data currently unused.\n    ///\n    /// # Errors\n    /// check 'Deposit', 'Withdraw', 'Borrow', 'Repay' for possible errors.\n    #[ink(message)]\n    fn multi_op(\n        &mut self,\n        actions: Vec<Action>,\n        on_behalf_of: AccountId,\n        data: Vec<u8>,\n    ) -> Result<(), LendingPoolError>;\n\n    /// is used by a liquidator to liquidate the uncollateralized position of another account\n    ///\n    /// * `liquidated_account` - AccountId (aka address) whose position should be liquidated. liquidated_account must be undercollateralized.\n    /// * `asset_to_repay` - AccountId (aka address) of PSP22 that liquidated_account has debt in.\n    /// * `asset_to_take` - AccountId (aka address) of PSP22 that liquidated_account has supplied and is using as collateral. This asset will be a liquidator reward i.e. liquidator will receive aTokens corresponding to this asset.\n    /// * `amount_to_repay` - the number of tokens to be repaid in absolute value (1USDT = 1_000_000, 1AZERO = 1_000_000_000_000). The minimum of amount_to_repay and `liquidated_account` debt will be repaid.\n    /// * `minimum_recieved_for_one_repaid_token_e12` - minimum amount of asset_to_take to be received by liquidator per 1 repaid token multiplied by 10^12. !Notice! In the case of AZERO 1 token is 10^-12 of AZERO and in the case of USDT 1 token is 10^-6 of USDT. The liquidator must be conscious and use absolute values.\n    /// * `data` - additional data, currently unused.\n    ///\n    /// # Errors\n    /// * `NoPriceFeed` returned if there is problem wirg oracle.\n    /// * `Collaterized` returned if the `liaudiated_account` is collaterized.\n    /// * `AssetNotRegistered` returned if the `asset_to_take` or `asset_to_repay` were not registered.\n    /// * `NothingToRepay` returned if the `liquidated_account` has no `asset_to_repay` debt.\n    /// * `NothingToCompensateWith` returned if the `liquidated_account` has no `asset_to_take` deposit.\n    /// * `TakingNotACollateral` returned if the `asset_to_take` is not used as collateral by `liqudiated_account`.\n    #[ink(message)]\n    fn liquidate(\n        &mut self,\n        liquidated_account: AccountId,\n        asset_to_repay: AccountId,\n        asset_to_take: AccountId,\n        amount_to_repay: Balance,\n        minimum_recieved_for_one_repaid_token_e12: u128,\n        data: Vec<u8>,\n    ) -> Result<(Balance, Balance), LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/lending_pool_flash.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::{\n    contract_ref, env::DefaultEnvironment, prelude::vec::Vec,\n    primitives::AccountId,\n};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::LendingPoolError;\n\npub type LendingPoolFlashRef =\n    contract_ref!(LendingPoolFlash, DefaultEnvironment);\n\n/// Trait containing flash_loan message. Used by **flash loaners**.\n#[ink::trait_definition]\npub trait LendingPoolFlash {\n    /// is used to perform a flash loan. 1) take a loan. 2) perform actions. 3) repay loan + fee. All in one tx.\n    ///\n    ///  * `receiver` - AccountId (aka address) of a contract that takes loan and will perform actions before rapaying loan. Must implement `FlashLoanReceiver`.\n    ///  * `assets` -  vec of PSP22 AccountId (aka address) that one wants to borrow\n    ///  * `amounts` -  vec of amounts that one wants to borrow, in the correspong order to `assets`\n    ///  * `receiver_params` -  additional data passed to receiver.\n    /// # Errors\n    /// * `AmountNotGreaterThanZero` returned  if for some i `amount[i]`== 0.\n    /// * `FlashLoanAmountsAssetsInconsistentLengths` returned when `assets`.len != `amounts`.len()\n    /// * `PSP22Error` if transfer fails\n    /// * `FlashLoanReceiverError` if call to `receiver` fails.\n    #[ink(message)]\n    fn flash_loan(\n        &mut self,\n        receiver: AccountId,\n        assets: Vec<AccountId>,\n        amounts: Vec<Balance>,\n        receiver_params: Vec<u8>,\n    ) -> Result<(), LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/lending_pool_maintain.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::{contract_ref, env::DefaultEnvironment, primitives::AccountId};\n\nuse crate::lending_pool::LendingPoolError;\n\npub type LendingPoolMaintainRef =\n    contract_ref!(LendingPoolMaintain, DefaultEnvironment);\n\n/// Trait containing messages that are used to maintain inetrest accumulation. Used by **maintainers**.\n#[ink::trait_definition]\npub trait LendingPoolMaintain {\n    /// is used by anyone to accumulate deposit and variable rate interests\n    ///\n    ///  * `asset` - AccountId (aka address) of asset of which interests should be accumulated\n    ///\n    /// # Errors None\n    #[ink(message)]\n    fn accumulate_interest(\n        &mut self,\n        asset: AccountId,\n    ) -> Result<(), LendingPoolError>;\n\n    /// is used by anyone to adjust interest's rate at the target utilization rate\n    ///\n    /// * `asset` - AccountId (aka address) of asset of which rate should be adjusted\n    /// * `guessed_index` - u32 of an index in the accumulated time-weighted utilization rate storage\n    /// that is guessed to be the one that should be used to adjust the rate (or is the closest one to the one supposed to be used)\n    ///  It must be index of entry that timestamp is at least smaller by interest_rate_model.minimal_time_between_adjustments from the last entry.\n    ///\n    /// # Errors\n    /// * `LendingPoolError::TwEntryInvalidIndex` returned if the index is invalid - points to a non existing entry or the entry's value is too recent.\n    /// * `LendingPoolError::TooEarlyToAdjustRate` returned if the attempt to adjust the rate is made earlier then the minimal time between adjustments.\n    #[ink(message)]\n    fn adjust_rate_at_target(\n        &mut self,\n        asset: AccountId,\n        guessed_index: u32,\n    ) -> Result<u64, LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/lending_pool_manage.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::{\n    AssetRules, InterestRateModelParams, ReserveRestrictions,\n};\nuse ink::{\n    contract_ref, env::DefaultEnvironment, prelude::string::String,\n    prelude::vec::Vec, primitives::AccountId,\n};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::{LendingPoolError, MarketRule, RuleId};\npub type LendingPoolManageRef =\n    contract_ref!(LendingPoolManage, DefaultEnvironment);\n\n#[derive(Debug, Default, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct SetReserveFeesArgs {\n    /// fee is used to accumulate accounts debt interest. The real rate is the current_borrow_rate * (1+fee). 10^6 =100%\n    pub debt_fee_e6: u32,\n    /// fee is used to accumulate accounts deposit interest. The real rate is the current_deposit_rate * (1-fee). 10^6 =100%\n    pub deposit_fee_e6: u32,\n}\n\n/// Trait containing `AccessControl` messages used to manage 'LendingPool' parameters. Used by **managers**.\n#[ink::trait_definition]\npub trait LendingPoolManage {\n    /// Sets `price_feed_provider` - a contract that implements PriceFeed and will be used to get prices from.\n    ///\n    /// * `price_feed_provider` AccountId (a.k.a. address) of a contract.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a PARAMETERS_ADMIN.\n    #[ink(message)]\n    fn set_price_feed_provider(\n        &mut self,\n        price_feed_provider: AccountId,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Sets `fee_reduction_provider` - a contract that implements FeeReduction and will be used to get fee reductions for given account.\n    ///\n    /// * `fee_reduction_provider` AccountId (a.k.a. address) of a contract.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a PARAMETERS_ADMIN.\n    #[ink(message)]\n    fn set_fee_reduction_provider(\n        &mut self,\n        fee_reduction_provider: AccountId,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Sets a `flash_loan_fee_e6`\n    ///\n    /// * `flash_loan_fee_e6` fee to set 1_000_000 = 100% fee.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a PARAMETERS_ADMIN.\n    #[ink(message)]\n    fn set_flash_loan_fee_e6(\n        &mut self,\n        flash_loan_fee_e6: u128,\n    ) -> Result<(), LendingPoolError>;\n\n    /// Registers new asset in the `LendingPool`'s storage and instaniates 'AToken' and 'VToken' for the reserve.\n    ///\n    /// * `asset` - `AccountId` of the registered asset\n    /// * `a_token_code_hash` - code hash that will be used to initialize `AToken`\n    /// * `v_token_code_hash` - code hash that will be used to initialize `vToken`\n    /// * `name` - name of the `asset`. It will be used to create names for `AToken` and `VToken`.     \n    /// * `symbol` - symbol of the `asset`. It will be used to create sumbol for `AToken` and `VToken`.     \n    /// * `decimals` - a decimal denominator of an asset (number already multiplied by 10^N where N is number of decimals)\n    /// * `asset_rules' - `asset`'s AssetRules that will be used in default market rule (id = 0).\n    /// * `maximal_total_deposit` - maximal allowed total deposit. None for uncapped.\n    /// * `maximal_total_debt` - maximal allowed total debt. None for uncapped.\n    /// * `minimal_collateral` - the required minimal deposit of the asset by account to turn asset to be collateral.\n    /// * `minimal_debt` - the minimal possible debt that can be taken by account.\n    /// * `interest_rate_model` - check InterestRateModelParams\n    /// * `income_for_suppliers_part_e6` - indicates which part of an income should suppliers be paid - in E6 notation (multiplied by 10^6)\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a ASSET_LISTING_ADMIN.\n    /// * `AlreadyRegistered` returned if asset was already registered.\n    /// * `InvalidAssetRule` returned if asset rule is invalid.\n    #[ink(message)]\n    #[allow(clippy::too_many_arguments)]\n    fn register_asset(\n        &mut self,\n        asset: AccountId,\n        a_token_code_hash: [u8; 32],\n        v_token_code_hash: [u8; 32],\n        name: String,\n        symbol: String,\n        decimals: u8,\n        asset_rules: AssetRules,\n        reserve_restrictions: ReserveRestrictions,\n        fees: SetReserveFeesArgs,\n        interest_rate_model_params: Option<InterestRateModelParams>,\n    ) -> Result<(), LendingPoolError>;\n\n    ///  activates or disactivates reserve\n    ///\n    ///  * `active` - true if reserve should be activated. False if reserve should be disactivated.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a EMERGENCY_ADMIN.\n    /// * `AlreadySet` returned if trying to set already set state.\n    #[ink(message)]\n    fn set_reserve_is_active(\n        &mut self,\n        asset: AccountId,\n        active: bool,\n    ) -> Result<(), LendingPoolError>;\n\n    ///  Freezes or unfreezes reserve\n    ///\n    ///  * `freeze` - true if reserve should be frozen. False if reserve should be unfrozen.\n    ///\n    /// # Errorsfrozenfrozen\n    /// * `AccessControl::MisingRole` returned if the caller is not a EMERGENCY_ADMIN.\n    /// * `AlreadySet` returned if trying to set already set state.\n    #[ink(message)]\n    fn set_reserve_is_frozen(\n        &mut self,\n        asset: AccountId,\n        freeze: bool,\n    ) -> Result<(), LendingPoolError>;\n\n    /// modifies ReserveParameters in the `LendingPool`'s storage\n    ///\n    ///  * `asset` - `AccountId` of the registered asset\n    ///  * `interest_rate_model` - targetted debt rates at utilization of 50%, 60%, 70%, 80%, 90%, 95% 100%\n    ///  * `income_for_suppliers_part_e6` - indicates which part of an income should suppliers be paid - in E6 notation (multiplied by 10^6)\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a PARAMETERS_ADMIN.\n    #[ink(message)]\n    fn set_interest_rate_model(\n        &mut self,\n        asset: AccountId,\n        interest_rate_model: InterestRateModelParams,\n    ) -> Result<(), LendingPoolError>;\n\n    #[ink(message)]\n    fn set_reserve_fees(\n        &mut self,\n        asset: AccountId,\n        reserve_fees: SetReserveFeesArgs,\n    ) -> Result<(), LendingPoolError>;\n\n    /// modifies ReserveRestricion in the `LendingPool`'s storage\n    ///\n    ///  * `asset` - `AccountId` of the registered asset\n    ///  * `maximal_total_deposit` - maximal allowed total deposit, If exceeded no more deposits are accepted. None for uncapped total deposit.\n    ///  * `maximal_total_debt` - maximal allowed total debt, If exceeded no more borrows are accepted. None for uncapped total debt.\n    ///  * `minimal_collateral` - the required minimal deposit of the asset by account to turn asset to be collateral.\n    ///  * `minimal_debt` - the minimal possible debt that can be taken by account.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a PARAMETERS_ADMIN.\n    #[ink(message)]\n    fn set_reserve_restrictions(\n        &mut self,\n        asset: AccountId,\n        reserve_restrictions: ReserveRestrictions,\n    ) -> Result<(), LendingPoolError>;\n\n    /// modifies the stablecoin debt rate\n    ///\n    ///  * `asset` - `AccountId` of the registered stable asset\n    ///  * `debt_rate_e18` - new debt rate\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a STABLECOIN_RATE_ADMIN.\n    /// * `AssetIsNotProtocolStablecoin` returned if `asset` is not abax native stablecoin.\n    #[ink(message)]\n    fn set_stablecoin_debt_rate_e18(\n        &mut self,\n        asset: AccountId,\n        debt_rate_e18: u64,\n    ) -> Result<(), LendingPoolError>;\n\n    /// adds new market rule at next martket rule id\n    ///\n    /// * `market_rule` - list of asset rules for that market rule\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a STABLECOIN_RATE_ADMIN.\n    /// * `InvalidAssetRule` returned if the `market_rule` contains invalid AssetRule.\n    #[ink(message)]\n    fn add_market_rule(\n        &mut self,\n        market_rule: MarketRule,\n    ) -> Result<(), LendingPoolError>;\n\n    /// modifies asset_rules of a given asset in the market rule identified by market_rule_id\n    ///\n    /// * `market_rule_id` - id of market rule which shuuld be modified\n    /// * `asset` - `AccountId` of a asset which rules should be modified\n    /// * `asset_rules' - `asset`'s AssetRules that will be used in  market rule with `market_rule_id`.\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a STABLECOIN_RATE_ADMIN.\n    /// * `InvalidAssetRule` returned if the asset_rules is invalid.\n    #[ink(message)]\n    fn modify_asset_rule(\n        &mut self,\n        market_rule_id: RuleId,\n        asset: AccountId,\n        asset_rules: AssetRules,\n    ) -> Result<(), LendingPoolError>;\n\n    /// collects income generated by the protocol\n    ///\n    /// * `assets` - vector of assets that income should be taken. If None takes income from all registered assets.\n    /// * `to` - account which will receive income.\n    ///\n    /// # Errors\n    /// * `AccessControl::MisingRole` returned if the caller is not a TREASURY.\n    #[ink(message)]\n    fn take_protocol_income(\n        &mut self,\n        assets: Option<Vec<AccountId>>,\n        to: AccountId,\n    ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/lending_pool_view.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::{\n    AccountConfig, AccountReserveData, InterestRateModel, ReserveAbacusTokens,\n    ReserveData, ReserveFees, ReserveIndexes, ReserveRestrictions, TwEntry,\n    TwIndex,\n};\nuse ink::{\n    contract_ref, env::DefaultEnvironment, prelude::vec::Vec,\n    primitives::AccountId,\n};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::{\n    DecimalMultiplier, LendingPoolError, MarketRule, RuleId,\n};\n\npub type LendingPoolViewRef =\n    contract_ref!(LendingPoolView, DefaultEnvironment);\n\n/// Trait containing non-mutable messages - this trait should not be called by other smart contracts.\n/// The main use of this trait is to read data from the `LendingPool`'s storage to the off-chain world.\n#[ink::trait_definition]\npub trait LendingPoolView {\n    #[ink(message)]\n    fn view_flash_loan_fee_e6(&self) -> u128;\n    #[ink(message)]\n    fn view_asset_id(&self, asset: AccountId) -> Option<RuleId>;\n    #[ink(message)]\n    fn view_registered_assets(&self) -> Vec<AccountId>;\n    #[ink(message)]\n    fn view_reserve_data(&self, asset: AccountId) -> Option<ReserveData>;\n    #[ink(message)]\n    fn view_unupdated_reserve_indexes(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveIndexes>;\n    #[ink(message)]\n    fn view_reserve_indexes(&self, asset: AccountId) -> Option<ReserveIndexes>;\n    #[ink(message)]\n    fn view_reserve_fees(&self, asset: AccountId) -> Option<ReserveFees>;\n    #[ink(message)]\n    fn view_interest_rate_model(\n        &self,\n        asset: AccountId,\n    ) -> Option<InterestRateModel>;\n    #[ink(message)]\n    fn view_reserve_restrictions(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveRestrictions>;\n    #[ink(message)]\n    fn view_reserve_tokens(\n        &self,\n        asset: AccountId,\n    ) -> Option<ReserveAbacusTokens>;\n    #[ink(message)]\n    fn view_reserve_decimal_multiplier(\n        &self,\n        asset: AccountId,\n    ) -> Option<DecimalMultiplier>;\n    #[ink(message)]\n    fn view_unupdated_account_reserve_data(\n        &self,\n        asset: AccountId,\n        account: AccountId,\n    ) -> AccountReserveData;\n    #[ink(message)]\n    fn view_account_reserve_data(\n        &self,\n        asset: AccountId,\n        account: AccountId,\n    ) -> AccountReserveData;\n    #[ink(message)]\n    fn view_account_config(&self, account: AccountId) -> AccountConfig;\n    #[ink(message)]\n    fn view_market_rule(&self, market_rule_id: RuleId) -> Option<MarketRule>;\n    #[ink(message)]\n    fn get_account_free_collateral_coefficient(\n        &self,\n        account_address: AccountId,\n    ) -> (bool, u128);\n\n    #[ink(message)]\n    fn view_protocol_income(\n        &self,\n        assets: Option<Vec<AccountId>>,\n    ) -> Vec<(AccountId, Balance)>;\n\n    #[ink(message)]\n    fn view_asset_tw_index(&self, asset: AccountId) -> Option<TwIndex>;\n\n    #[ink(message)]\n    fn view_asset_tw_entries(\n        &self,\n        asset: AccountId,\n        from: u32,\n        to: u32,\n    ) -> Vec<Option<TwEntry>>;\n\n    #[ink(message)]\n    fn view_tw_ur_from_period_longer_than(\n        &self,\n        period: u64,\n        asset: AccountId,\n        guessed_index: u32,\n    ) -> Result<u32, LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/traits/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod a_token_interface;\nmod lending_pool_actions;\nmod lending_pool_flash;\nmod lending_pool_maintain;\nmod lending_pool_manage;\nmod lending_pool_view;\nmod v_token_interface;\n\npub use a_token_interface::*;\npub use lending_pool_actions::*;\npub use lending_pool_flash::*;\npub use lending_pool_maintain::*;\npub use lending_pool_manage::*;\npub use lending_pool_view::*;\npub use v_token_interface::*;\n",
        "src/contract_modules/lending_pool/traits/v_token_interface.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::{contract_ref, env::DefaultEnvironment, primitives::AccountId};\nuse pendzl::traits::Balance;\n\nuse crate::lending_pool::LendingPoolError;\n\npub type LendingPoolVTokenInterfaceRef =\n    contract_ref!(LendingPoolVTokenInterface, DefaultEnvironment);\n\n/// Trait containing messages that are accessible to **VToken** - the PSP22 Wrapper of debts.\n#[ink::trait_definition]\npub trait LendingPoolVTokenInterface {\n    /// Returns LendingPool's total debt of accounts in the context of an underlying asset.\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to look up total  debt of.\n    ///\n    /// # Errors None\n    #[ink(message)]\n    fn total_debt_of(&self, underlying_asset: AccountId) -> Balance;\n    /// Returns the specified `account`'s  debt in the context of an `underlying_asset`.\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to look up account's  debt of.\n    /// * `account` - AccountId (aka address) of an account to look up  debt for.\n    ///\n    /// # Errors None\n    #[ink(message)]\n    fn account_debt_of(\n        &self,\n        underlying_asset: AccountId,\n        account: AccountId,\n    ) -> Balance;\n    /// Transfers an `amount` of  debt on the behalf of `from` to the account `to` in the context of an `underlying_asset`.\n    ///\n    /// * `underlying_asset` - AccountId (aka address) of an asset to transfer  debt from/to.\n    /// * `from` - AccountId (aka address) of an account to transfer from.\n    /// * `to` - AccountId (aka address) of an account to transfer to.\n    ///\n    /// On success a number of PSP22's `Transfer` events are emitted.\n    /// The number of events and their type/values depend on the interests that may be accrued both for `from` and `to` accounts.\n    ///\n    /// # Errors\n    /// * `TransfersDisabled` returned if deposit for given `underlying_asset` is disabled.\n    /// * `WrongCaller` returned if the caller is not an `underlying_asset`'s VToken contract.\n    /// * `InsufficientBalance` returned if there are not enough tokens on the the account Balance of `from`.\n    #[ink(message)]\n    fn transfer_debt_from_to(\n        &mut self,\n        underlying_asset: AccountId,\n        from: AccountId,\n        to: AccountId,\n        amount: Balance,\n    ) -> Result<(Balance, Balance), LendingPoolError>;\n}\n",
        "src/contract_modules/lending_pool/types.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse abax_library::structs::AssetRules;\nuse ink::prelude::vec::Vec;\n\n/// type used to represent market rule\npub type MarketRule = Vec<Option<AssetRules>>;\n/// type used to identigy rule\npub type RuleId = u32;\n\n/// type used to represent decimal multiplier\npub type DecimalMultiplier = u128;\n",
        "src/contract_modules/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std)]\n//! This crate provides the contract modules that are used in the abax protocol.\n//!\n//! Traits, evenets and errors define the interface of the contract module.\n//!\n//! Some modeules contain default implementations for the traits.\n\n/// A contract module that should be treated as a psp22 extension\n/// that allows for crating proxy tokens that represent Deposit or Debt of an underlying asset in the lending_pool.\npub mod abacus_token;\n/// A contract module that allows for tracking all accounts that interacted with the contract.\npub mod account_registrar;\n/// A DIA oracle contract module that allows for fetching the price of an asset.\n/// <https://github.com/diadata-org/dia-wasm-oracle>\npub mod dia_oracle;\n/// A dummy trait.\npub mod dummy;\n/// A contract module responsible for receiveing flash loans.\npub mod flash_loan_receiver;\n/// A contract module that allows for lending and borrowing of assets.\n/// It is the core module of the abax protocol.\npub mod lending_pool;\n/// A contract module that allows to get the asset price in the appropriate format.\n/// It is used by the lending_pool implementatoin.\npub mod price_feed;\n\n/// A contract module that allows to get the fee reductions for the given account.\n/// It is used by the lending_pool implementatoin.\npub mod fee_reduction;\n",
        "src/contract_modules/price_feed/errors.rs":"// SPDX-License-Identifier: BUSL-1.1\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum PriceFeedError {\n    /// The asset is not supported by the price feed.\n    NoSuchAsset,\n    /// The price feed is not available.\n    NoPriceFeed,\n}\n",
        "src/contract_modules/price_feed/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod errors;\nmod price_feed_trait;\n\npub use errors::*;\npub use price_feed_trait::*;\n",
        "src/contract_modules/price_feed/price_feed_trait.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::prelude::vec::Vec;\nuse ink::primitives::AccountId;\n\nuse ink::contract_ref;\nuse ink::env::DefaultEnvironment;\n\nuse super::PriceFeedError;\npub type PriceFeedRef = contract_ref!(PriceFeed, DefaultEnvironment);\n\n#[ink::trait_definition]\npub trait PriceFeed {\n    /// Returns the latest price of the given 'assets'.\n    #[ink(message)]\n    fn get_latest_prices(\n        &self,\n        assets: Vec<AccountId>,\n    ) -> Result<Vec<u128>, PriceFeedError>;\n}\n",
        "src/contracts/core/a_token/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"a_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/core/a_token/Cargo.toml":"[package]\nname = \"a_token\"\nversion = \"0.2.0\"\nauthors = [\"Konrad Wierzbik <konrad.wierzbik@gmail.com>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_impl\",\n    \"psp22_metadata\",\n    \"psp22_metadata_impl\",\n] }\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"a_token\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/core/a_token/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(PSP22, PSP22Metadata)]\n#[ink::contract]\npub mod a_token {\n    use abax_contracts::abacus_token::implementation::{\n        AbacusTokenImpl, AbacusTokenStorage,\n    };\n    use abax_contracts::abacus_token::{AbacusToken, TransferEventData};\n    use abax_contracts::lending_pool::{\n        LendingPoolATokenInterface, LendingPoolATokenInterfaceRef,\n    };\n    use ink::codegen::Env;\n    use ink::prelude::string::String;\n\n    use ink::codegen::TraitCallBuilder;\n    use pendzl::contracts::psp22;\n    use pendzl::contracts::psp22::PSP22Error;\n\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct AToken {\n        #[storage_field]\n        psp22: psp22::PSP22Data,\n        #[storage_field]\n        abacus_token: AbacusTokenStorage,\n        #[storage_field]\n        metadata: psp22::metadata::PSP22MetadataData,\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _balance_of(&self, owner: &AccountId) -> Balance {\n        let lending_pool: LendingPoolATokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        lending_pool\n            .call()\n            .account_deposit_of(self.abacus_token.underlying_asset, *owner)\n            .call_v1()\n            .invoke()\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _allowance(&self, owner: &AccountId, spender: &AccountId) -> Balance {\n        self.abacus_token\n            .allowances\n            .get((*owner, *spender))\n            .unwrap_or(0)\n    }\n    #[overrider(PSP22Internal)]\n    fn _total_supply(&self) -> Balance {\n        let lending_pool: LendingPoolATokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        lending_pool\n            .call()\n            .total_deposit_of(self.abacus_token.underlying_asset)\n            .call_v1()\n            .invoke()\n    }\n\n    #[overrider(PSP22)]\n    fn transfer_from(\n        &mut self,\n        from: AccountId,\n        to: AccountId,\n        value: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let caller = self.env().caller();\n        let allowance = psp22::PSP22Internal::_allowance(self, &from, &caller);\n\n        if allowance < value {\n            return Err(PSP22Error::InsufficientAllowance);\n        }\n\n        psp22::PSP22Internal::_decrease_allowance_from_to(\n            self, &from, &caller, &value,\n        )?;\n        psp22::PSP22Internal::_update(self, Some(&from), Some(&to), &value)?;\n        Ok(())\n    }\n\n    #[overrider(PSP22)]\n    fn transfer(\n        &mut self,\n        to: AccountId,\n        value: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let from = self.env().caller();\n        psp22::PSP22Internal::_update(self, Some(&from), Some(&to), &value)?;\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _update(\n        &mut self,\n        from: Option<&AccountId>,\n        to: Option<&AccountId>,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let mut lending_pool: LendingPoolATokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        let (mint_from_amount, mint_to_amount): (Balance, Balance) =\n            lending_pool\n                .call_mut()\n                .transfer_deposit_from_to(\n                    self.abacus_token.underlying_asset,\n                    *from.unwrap(),\n                    *to.unwrap(),\n                    *amount,\n                )\n                .call_v1()\n                .invoke()?;\n        // emitting accumulated interest events\n        if mint_from_amount > 0 {\n            self.env().emit_event(psp22::Transfer {\n                from: None,\n                to: from.copied(),\n                value: mint_from_amount,\n            });\n        }\n        if mint_to_amount > 0 {\n            self.env().emit_event(psp22::Transfer {\n                from: None,\n                to: to.copied(),\n                value: mint_to_amount,\n            });\n        }\n        // emitting transfer event\n        self.env().emit_event(psp22::Transfer {\n            from: from.copied(),\n            to: to.copied(),\n            value: *amount,\n        });\n\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _approve(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        self.abacus_token\n            .allowances\n            .insert((owner, spender), amount);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: *amount,\n        });\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _decrease_allowance_from_to(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let new_allowance = self\n            ._allowance(owner, spender)\n            .checked_sub(*amount)\n            .ok_or(PSP22Error::InsufficientAllowance)?;\n        self.abacus_token\n            .allowances\n            .insert((*owner, *spender), &new_allowance);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: new_allowance,\n        });\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _increase_allowance_from_to(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let new_allowance = self\n            ._allowance(owner, spender)\n            .checked_add(*amount)\n            .ok_or(PSP22Error::Custom(\"Overflow\".into()))?;\n        self.abacus_token\n            .allowances\n            .insert((*owner, *spender), &new_allowance);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: new_allowance,\n        });\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _mint_to(\n        &mut self,\n        to: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        panic!(\"Unsupported operation!\")\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _burn_from(\n        &mut self,\n        from: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        panic!(\"Unsupported operation!\")\n    }\n\n    impl AbacusTokenImpl for AToken {}\n    impl AbacusToken for AToken {\n        #[ink(message)]\n        fn emit_transfer_events(\n            &mut self,\n            transfer_event_data: Vec<TransferEventData>,\n        ) -> Result<(), PSP22Error> {\n            AbacusTokenImpl::emit_transfer_events(self, transfer_event_data)\n        }\n\n        #[ink(message)]\n        fn emit_transfer_event_and_decrease_allowance(\n            &mut self,\n            transfer_event_data: TransferEventData,\n            from: AccountId,\n            to: AccountId,\n            decrease_allowance_by: Balance,\n        ) -> Result<(), PSP22Error> {\n            AbacusTokenImpl::emit_transfer_event_and_decrease_allowance(\n                self,\n                transfer_event_data,\n                from,\n                to,\n                decrease_allowance_by,\n            )\n        }\n\n        #[ink(message)]\n        fn get_lending_pool(&self) -> AccountId {\n            AbacusTokenImpl::get_lending_pool(self)\n        }\n    }\n\n    impl AToken {\n        #[ink(constructor)]\n        pub fn new(\n            name: String,\n            symbol: String,\n            decimal: u8,\n            lending_pool: AccountId,\n            underlying_asset: AccountId,\n        ) -> Self {\n            let mut instance = Self::default();\n            instance.metadata.name.set(&name.into());\n            instance.metadata.symbol.set(&symbol.into());\n            instance.metadata.decimals.set(&decimal);\n\n            instance.abacus_token.lending_pool = lending_pool;\n            instance.abacus_token.underlying_asset = underlying_asset;\n            instance\n        }\n\n        #[ink(message)]\n        pub fn own_code_hash(&mut self) -> Hash {\n            self.env().own_code_hash().unwrap_or_else(|err| {\n                panic!(\"contract should have a code hash: {:?}\", err)\n            })\n        }\n    }\n}\n",
        "src/contracts/core/lending_pool/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"lending_pool\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/core/lending_pool/Cargo.toml":"[package]\nname = \"lending_pool\"\nversion = \"0.2.0\"\nauthors = [\"Konrad Wierzbik <konrad.wierzbik@gmail.com>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"access_control\",\n    \"access_control_impl\",\n    \"set_code_hash_impl\",\n] }\n\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n[lib]\nname = \"lending_pool\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n\n    \"pendzl/std\",\n]\nink-as-dependency = []\n\n[profile.dev]\ncodegen-units = 16 # Use slightly better optimizations.\n",
        "src/contracts/core/lending_pool/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n//! #LendingPoolContract\n//!\n//! This is the core contract of Abacus Lending Protocol that provide accounts the follwoing functionalities:\n//!   deposit, withdraw, borrow_variable, repay_variable, borrow_stable, repay_stable\n//!\n//! The remaining contracts are Abacus Tokens that are tokenization of account deposits and debts.\n\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(AccessControl, SetCodeHash)]\n#[ink::contract]\npub mod lending_pool {\n    use abax_contracts::account_registrar::AccountRegistrarView;\n    use abax_contracts::lending_pool::SetReserveFeesArgs;\n    use abax_contracts::lending_pool::{\n        events::FlashLoanFeeChanged, DecimalMultiplier,\n        LendingPoolATokenInterface, LendingPoolActions, LendingPoolError,\n        LendingPoolFlash, LendingPoolMaintain, LendingPoolManage,\n        LendingPoolVTokenInterface, LendingPoolView, MarketRule, RuleId,\n    };\n    use abax_contracts::{\n        account_registrar::implementation::AccountRegistrar,\n        lending_pool::implementation::{\n            LendingPoolATokenInterfaceImpl, LendingPoolBorrowImpl,\n            LendingPoolDepositImpl, LendingPoolFlashImpl,\n            LendingPoolLiquidateImpl, LendingPoolMaintainImpl,\n            LendingPoolMultiOpImpl, LendingPoolStorage,\n            LendingPoolVTokenInterfaceImpl, LendingPoolViewImpl,\n            {LendingPoolManageImpl, ManageInternal},\n        },\n    };\n    use abax_library::structs::{\n        AccountConfig, AccountReserveData, Action, AssetRules,\n        InterestRateModel, InterestRateModelParams, ReserveAbacusTokens,\n        ReserveData, ReserveFees, ReserveIndexes, ReserveRestrictions, TwEntry,\n        TwIndex,\n    };\n    use ink::{env::DefaultEnvironment, prelude::vec::Vec};\n\n    use pendzl::{contracts::access_control, traits::String};\n    /// storage of the contract\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct LendingPool {\n        #[storage_field]\n        access: access_control::AccessControlData,\n        #[storage_field]\n        lending_pool: LendingPoolStorage,\n        #[storage_field]\n        account_registrar: AccountRegistrar,\n    }\n\n    impl LendingPoolDepositImpl for LendingPool {}\n    impl LendingPoolBorrowImpl for LendingPool {}\n    impl LendingPoolLiquidateImpl for LendingPool {}\n    impl LendingPoolMultiOpImpl for LendingPool {}\n\n    impl LendingPoolActions for LendingPool {\n        #[ink(message)]\n        fn choose_market_rule(\n            &mut self,\n            market_rule_id: RuleId,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolBorrowImpl::choose_market_rule(self, market_rule_id)\n        }\n        #[ink(message)]\n        fn set_as_collateral(\n            &mut self,\n            asset: AccountId,\n            use_as_collateral: bool,\n        ) -> Result<(), LendingPoolError> {\n            self.account_registrar\n                .ensure_registered(&self.env().caller());\n            LendingPoolBorrowImpl::set_as_collateral(\n                self,\n                asset,\n                use_as_collateral,\n            )\n        }\n        #[ink(message)]\n        fn deposit(\n            &mut self,\n            asset: AccountId,\n            on_behalf_of: AccountId,\n            amount: Balance,\n            data: Vec<u8>,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolDepositImpl::deposit(\n                self,\n                asset,\n                on_behalf_of,\n                amount,\n                data,\n            )\n        }\n        #[ink(message)]\n        fn withdraw(\n            &mut self,\n            asset: AccountId,\n            on_behalf_of: AccountId,\n            amount: Balance,\n            data: Vec<u8>,\n        ) -> Result<Balance, LendingPoolError> {\n            LendingPoolDepositImpl::withdraw(\n                self,\n                asset,\n                on_behalf_of,\n                amount,\n                data,\n            )\n        }\n\n        #[ink(message)]\n        fn borrow(\n            &mut self,\n            asset: AccountId,\n            on_behalf_of: AccountId,\n            amount: Balance,\n            data: Vec<u8>,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolBorrowImpl::borrow(\n                self,\n                asset,\n                on_behalf_of,\n                amount,\n                data,\n            )\n        }\n        #[ink(message)]\n        fn repay(\n            &mut self,\n            asset: AccountId,\n            on_behalf_of: AccountId,\n            amount: Balance,\n            data: Vec<u8>,\n        ) -> Result<Balance, LendingPoolError> {\n            LendingPoolBorrowImpl::repay(\n                self,\n                asset,\n                on_behalf_of,\n                amount,\n                data,\n            )\n        }\n\n        #[ink(message)]\n        fn multi_op(\n            &mut self,\n            actions: Vec<Action>,\n            on_behalf_of: AccountId,\n            data: Vec<u8>,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolMultiOpImpl::multi_op(self, actions, on_behalf_of, data)\n        }\n\n        #[ink(message)]\n        fn liquidate(\n            &mut self,\n            liquidated_account: AccountId,\n            asset_to_repay: AccountId,\n            asset_to_take: AccountId,\n            amount_to_repay: Balance,\n            minimum_recieved_for_one_repaid_token_e18: u128,\n            #[allow(unused_variables)] data: Vec<u8>,\n        ) -> Result<(Balance, Balance), LendingPoolError> {\n            let res = LendingPoolLiquidateImpl::liquidate(\n                self,\n                liquidated_account,\n                asset_to_repay,\n                asset_to_take,\n                amount_to_repay,\n                minimum_recieved_for_one_repaid_token_e18,\n                data,\n            )?;\n\n            Ok(res)\n        }\n    }\n\n    impl LendingPoolFlashImpl for LendingPool {}\n    impl LendingPoolFlash for LendingPool {\n        #[ink(message)]\n        fn flash_loan(\n            &mut self,\n            receiver: AccountId,\n            assets: Vec<AccountId>,\n            amounts: Vec<Balance>,\n            receiver_params: Vec<u8>,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolFlashImpl::flash_loan(\n                self,\n                receiver,\n                assets,\n                amounts,\n                receiver_params,\n            )\n        }\n    }\n\n    impl LendingPoolMaintainImpl for LendingPool {}\n    impl LendingPoolMaintain for LendingPool {\n        #[ink(message)]\n        fn accumulate_interest(\n            &mut self,\n            asset: AccountId,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolMaintainImpl::accumulate_interest(self, asset)\n        }\n\n        #[ink(message)]\n        fn adjust_rate_at_target(\n            &mut self,\n            asset: AccountId,\n            guessed_index: u32,\n        ) -> Result<u64, LendingPoolError> {\n            LendingPoolMaintainImpl::adjust_rate_at_target(\n                self,\n                asset,\n                guessed_index,\n            )\n        }\n    }\n    impl ManageInternal for LendingPool {}\n    impl LendingPoolManageImpl for LendingPool {}\n    impl LendingPoolManage for LendingPool {\n        #[ink(message)]\n        fn set_price_feed_provider(\n            &mut self,\n            price_feed_provider: AccountId,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_price_feed_provider(\n                self,\n                price_feed_provider,\n            )\n        }\n\n        #[ink(message)]\n        fn set_fee_reduction_provider(\n            &mut self,\n            fee_reduction_provider: AccountId,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_fee_reduction_provider(\n                self,\n                fee_reduction_provider,\n            )\n        }\n\n        #[ink(message)]\n        fn set_flash_loan_fee_e6(\n            &mut self,\n            flash_loan_fee_e6: u128,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_flash_loan_fee_e6(\n                self,\n                flash_loan_fee_e6,\n            )\n        }\n\n        #[ink(message)]\n        fn register_asset(\n            &mut self,\n            asset: AccountId,\n            a_token_code_hash: [u8; 32],\n            v_token_code_hash: [u8; 32],\n            name: String,\n            symbol: String,\n            decimals: u8,\n            asset_rules: AssetRules,\n            reserve_restrictions: ReserveRestrictions,\n            reserve_fees: SetReserveFeesArgs,\n            interest_rate_model: Option<InterestRateModelParams>,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::register_asset(\n                self,\n                asset,\n                a_token_code_hash,\n                v_token_code_hash,\n                name,\n                symbol,\n                decimals,\n                asset_rules,\n                reserve_restrictions,\n                reserve_fees,\n                interest_rate_model,\n            )\n        }\n\n        #[ink(message)]\n        fn set_reserve_is_active(\n            &mut self,\n            asset: AccountId,\n            active: bool,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_reserve_is_active(self, asset, active)\n        }\n\n        #[ink(message)]\n        fn set_reserve_is_frozen(\n            &mut self,\n            asset: AccountId,\n            freeze: bool,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_reserve_is_frozen(self, asset, freeze)\n        }\n\n        #[ink(message)]\n        fn set_interest_rate_model(\n            &mut self,\n            asset: AccountId,\n            interest_rate_model: InterestRateModelParams,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_interest_rate_model(\n                self,\n                asset,\n                interest_rate_model,\n            )\n        }\n\n        #[ink(message)]\n        fn set_reserve_restrictions(\n            &mut self,\n            asset: AccountId,\n            reserve_restrictions: ReserveRestrictions,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_reserve_restrictions(\n                self,\n                asset,\n                reserve_restrictions,\n            )\n        }\n\n        #[ink(message)]\n        fn set_reserve_fees(\n            &mut self,\n            asset: AccountId,\n            reserve_fees: SetReserveFeesArgs,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_reserve_fees(self, asset, reserve_fees)\n        }\n\n        #[ink(message)]\n        fn add_market_rule(\n            &mut self,\n            market_rule: MarketRule,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::add_market_rule(self, market_rule)\n        }\n\n        #[ink(message)]\n        fn modify_asset_rule(\n            &mut self,\n            market_rule_id: RuleId,\n            asset: AccountId,\n            asset_rules: AssetRules,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::modify_asset_rule(\n                self,\n                market_rule_id,\n                asset,\n                asset_rules,\n            )\n        }\n\n        #[ink(message)]\n        fn take_protocol_income(\n            &mut self,\n            assets: Option<Vec<AccountId>>,\n            to: AccountId,\n        ) -> Result<Vec<(AccountId, Balance)>, LendingPoolError> {\n            LendingPoolManageImpl::take_protocol_income(self, assets, to)\n        }\n\n        #[ink(message)]\n        fn set_stablecoin_debt_rate_e18(\n            &mut self,\n            asset: AccountId,\n            debt_rate_e18: u64,\n        ) -> Result<(), LendingPoolError> {\n            LendingPoolManageImpl::set_stablecoin_debt_rate_e18(\n                self,\n                asset,\n                debt_rate_e18,\n            )\n        }\n    }\n    impl LendingPoolViewImpl for LendingPool {}\n    impl LendingPoolView for LendingPool {\n        #[ink(message)]\n        fn view_flash_loan_fee_e6(&self) -> u128 {\n            LendingPoolViewImpl::view_flash_loan_fee_e6(self)\n        }\n        #[ink(message)]\n        fn view_asset_id(&self, account: AccountId) -> Option<RuleId> {\n            LendingPoolViewImpl::view_asset_id(self, account)\n        }\n\n        #[ink(message)]\n        fn view_registered_assets(&self) -> Vec<AccountId> {\n            LendingPoolViewImpl::view_registered_assets(self)\n        }\n        #[ink(message)]\n        fn view_reserve_data(&self, asset: AccountId) -> Option<ReserveData> {\n            LendingPoolViewImpl::view_reserve_data(self, asset)\n        }\n        #[ink(message)]\n        fn view_unupdated_reserve_indexes(\n            &self,\n            asset: AccountId,\n        ) -> Option<ReserveIndexes> {\n            LendingPoolViewImpl::view_unupdated_reserve_indexes(self, asset)\n        }\n        #[ink(message)]\n        fn view_interest_rate_model(\n            &self,\n            asset: AccountId,\n        ) -> Option<InterestRateModel> {\n            LendingPoolViewImpl::view_interest_rate_model(self, asset)\n        }\n        #[ink(message)]\n        fn view_reserve_restrictions(\n            &self,\n            asset: AccountId,\n        ) -> Option<ReserveRestrictions> {\n            LendingPoolViewImpl::view_reserve_restrictions(self, asset)\n        }\n        #[ink(message)]\n        fn view_reserve_tokens(\n            &self,\n            asset: AccountId,\n        ) -> Option<ReserveAbacusTokens> {\n            LendingPoolViewImpl::view_reserve_tokens(self, asset)\n        }\n        #[ink(message)]\n        fn view_reserve_decimal_multiplier(\n            &self,\n            asset: AccountId,\n        ) -> Option<DecimalMultiplier> {\n            LendingPoolViewImpl::view_reserve_decimal_multiplier(self, asset)\n        }\n        #[ink(message)]\n        fn view_reserve_indexes(\n            &self,\n            asset: AccountId,\n        ) -> Option<ReserveIndexes> {\n            LendingPoolViewImpl::view_reserve_indexes(self, asset)\n        }\n\n        #[ink(message)]\n        fn view_reserve_fees(&self, asset: AccountId) -> Option<ReserveFees> {\n            LendingPoolViewImpl::view_reserve_fees(self, asset)\n        }\n\n        #[ink(message)]\n        fn view_unupdated_account_reserve_data(\n            &self,\n            asset: AccountId,\n            account: AccountId,\n        ) -> AccountReserveData {\n            LendingPoolViewImpl::view_unupdated_account_reserve_data(\n                self, asset, account,\n            )\n        }\n        #[ink(message)]\n        fn view_account_reserve_data(\n            &self,\n            asset: AccountId,\n            account: AccountId,\n        ) -> AccountReserveData {\n            LendingPoolViewImpl::view_account_reserve_data(self, asset, account)\n        }\n        #[ink(message)]\n        fn view_account_config(&self, account: AccountId) -> AccountConfig {\n            LendingPoolViewImpl::view_account_config(self, account)\n        }\n        #[ink(message)]\n        fn view_market_rule(\n            &self,\n            market_rule_id: RuleId,\n        ) -> Option<MarketRule> {\n            LendingPoolViewImpl::view_market_rule(self, market_rule_id)\n        }\n        #[ink(message)]\n        fn get_account_free_collateral_coefficient(\n            &self,\n            account_address: AccountId,\n        ) -> (bool, u128) {\n            LendingPoolViewImpl::get_account_free_collateral_coefficient(\n                self,\n                account_address,\n            )\n        }\n\n        #[ink(message)]\n        fn view_protocol_income(\n            &self,\n            assets: Option<Vec<AccountId>>,\n        ) -> Vec<(AccountId, Balance)> {\n            LendingPoolViewImpl::view_protocol_income(self, assets)\n        }\n\n        #[ink(message)]\n        fn view_asset_tw_index(&self, asset: AccountId) -> Option<TwIndex> {\n            LendingPoolViewImpl::view_asset_tw_index(self, asset)\n        }\n        #[ink(message)]\n        fn view_asset_tw_entries(\n            &self,\n            asset: AccountId,\n            from: u32,\n            to: u32,\n        ) -> Vec<Option<TwEntry>> {\n            LendingPoolViewImpl::view_asset_tw_entries(self, asset, from, to)\n        }\n\n        #[ink(message)]\n        fn view_tw_ur_from_period_longer_than(\n            &self,\n            period: u64,\n            asset: AccountId,\n            guessed_index: u32,\n        ) -> Result<u32, LendingPoolError> {\n            LendingPoolViewImpl::view_tw_ur_from_period_longer_than(\n                self,\n                period,\n                asset,\n                guessed_index,\n            )\n        }\n    }\n\n    impl AccountRegistrarView for LendingPool {\n        #[ink(message)]\n        fn view_counter_to_account(&self, counter: u128) -> Option<AccountId> {\n            self.account_registrar.counter_to_account.get(counter)\n        }\n        #[ink(message)]\n        fn view_account_to_counter(&self, account: AccountId) -> Option<u128> {\n            self.account_registrar.account_to_counter.get(account)\n        }\n        #[ink(message)]\n        fn view_next_counter(&self) -> u128 {\n            self.account_registrar.next_counter\n        }\n    }\n\n    impl LendingPoolATokenInterfaceImpl for LendingPool {}\n    impl LendingPoolATokenInterface for LendingPool {\n        #[ink(message)]\n        fn total_deposit_of(&self, underlying_asset: AccountId) -> Balance {\n            LendingPoolATokenInterfaceImpl::total_deposit_of(\n                self,\n                underlying_asset,\n            )\n        }\n        #[ink(message)]\n        fn account_deposit_of(\n            &self,\n            underlying_asset: AccountId,\n            account: AccountId,\n        ) -> Balance {\n            LendingPoolATokenInterfaceImpl::account_deposit_of(\n                self,\n                underlying_asset,\n                account,\n            )\n        }\n        #[ink(message)]\n        fn transfer_deposit_from_to(\n            &mut self,\n            underlying_asset: AccountId,\n            from: AccountId,\n            to: AccountId,\n            amount: Balance,\n        ) -> Result<(Balance, Balance), LendingPoolError> {\n            LendingPoolATokenInterfaceImpl::transfer_deposit_from_to(\n                self,\n                underlying_asset,\n                from,\n                to,\n                amount,\n            )\n        }\n    }\n\n    impl LendingPoolVTokenInterfaceImpl for LendingPool {}\n    impl LendingPoolVTokenInterface for LendingPool {\n        #[ink(message)]\n        fn total_debt_of(&self, underlying_asset: AccountId) -> Balance {\n            LendingPoolVTokenInterfaceImpl::total_debt_of(\n                self,\n                underlying_asset,\n            )\n        }\n        #[ink(message)]\n        fn account_debt_of(\n            &self,\n            underlying_asset: AccountId,\n            account: AccountId,\n        ) -> Balance {\n            LendingPoolVTokenInterfaceImpl::account_debt_of(\n                self,\n                underlying_asset,\n                account,\n            )\n        }\n        #[ink(message)]\n        fn transfer_debt_from_to(\n            &mut self,\n            underlying_asset: AccountId,\n            from: AccountId,\n            to: AccountId,\n            amount: Balance,\n        ) -> Result<(Balance, Balance), LendingPoolError> {\n            LendingPoolVTokenInterfaceImpl::transfer_debt_from_to(\n                self,\n                underlying_asset,\n                from,\n                to,\n                amount,\n            )\n        }\n    }\n\n    impl LendingPool {\n        #[ink(constructor)]\n        pub fn new(admin: AccountId) -> Self {\n            let mut instance = Self::default();\n            instance.lending_pool.next_asset_id.set(&0);\n            instance.lending_pool.next_rule_id.set(&0);\n            instance.lending_pool.flash_loan_fee_e6.set(&1000);\n            ink::env::emit_event::<DefaultEnvironment, FlashLoanFeeChanged>(\n                FlashLoanFeeChanged {\n                    flash_loan_fee_e6: 1000,\n                },\n            );\n            instance\n                ._grant_role(Self::_default_admin(), Some(admin))\n                .expect(\"default admin role should be granted\");\n            instance\n        }\n    }\n}\n",
        "src/contracts/core/price_feed_provider/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"price_feed_provider\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/core/price_feed_provider/Cargo.toml":"[package]\nname = \"price_feed_provider\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"access_control\",\n    \"access_control_impl\",\n] }\n\n\nabax_library = { version = \"0.3.0\", default-features = false }\nabax_contracts = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"price_feed_provider\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/core/price_feed_provider/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(AccessControl)]\n#[ink::contract]\npub mod price_feed_provider {\n    use abax_contracts::dia_oracle::{OracleGetters, OracleGettersRef};\n    use abax_contracts::price_feed::{PriceFeed, PriceFeedError};\n    use ink::codegen::TraitCallBuilder;\n    use ink::prelude::string::String;\n    use ink::prelude::{vec::Vec, *};\n\n    use ink::storage::{Lazy, Mapping};\n\n    use pendzl::contracts::access_control;\n    const PARAMETERS_ADMIN: RoleType = ink::selector_id!(\"PARAMETERS_ADMIN\"); // 368_001_360_u32\n\n    #[ink(storage)]\n    #[derive(StorageFieldGetter, Default)]\n    pub struct PriceFeedProvider {\n        #[storage_field]\n        access: access_control::AccessControlData,\n        oracle: Lazy<OracleGettersRef>,\n        account_to_symbol: Mapping<AccountId, String>,\n    }\n\n    impl PriceFeedProvider {\n        #[ink(constructor)]\n        pub fn new(oracle: AccountId, admin: AccountId) -> Self {\n            let mut instance: PriceFeedProvider = Default::default();\n            instance\n                ._grant_role(Self::_default_admin(), Some(admin))\n                .expect(\"default admin role should be granted\");\n            let oracle_ref: OracleGettersRef = oracle.into();\n            instance.oracle.set(&oracle_ref);\n            instance\n        }\n\n        #[ink(message)]\n        pub fn set_account_symbol(\n            &mut self,\n            asset: AccountId,\n            symbol: String,\n        ) -> Result<(), AccessControlError> {\n            let caller = Self::env().caller();\n            self._ensure_has_role(PARAMETERS_ADMIN, Some(caller))?;\n\n            self.account_to_symbol.insert(asset, &symbol);\n            Ok(())\n        }\n\n        #[ink(message)]\n        pub fn get_account_symbol(\n            &mut self,\n            asset: AccountId,\n        ) -> Option<String> {\n            self.account_to_symbol.get(asset)\n        }\n    }\n\n    impl PriceFeed for PriceFeedProvider {\n        #[ink(message)]\n        fn get_latest_prices(\n            &self,\n            assets: Vec<AccountId>,\n        ) -> Result<Vec<u128>, PriceFeedError> {\n            let mut result: Vec<u128> = vec![];\n            let mut symbols: Vec<String> = vec![];\n\n            for asset in assets {\n                let symbol = self\n                    .account_to_symbol\n                    .get(asset)\n                    .ok_or(PriceFeedError::NoSuchAsset)?;\n                symbols.push(symbol)\n            }\n            let mut oracle: OracleGettersRef = self.oracle.get().unwrap();\n            for res in oracle\n                .call_mut()\n                .get_latest_prices(symbols)\n                .call_v1()\n                .invoke()\n            {\n                match res {\n                    Some(r) => result.push(r.1),\n                    None => return Err(PriceFeedError::NoPriceFeed),\n                }\n            }\n            Ok(result)\n        }\n    }\n}\n",
        "src/contracts/core/stable_token/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"stable_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/core/stable_token/Cargo.toml":"[package]\nname = \"stable_token\"\nversion = \"0.2.0\"\nauthors = [\"Konrad Wierzbik <konrad.wierzbik@gmail.com>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_impl\",\n    \"psp22_metadata\",\n    \"psp22_metadata_impl\",\n    \"psp22_mintable\",\n    \"psp22_mintable_impl\",\n    \"psp22_burnable\",\n    \"psp22_burnable_impl\",\n    \"access_control\",\n    \"access_control_impl\",\n] }\n\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"stable_token\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/core/stable_token/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(\n    PSP22,\n    PSP22Metadata,\n    AccessControl,\n    PSP22Mintable,\n    PSP22Burnable\n)]\n#[ink::contract]\npub mod stable_token {\n    use ink::prelude::string::String;\n\n    use abax_contracts::lending_pool::{BURNER, MINTER};\n    use pendzl::contracts::access_control;\n    use pendzl::contracts::psp22;\n    use pendzl::contracts::psp22::metadata;\n    use pendzl::contracts::psp22::PSP22Error;\n\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct StableToken {\n        #[storage_field]\n        access: access_control::AccessControlData,\n        #[storage_field]\n        psp22: psp22::PSP22Data,\n        #[storage_field]\n        metadata: metadata::PSP22MetadataData,\n    }\n\n    impl StableToken {\n        #[ink(constructor)]\n        pub fn new(name: String, symbol: String, decimal: u8) -> Self {\n            let mut instance = Self::default();\n            let caller = instance.env().caller();\n            instance.metadata.name.set(&name.into());\n            instance.metadata.symbol.set(&symbol.into());\n            instance.metadata.decimals.set(&decimal);\n            instance\n                ._grant_role(Self::_default_admin(), Some(caller))\n                .expect(\"caller should become admin\");\n            instance\n        }\n    }\n\n    #[overrider(PSP22Mintable)]\n    pub fn mint(\n        &mut self,\n        to: AccountId,\n        amount: Balance,\n    ) -> Result<(), PSP22Error> {\n        self._ensure_has_role(MINTER, Some(self.env().caller()))?;\n        psp22::PSP22Internal::_mint_to(self, &to, &amount)\n    }\n\n    #[overrider(PSP22Burnable)]\n    pub fn burn(\n        &mut self,\n        from: AccountId,\n        amount: Balance,\n    ) -> Result<(), PSP22Error> {\n        self._ensure_has_role(BURNER, Some(self.env().caller()))?;\n        psp22::PSP22Internal::_burn_from(self, &from, &amount)\n    }\n\n    #[overrider(Internal)]\n    fn _emit_transfer_event(\n        &self,\n        from: Option<AccountId>,\n        to: Option<AccountId>,\n        amount: Balance,\n    ) {\n        self.env().emit_event(psp22::Transfer {\n            from,\n            to,\n            value: amount,\n        })\n    }\n    #[overrider(Internal)]\n    fn _emit_approval_event(\n        &self,\n        owner: AccountId,\n        spender: AccountId,\n        amount: Balance,\n    ) {\n        self.env().emit_event(psp22::Approval {\n            owner,\n            spender,\n            value: amount,\n        })\n    }\n}\n",
        "src/contracts/core/v_token/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"v_token\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/core/v_token/Cargo.toml":"[package]\nname = \"v_token\"\nversion = \"0.2.0\"\nauthors = [\"Konrad Wierzbik <konrad.wierzbik@gmail.com>\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_impl\",\n    \"psp22_metadata\",\n    \"psp22_metadata_impl\",\n] }\n\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"v_token\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/core/v_token/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(PSP22, PSP22Metadata)]\n#[ink::contract]\npub mod v_token {\n    use abax_contracts::abacus_token::implementation::{\n        AbacusTokenImpl, AbacusTokenStorage,\n    };\n    use abax_contracts::{\n        abacus_token::{AbacusToken, TransferEventData},\n        lending_pool::{\n            LendingPoolVTokenInterface, LendingPoolVTokenInterfaceRef,\n        },\n    };\n    use ink::codegen::Env;\n    use ink::codegen::TraitCallBuilder;\n    use ink::prelude::string::String;\n\n    use pendzl::contracts::psp22::{self, PSP22Error};\n\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct VToken {\n        #[storage_field]\n        psp22: psp22::PSP22Data,\n        #[storage_field]\n        abacus_token: AbacusTokenStorage,\n        #[storage_field]\n        metadata: psp22::metadata::PSP22MetadataData,\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _balance_of(&self, owner: &AccountId) -> Balance {\n        let lending_pool: LendingPoolVTokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        lending_pool\n            .call()\n            .account_debt_of(self.abacus_token.underlying_asset, *owner)\n            .call_v1()\n            .invoke()\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _allowance(&self, owner: &AccountId, spender: &AccountId) -> Balance {\n        self.abacus_token\n            .allowances\n            .get((*owner, *spender))\n            .unwrap_or(0)\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _decrease_allowance_from_to(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let new_allowance = self\n            ._allowance(owner, spender)\n            .checked_sub(*amount)\n            .ok_or(PSP22Error::InsufficientAllowance)?;\n        self.abacus_token\n            .allowances\n            .insert((*owner, *spender), &new_allowance);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: new_allowance,\n        });\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _increase_allowance_from_to(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let new_allowance = self\n            ._allowance(owner, spender)\n            .checked_add(*amount)\n            .ok_or(PSP22Error::Custom(\"Overflow\".into()))?;\n        self.abacus_token\n            .allowances\n            .insert((*owner, *spender), &new_allowance);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: new_allowance,\n        });\n        Ok(())\n    }\n\n    /// Transfers `value` amount of tokens from the caller's account to account `to`\n    /// with additional `data` in unspecified format.\n    ///\n    /// On success a `Transfer` event is emitted.\n    ///\n    /// # Errors\n    ///\n    /// Returns `InsufficientBalance` error if there are not enough tokens on\n    /// the caller's account Balance.\n    ///\n    /// !!!IMPORTANT!!!\n    /// Returns `InsufficientAllowance` error if there are not enough tokens allowed\n    ///  for the caller to !!! TRANSFER TO `to` !!!\n    #[overrider(PSP22)]\n    fn transfer(\n        &mut self,\n        to: AccountId,\n        value: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let from: AccountId = self.env().caller();\n        let allowance = psp22::PSP22Internal::_allowance(self, &to, &from);\n        if allowance < value {\n            return Err(PSP22Error::InsufficientAllowance);\n        }\n\n        psp22::PSP22Internal::_decrease_allowance_from_to(\n            self, &to, &from, &value,\n        )?;\n        psp22::PSP22Internal::_update(self, Some(&from), Some(&to), &value)?;\n        Ok(())\n    }\n    /// Transfers `value` tokens on the behalf of `from` to the account `to`\n    /// with additional `data` in unspecified format.\n    ///\n    /// This can be used to allow a contract to transfer tokens on ones behalf and/or\n    /// to charge fees in sub-currencies, for example.\n    ///\n    /// On success a `Transfer` and `Approval` events are emitted.\n    ///\n    /// # Errors\n    ///\n    /// !!!IMPORTANT!!!\n    /// Returns `InsufficientAllowance` error if there are not enough tokens allowed\n    /// for the caller to !!! TRANSFER TO  `to` !!!.\n    ///\n    /// Returns `InsufficientBalance` error if there are not enough tokens on\n    /// the the account Balance of `from`.\n    #[overrider(PSP22)]\n    fn transfer_from(\n        &mut self,\n        from: AccountId,\n        to: AccountId,\n        value: Balance,\n        data: Vec<u8>,\n    ) -> Result<(), PSP22Error> {\n        let caller = self.env().caller();\n        let allowance = psp22::PSP22Internal::_allowance(self, &from, &caller);\n        if allowance < value {\n            return Err(PSP22Error::InsufficientAllowance);\n        }\n\n        psp22::PSP22Internal::_decrease_allowance_from_to(\n            self, &to, &caller, &value,\n        )?;\n        psp22::PSP22Internal::_update(self, Some(&from), Some(&to), &value)?;\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _total_supply(&self) -> Balance {\n        let lending_pool: LendingPoolVTokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        lending_pool\n            .call()\n            .total_debt_of(self.abacus_token.underlying_asset)\n            .call_v1()\n            .invoke()\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _update(\n        &mut self,\n        from: Option<&AccountId>,\n        to: Option<&AccountId>,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        let mut lending_pool: LendingPoolVTokenInterfaceRef =\n            self.abacus_token.lending_pool.into();\n        let (mint_from_amount, mint_to_amount): (Balance, Balance) =\n            lending_pool\n                .call_mut()\n                .transfer_debt_from_to(\n                    self.abacus_token.underlying_asset,\n                    *from.unwrap(),\n                    *to.unwrap(),\n                    *amount,\n                )\n                .call_v1()\n                .invoke()?;\n        if mint_from_amount > 0 {\n            self.env().emit_event(psp22::Transfer {\n                from: None,\n                to: from.copied(),\n                value: mint_from_amount,\n            });\n        }\n        if mint_to_amount > 0 {\n            self.env().emit_event(psp22::Transfer {\n                from: None,\n                to: to.copied(),\n                value: mint_to_amount,\n            });\n        }\n        // emitting transfer event\n        self.env().emit_event(psp22::Transfer {\n            from: from.copied(),\n            to: to.copied(),\n            value: *amount,\n        });\n\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _approve(\n        &mut self,\n        owner: &AccountId,\n        spender: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        self.abacus_token\n            .allowances\n            .insert((owner, spender), amount);\n        self.env().emit_event(psp22::Approval {\n            owner: *owner,\n            spender: *spender,\n            value: *amount,\n        });\n        Ok(())\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _mint_to(\n        &mut self,\n        to: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        panic!(\"Unsupported operation!\")\n    }\n\n    #[overrider(PSP22Internal)]\n    fn _burn_from(\n        &mut self,\n        from: &AccountId,\n        amount: &Balance,\n    ) -> Result<(), PSP22Error> {\n        panic!(\"Unsupported operation!\")\n    }\n\n    impl AbacusTokenImpl for VToken {}\n    impl AbacusToken for VToken {\n        #[ink(message)]\n        fn emit_transfer_events(\n            &mut self,\n            transfer_event_data: Vec<TransferEventData>,\n        ) -> Result<(), PSP22Error> {\n            AbacusTokenImpl::emit_transfer_events(self, transfer_event_data)\n        }\n\n        #[ink(message)]\n        fn emit_transfer_event_and_decrease_allowance(\n            &mut self,\n            transfer_event_data: TransferEventData,\n            from: AccountId,\n            to: AccountId,\n            decrease_allowance_by: Balance,\n        ) -> Result<(), PSP22Error> {\n            AbacusTokenImpl::emit_transfer_event_and_decrease_allowance(\n                self,\n                transfer_event_data,\n                from,\n                to,\n                decrease_allowance_by,\n            )\n        }\n\n        #[ink(message)]\n        fn get_lending_pool(&self) -> AccountId {\n            AbacusTokenImpl::get_lending_pool(self)\n        }\n    }\n\n    impl VToken {\n        #[ink(constructor)]\n        pub fn new(\n            name: String,\n            symbol: String,\n            decimal: u8,\n            lending_pool: AccountId,\n            underlying_asset: AccountId,\n        ) -> Self {\n            let mut instance = Self::default();\n            instance.metadata.name.set(&name.into());\n            instance.metadata.symbol.set(&symbol.into());\n            instance.metadata.decimals.set(&decimal);\n\n            instance.abacus_token.lending_pool = lending_pool;\n            instance.abacus_token.underlying_asset = underlying_asset;\n            instance\n        }\n    }\n}\n",
        "src/contracts/periphery/balance_viewer/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"balance_viewer\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/periphery/balance_viewer/Cargo.toml":"[package]\nname = \"balance_viewer\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\"psp22\"] }\n\n\nabax_library = { version = \"0.3.0\", default-features = false }\nabax_contracts = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"balance_viewer\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"abax_contracts/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/periphery/balance_viewer/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod balance_viewer {\n\n    use abax_contracts::lending_pool::{\n        DecimalMultiplier, LendingPoolView, LendingPoolViewRef,\n    };\n    use abax_library::structs::{\n        AccountReserveData, InterestRateModel, ReserveAbacusTokens,\n        ReserveData, ReserveFees, ReserveIndexes, ReserveRestrictions,\n    };\n    use pendzl::{\n        contracts::psp22::{PSP22Ref, PSP22},\n        traits::StorageFieldGetter,\n    };\n\n    use ink::codegen::TraitCallBuilder;\n    use ink::prelude::{vec::Vec, *};\n\n    #[derive(Debug, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\n    pub struct CompleteReserveData {\n        pub data: Option<ReserveData>,\n        pub indexes: Option<ReserveIndexes>,\n        pub interest_rate_model: Option<InterestRateModel>,\n        pub fees: Option<ReserveFees>,\n        pub restriction: Option<ReserveRestrictions>,\n        pub decimal_multiplier: Option<DecimalMultiplier>,\n        pub tokens: Option<ReserveAbacusTokens>,\n    }\n\n    #[ink(storage)]\n    #[derive(StorageFieldGetter)]\n    pub struct BalanceViewer {\n        lending_pool: LendingPoolViewRef,\n    }\n\n    impl BalanceViewer {\n        #[ink(constructor)]\n        pub fn new(lending_pool: AccountId) -> Self {\n            BalanceViewer {\n                lending_pool: lending_pool.into(),\n            }\n        }\n\n        #[ink(message)]\n        pub fn view_account_balances(\n            &self,\n            assets: Option<Vec<AccountId>>,\n            account: AccountId,\n        ) -> Vec<(AccountId, Balance)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, Balance)> = vec![];\n            for asset in assets_to_view {\n                let psp22: PSP22Ref = asset.into();\n                ret.push((\n                    asset,\n                    psp22.call().balance_of(account).call_v1().invoke(),\n                ));\n            }\n            ret\n        }\n\n        #[ink(message)]\n        pub fn view_unupdated_reserve_datas(\n            &self,\n            assets: Option<Vec<AccountId>>,\n        ) -> Vec<(AccountId, Option<ReserveData>)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, Option<ReserveData>)> = vec![];\n            for asset in assets_to_view {\n                ret.push((\n                    asset,\n                    self.lending_pool\n                        .call()\n                        .view_reserve_data(asset)\n                        .call_v1()\n                        .invoke(),\n                ));\n            }\n            ret\n        }\n        #[ink(message)]\n        pub fn view_reserve_datas(\n            &self,\n            assets: Option<Vec<AccountId>>,\n        ) -> Vec<(AccountId, Option<ReserveData>)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, Option<ReserveData>)> = vec![];\n            for asset in assets_to_view {\n                ret.push((\n                    asset,\n                    self.lending_pool\n                        .call()\n                        .view_reserve_data(asset)\n                        .call_v1()\n                        .invoke(),\n                ));\n            }\n            ret\n        }\n\n        #[ink(message)]\n        pub fn view_unupdated_account_reserve_datas(\n            &self,\n            assets: Option<Vec<AccountId>>,\n            account: AccountId,\n        ) -> Vec<(AccountId, AccountReserveData)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, AccountReserveData)> = vec![];\n            for asset in assets_to_view {\n                ret.push((\n                    asset,\n                    self.lending_pool\n                        .call()\n                        .view_unupdated_account_reserve_data(asset, account)\n                        .call_v1()\n                        .invoke(),\n                ));\n            }\n            ret\n        }\n        #[ink(message)]\n        pub fn view_account_reserve_datas(\n            &self,\n            assets: Option<Vec<AccountId>>,\n            account: AccountId,\n        ) -> Vec<(AccountId, AccountReserveData)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, AccountReserveData)> = vec![];\n            for asset in assets_to_view {\n                ret.push((\n                    asset,\n                    self.lending_pool\n                        .call()\n                        .view_account_reserve_data(asset, account)\n                        .call_v1()\n                        .invoke(),\n                ));\n            }\n            ret\n        }\n\n        #[ink(message)]\n        pub fn view_complete_reserve_data(\n            &self,\n            asset: AccountId,\n        ) -> CompleteReserveData {\n            CompleteReserveData {\n                data: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_data(asset)\n                    .call_v1()\n                    .invoke(),\n                indexes: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_indexes(asset)\n                    .call_v1()\n                    .invoke(),\n                interest_rate_model: self\n                    .lending_pool\n                    .call()\n                    .view_interest_rate_model(asset)\n                    .call_v1()\n                    .invoke(),\n                fees: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_fees(asset)\n                    .call_v1()\n                    .invoke(),\n                restriction: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_restrictions(asset)\n                    .call_v1()\n                    .invoke(),\n                decimal_multiplier: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_decimal_multiplier(asset)\n                    .call_v1()\n                    .invoke(),\n                tokens: self\n                    .lending_pool\n                    .call()\n                    .view_reserve_tokens(asset)\n                    .call_v1()\n                    .invoke(),\n            }\n        }\n\n        #[ink(message)]\n        pub fn view_complete_reserve_datas(\n            &self,\n            assets: Option<Vec<AccountId>>,\n        ) -> Vec<(AccountId, CompleteReserveData)> {\n            let assets_to_view = assets.unwrap_or_else(|| {\n                self.lending_pool\n                    .call()\n                    .view_registered_assets()\n                    .call_v1()\n                    .invoke()\n            });\n\n            let mut ret: Vec<(AccountId, CompleteReserveData)> = vec![];\n            for asset in assets_to_view {\n                ret.push((asset, self.view_complete_reserve_data(asset)));\n            }\n            ret\n        }\n    }\n}\n",
        "src/contracts/test_purpose/dia_oracle/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"dia_oracle\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/test_purpose/dia_oracle/Cargo.toml":"[package]\nname = \"dia_oracle\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [] }\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"dia_oracle\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n    \"abax_contracts/std\",\n    \"abax_library/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/test_purpose/dia_oracle/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\npub use self::oracle_anchor::TokenPriceStorageRef;\n\n#[ink::contract]\npub mod oracle_anchor {\n    use abax_contracts::dia_oracle::{OracleGetters, OracleSetters};\n    use ink::env::DefaultEnvironment;\n    use ink::prelude::string::String;\n    use ink::prelude::vec::Vec;\n    use ink::storage::{traits::ManualKey, Lazy, Mapping};\n\n    #[ink::storage_item]\n    struct TokenPriceStruct {\n        owner: AccountId,\n        updater: AccountId,\n        pairs: Mapping<String, (u64, u128)>,\n    }\n\n    #[ink(storage)]\n    pub struct TokenPriceStorage {\n        data: Lazy<TokenPriceStruct, ManualKey<0x1>>,\n    }\n\n    #[ink::event]\n    pub struct OwnershipTransferred {\n        #[ink(topic)]\n        previous_owner: Option<AccountId>,\n        #[ink(topic)]\n        new_owner: AccountId,\n    }\n\n    #[ink::event]\n    pub struct UpdaterChanged {\n        #[ink(topic)]\n        old: Option<AccountId>,\n        #[ink(topic)]\n        new: AccountId,\n    }\n\n    #[ink::event]\n    pub struct TokenPriceChanged {\n        #[ink(topic)]\n        pair: String,\n        price: u128,\n        timestamp: u64,\n    }\n\n    impl OracleSetters for TokenPriceStorage {\n        #[ink(message)]\n        fn transfer_ownership(&mut self, new_owner: AccountId) {\n            let caller: AccountId = self.env().caller();\n\n            let mut tps: TokenPriceStruct =\n                self.data.get().expect(\"self.data not set\");\n\n            assert!(caller == tps.owner, \"only owner can transfer ownership\");\n            tps.owner = new_owner;\n            self.data.set(&tps);\n            self.env().emit_event(OwnershipTransferred {\n                previous_owner: Some(caller),\n                new_owner,\n            });\n        }\n\n        #[ink(message)]\n        fn set_updater(&mut self, updater: AccountId) {\n            let caller: AccountId = self.env().caller();\n\n            let mut tps: TokenPriceStruct =\n                self.data.get().expect(\"self.data not set\");\n\n            assert!(caller == tps.owner, \"only owner can set updater\");\n            tps.updater = updater;\n            self.data.set(&tps);\n            self.env().emit_event(UpdaterChanged {\n                old: Some(caller),\n                new: updater,\n            });\n        }\n\n        #[ink(message)]\n        fn set_price(&mut self, pair: String, price: u128) {\n            let caller: AccountId = self.env().caller();\n            let mut tps: TokenPriceStruct =\n                self.data.get().expect(\"self.data not set\");\n            assert!(caller == tps.updater, \"only updater can set price\");\n            let current_timestamp: u64 = self.env().block_timestamp();\n\n            // create new record\n\n            tps.pairs.insert(pair.clone(), &(current_timestamp, price));\n\n            self.data.set(&tps);\n\n            self.env().emit_event(TokenPriceChanged {\n                pair,\n                price,\n                timestamp: current_timestamp,\n            });\n        }\n\n        #[ink(message)]\n        fn set_prices(&mut self, pairs: Vec<(String, u128)>) {\n            let caller: AccountId = self.env().caller();\n            let mut tps: TokenPriceStruct =\n                self.data.get().expect(\"self.data not set\");\n            assert!(caller == tps.updater, \"only updater can set price\");\n            let current_timestamp: u64 = self.env().block_timestamp();\n\n            // create new record\n            for (pair, price) in pairs {\n                tps.pairs.insert(pair.clone(), &(current_timestamp, price));\n                self.env().emit_event(TokenPriceChanged {\n                    pair,\n                    price,\n                    timestamp: current_timestamp,\n                });\n            }\n\n            self.data.set(&tps);\n        }\n    }\n\n    impl OracleGetters for TokenPriceStorage {\n        #[ink(message)]\n        fn get_updater(&self) -> AccountId {\n            self.data.get().unwrap().updater\n        }\n\n        #[ink(message)]\n        fn get_latest_price(&self, pair: String) -> Option<(u64, u128)> {\n            self.data.get().unwrap().pairs.get(pair)\n        }\n\n        #[ink(message)]\n        fn get_latest_prices(\n            &self,\n            pairs: Vec<String>,\n        ) -> Vec<Option<(u64, u128)>> {\n            let mut result = Vec::new();\n            let data = self.data.get().unwrap();\n            for pair in pairs {\n                result.push(data.pairs.get(pair));\n            }\n            result\n        }\n    }\n\n    impl Default for TokenPriceStorage {\n        fn default() -> Self {\n            Self::new()\n        }\n    }\n\n    impl TokenPriceStorage {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let caller: AccountId = Self::env().caller();\n            Self::env().emit_event(OwnershipTransferred {\n                previous_owner: None,\n                new_owner: caller,\n            });\n            Self::env().emit_event(UpdaterChanged {\n                old: None,\n                new: caller,\n            });\n\n            let tps = TokenPriceStruct {\n                owner: caller,\n                updater: caller,\n                pairs: Mapping::new(),\n            };\n\n            let mut ldata = Lazy::new();\n            ldata.set(&tps);\n\n            Self { data: ldata }\n        }\n\n        #[ink(message)]\n        pub fn code_hash(&self) -> Hash {\n            self.env().own_code_hash().unwrap_or_default()\n        }\n\n        #[ink(message)]\n        pub fn set_code(&mut self, code_hash: [u8; 32]) {\n            let caller: AccountId = self.env().caller();\n            let tps: TokenPriceStruct =\n                self.data.get().expect(\"self.data not set\");\n            assert!(caller == tps.owner, \"only owner can set set code\");\n\n            ink::env::set_code_hash::<DefaultEnvironment>(&code_hash.into())\n                .unwrap_or_else(|err| {\n                    panic!(\n                    \"Failed to `set_code_hash` to {code_hash:?} due to {err:?}\"\n                )\n                });\n        }\n    }\n}\n",
        "src/contracts/test_purpose/fee_reduction_provider_mock/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fee_reduction_provider_mock\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/test_purpose/fee_reduction_provider_mock/Cargo.toml":"[package]\nname = \"fee_reduction_provider_mock\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_mintable\",\n    \"ownable\",\n    \"ownable_impl\",\n] }\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n    \"abax_contracts/std\",\n    \"abax_library/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/test_purpose/fee_reduction_provider_mock/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod fee_reduction_provider_mock {\n\n    use abax_contracts::fee_reduction::FeeReduction;\n    use ink::storage::Mapping;\n\n    #[ink(storage)]\n    #[derive(Default)]\n    pub struct FeeReductionProvider {\n        fee_reductions: Mapping<Option<AccountId>, (u32, u32)>,\n        flash_loan_fee_reductions: Mapping<Option<AccountId>, u32>,\n    }\n\n    impl FeeReductionProvider {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self::default()\n        }\n\n        #[ink(message)]\n        pub fn set_fee_reduction(\n            &mut self,\n            account_id: Option<AccountId>,\n            fee_reductions: (u32, u32),\n        ) {\n            self.fee_reductions.insert(account_id, &fee_reductions);\n        }\n\n        #[ink(message)]\n        pub fn set_flash_loan_fee_reduction(\n            &mut self,\n            account_id: Option<AccountId>,\n            fee_reduction: u32,\n        ) {\n            self.flash_loan_fee_reductions\n                .insert(account_id, &fee_reduction);\n        }\n    }\n\n    impl FeeReduction for FeeReductionProvider {\n        #[ink(message)]\n        fn get_fee_reductions(&self, account: AccountId) -> (u32, u32) {\n            match self.fee_reductions.get(Some(account)) {\n                Some(fee_reductions) => fee_reductions,\n                None => self\n                    .fee_reductions\n                    .get::<Option<AccountId>>(None)\n                    .unwrap_or((0, 0)),\n            }\n        }\n\n        #[ink(message)]\n        fn get_flash_loan_fee_reduction(&self, account: AccountId) -> u32 {\n            match self.flash_loan_fee_reductions.get(Some(account)) {\n                Some(fee_reductions) => fee_reductions,\n                None => self\n                    .flash_loan_fee_reductions\n                    .get::<Option<AccountId>>(None)\n                    .unwrap_or(0),\n            }\n        }\n    }\n}\n",
        "src/contracts/test_purpose/flash_loan_receiver_mock/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_contracts\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b081885d050e714ef8ff4215c7f4eaa9e110e86744094e7f2cad589637d7f7c2\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"flash_loan_receiver_mock\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_contracts\",\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/test_purpose/flash_loan_receiver_mock/Cargo.toml":"[package]\nname = \"flash_loan_receiver_mock\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"ownable\",\n    \"pausable\",\n    \"access_control\",\n] }\n\nabax_contracts = { version = \"0.3.0\", default-features = false }\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"flash_loan_receiver_mock\"\npath = \"lib.rs\"\n\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    \"abax_contracts/std\",\n    \"abax_library/std\",\n\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/test_purpose/flash_loan_receiver_mock/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[ink::contract]\npub mod flash_loan_receiver_mock {\n    use abax_contracts::flash_loan_receiver::{\n        FlashLoanReceiver, FlashLoanReceiverError,\n    };\n    use ink::prelude::{string::ToString, vec::Vec};\n\n    use ink::codegen::TraitCallBuilder;\n    use pendzl::{\n        contracts::psp22::{\n            mintable::{PSP22Mintable, PSP22MintableRef},\n            PSP22Ref, PSP22,\n        },\n        math::errors::MathError,\n        traits::StorageFieldGetter,\n    };\n\n    #[ink::event]\n    pub struct ExecutedWithSuccess {\n        #[ink(topic)]\n        assets: Vec<AccountId>,\n        #[ink(topic)]\n        amounts: Vec<u128>,\n        #[ink(topic)]\n        fees: Vec<u128>,\n    }\n    #[ink::event]\n    pub struct ExecutedWithFail {\n        #[ink(topic)]\n        assets: Vec<AccountId>,\n        #[ink(topic)]\n        amounts: Vec<u128>,\n        #[ink(topic)]\n        fees: Vec<u128>,\n    }\n\n    #[ink(storage)]\n    #[derive(Default, StorageFieldGetter)]\n    pub struct FlashLoanReceiverMock {\n        fail_execute_operation: bool,\n        simulate_balance_to_cover_fee: bool,\n        custom_amount_to_approve: Option<Balance>,\n    }\n    impl FlashLoanReceiver for FlashLoanReceiverMock {\n        #[ink(message)]\n        #[allow(unused_variables)]\n        fn execute_operation(\n            &mut self,\n            assets: Vec<AccountId>,\n            amounts: Vec<u128>,\n            fees: Vec<u128>,\n            receiver_params: Vec<u8>,\n        ) -> Result<(), FlashLoanReceiverError> {\n            if self.fail_execute_operation {\n                self.env().emit_event(ExecutedWithFail {\n                    assets,\n                    amounts,\n                    fees,\n                });\n                return Err(FlashLoanReceiverError::Custom(\n                    \"ExecuteOperationFailed\".to_string(),\n                ));\n            }\n            for i in 0..assets.len() {\n                let psp22: PSP22Ref = assets[i].into();\n                let balance = psp22\n                    .call()\n                    .balance_of(self.env().account_id())\n                    .call_v1()\n                    .invoke();\n                if amounts[i] > balance {\n                    return Err(FlashLoanReceiverError::Custom(\n                        \"InsufficientBalance\".to_string(),\n                    ));\n                }\n\n                if self.simulate_balance_to_cover_fee {\n                    let mut psp22: PSP22MintableRef = assets[i].into();\n\n                    if psp22\n                        .call_mut()\n                        .mint(self.env().account_id(), fees[i])\n                        .call_v1()\n                        .invoke()\n                        .is_err()\n                    {\n                        return Err(FlashLoanReceiverError::Custom(\n                            \"AssetNotMintable\".to_string(),\n                        ));\n                    }\n                }\n\n                let amount_to_return = match self.custom_amount_to_approve {\n                    Some(amount) => Ok(amount),\n                    None => amounts[i]\n                        .checked_add(fees[i])\n                        .ok_or(MathError::Overflow),\n                }?;\n                if {\n                    let mut psp22: PSP22Ref = assets[i].into();\n                    psp22\n                        .call_mut()\n                        .approve(self.env().caller(), amount_to_return)\n                        .call_v1()\n                        .invoke()\n                }\n                .is_err()\n                {\n                    return Err(FlashLoanReceiverError::Custom(\n                        \"CantApprove\".to_string(),\n                    ));\n                }\n            }\n\n            self.env().emit_event(ExecutedWithSuccess {\n                assets,\n                amounts,\n                fees,\n            });\n            Ok(())\n        }\n    }\n\n    impl FlashLoanReceiverMock {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            FlashLoanReceiverMock {\n                custom_amount_to_approve: None,\n                fail_execute_operation: false,\n                simulate_balance_to_cover_fee: true,\n            }\n        }\n\n        #[ink(message)]\n        pub fn set_fail_execute_operation(\n            &mut self,\n            should_fail_execute_operation: bool,\n        ) {\n            self.fail_execute_operation = should_fail_execute_operation;\n        }\n\n        #[ink(message)]\n        pub fn set_custom_amount_to_approve(\n            &mut self,\n            custom_amount_to_approve: u128,\n        ) {\n            self.custom_amount_to_approve = Some(custom_amount_to_approve);\n        }\n\n        #[ink(message)]\n        pub fn set_simulate_balance_to_cover_fee(\n            &mut self,\n            simulate_balance_to_cover_fee: bool,\n        ) {\n            self.simulate_balance_to_cover_fee = simulate_balance_to_cover_fee;\n        }\n    }\n}\n",
        "src/contracts/test_purpose/test_psp22/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"test_psp22\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/test_purpose/test_psp22/Cargo.toml":"[package]\nname = \"test_psp22\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_impl\",\n    \"psp22_metadata\",\n    \"psp22_metadata_impl\",\n    \"psp22_mintable\",\n    \"psp22_mintable_impl\",\n    \"ownable\",\n    \"ownable_impl\",\n] }\n\n\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"test_psp22\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/test_purpose/test_psp22/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(PSP22, PSP22Mintable, PSP22Metadata, Ownable)]\n#[ink::contract]\npub mod test_psp22 {\n\n    use pendzl::contracts::ownable;\n    use pendzl::contracts::psp22;\n    use pendzl::contracts::psp22::PSP22Error;\n\n    use ink::prelude::string::String;\n\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct TestPSP22Contract {\n        #[storage_field]\n        ownable: ownable::OwnableData,\n        #[storage_field]\n        psp22: psp22::PSP22Data,\n        #[storage_field]\n        metadata: psp22::metadata::PSP22MetadataData,\n    }\n\n    impl TestPSP22Contract {\n        #[ink(constructor)]\n        pub fn new(\n            name: String,\n            symbol: String,\n            decimal: u8,\n            owner: AccountId,\n        ) -> Self {\n            let mut instance = Self::default();\n            instance.metadata.name.set(&name.into());\n            instance.metadata.symbol.set(&symbol.into());\n            instance.metadata.decimals.set(&decimal);\n            ownable::OwnableInternal::_update_owner(\n                &mut instance,\n                &Some(owner),\n            );\n            instance\n        }\n\n        //expose approve from to\n        #[ink(message)]\n        pub fn t_approve(\n            &mut self,\n            from: AccountId,\n            to: AccountId,\n            value: u128,\n        ) -> Result<(), PSP22Error> {\n            self._approve(&from, &to, &value)\n        }\n    }\n}\n",
        "src/contracts/test_purpose/test_reserves_minter/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"abax_library\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2ff58a8382cee73018135a6f2949d3a766efc6ad003ebd5df3bb4bafa538e176\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"primitive-types\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d151e35f61089500b617991b791fc8bfd237ae50cd5950803758a179b41e67a\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"081e3f0755c1f380c2d010481b6fa2e02973586d5f2b24eebb7a2a1d98b143d8\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver 0.11.0\",\n \"semver-parser\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"50d2eb3cd3d1bf4529e31c215ee6f93ec5a3d536d9f578f93d9d33ee19562932\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"const_env\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e9e4f72c6e3398ca6da372abd9affd8f89781fe728869bbf986206e9af9627e\"\ndependencies = [\n \"const_env_impl\",\n]\n\n[[package]]\nname = \"const_env_impl\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3a4f51209740b5e1589e702b3044cdd4562cef41b6da404904192ffffb852d62\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"const_format\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a214c7af3d04997541b18d432afaff4c455e79e2029079647e72fc2bd27673\"\ndependencies = [\n \"const_format_proc_macros\",\n]\n\n[[package]]\nname = \"const_format_proc_macros\"\nversion = \"0.2.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f6ff08fd20f4f299298a28e2dfa8a8ba1036e6cd2460ac1de7b425d76f2500\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core\",\n \"typenum\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest\",\n \"fiat-crypto\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f33878137e4dafd7fa914ad4e259e18a4e8e532b9617a2d0150262bf53abfce\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"ethnum\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b90ca2580b73ab6a1f724b76ca11ab632df820fd6040c336200d2c1df7b3c82c\"\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs2\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d4a862aedbfda93175ddf75c9aaa2ae4c4b39ee5cee06c16d50bccce05bf5c7\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cee56055bac6d928d425e944c5f3b69baa33c9635822fd1c00cd4afc70fde3e\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a1f8473fa09e0f9b6f3cb3f8d18c07c14ebf9ea1f7cdfee270f009d45ee8e9\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"heck 0.4.1\",\n \"impl-serde\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"itertools 0.12.1\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f357e2e867f4e222ffc4015a6e61d1073548de89f70a4e36a8b0385562777fa\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives 5.0.0\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42cec50b7e4f8406aab25801b015d3802a52d76cfbe48ce11cfb4200fa88e296\"\ndependencies = [\n \"blake2\",\n \"cfg-if\",\n \"const_env\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1\",\n \"sha2\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools 0.10.5\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b1ad2975551c4ed800af971289ed6d2c68ac41ffc03a42010b3e01d7360dfb2\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"itertools 0.12.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee1a546f37eae3b3cd223832d31702033c5369dcfa3405899587c110a7908d3\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n \"synstructure 0.13.1\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98fcc0ff9292ff68c7ee7b84c93533c9ff13859ec3b148faa822e2da9954fe6\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"linkme\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea1734d058c80aa72e59c8ae75624fd8a51791efba21469f273156c0f4cad5c9\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 4.3.0\",\n \"parity-scale-codec\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11ec35ef7f45e67a53b6142d7e7f18e6d9292d76c3a2a1da14cf8423e481813d\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude 5.0.0\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbdb04cad74df858c05bc9cb6f30bbf12da33c3e2cb7ca211749c001fa761aa9\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"ink_storage_traits\",\n \"pallet-contracts-uapi-next\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83ce49e3d2935fc1ec3e73117119712b187d3123339f6a31624e92f75fa2293d\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude 5.0.0\",\n \"ink_primitives 5.0.0\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"linkme\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c943daedff228392b791b33bba32e75737756e80a613e32e246c6ce9cbab20a\"\ndependencies = [\n \"linkme-impl\",\n]\n\n[[package]]\nname = \"linkme-impl\"\nversion = \"0.3.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb26336e6dc7cc76e7927d2c9e7e3bb376d7af65a6f56a0b16c47d18a9b1abc5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"pallet-contracts-uapi-next\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd549c16296ea5b2eb7c65c56aba548b286c1be4d7675b424ff6ccb8319c97a9\"\ndependencies = [\n \"bitflags\",\n \"paste\",\n \"polkavm-derive\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pendzl\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2391b874732ca67f2919059c03e7506a2ff8b24078f77cfa2dec98a1b594d196\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_contracts\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_contracts\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9da49a56c7c1ca4c9ea282e30d1d772152f2fe1a40b6eb0ade57fe39982a42d\"\ndependencies = [\n \"hex\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"pendzl_lang\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da2530aa5b96942b9388c1415f3f1d5373072008a5b6c26a17cf58c82c50c46c\"\ndependencies = [\n \"const_format\",\n \"ethnum\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl_lang_macro\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"pendzl_lang_codegen\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19a031624046b6bb73ffd1c384b91e798437b52b9821e42e84443d0f7635169d\"\ndependencies = [\n \"blake2\",\n \"cargo_metadata\",\n \"fs2\",\n \"heck 0.3.3\",\n \"ink_ir 4.3.0\",\n \"ink_primitives 4.3.0\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n \"unwrap\",\n]\n\n[[package]]\nname = \"pendzl_lang_macro\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"172553c2fd78263c0281e85dfd2859b256458da221045bb162f39d146be78c02\"\ndependencies = [\n \"pendzl_lang_codegen\",\n \"proc-macro2\",\n \"syn 1.0.109\",\n \"synstructure 0.12.6\",\n]\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b4e215c80fe876147f3d58158d5dfeae7dabdd6047e175af77095b78d0035c\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6380dbe1fb03ecc74ad55d841cfc75480222d153ba69ddcb00977866cbdabdb8\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc8211b3365bbafb2fb32057d68b0e1ca55d079f5cf6f9da9b98079b94b3987d\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04\"\ndependencies = [\n \"zerocopy\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver 1.0.23\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7caaf753f8ed1ab4752c6afb20174f03598c664724e0e32628e161c21000ff76\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3475108a1b62c7efd1b5c65974f30109a598b2f45f23c9ae030acb9686966db\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core\",\n \"serde_bytes\",\n \"sha2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f301af10236f6df4160f7c3f04eec6dbc70ace82d23326abad5edee88801c6b6\"\ndependencies = [\n \"semver-parser\",\n \"serde\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0bef5b7f9e0df16536d3961cfb6e84331c065b4066afb39768d0e319411f7\"\ndependencies = [\n \"pest\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99fce0ffe7310761ca6bf9faf5115afbc19688edd00171d81b1bb1b116c63e09\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"387cc504cb06bb40a96c8e04e951fe01854cf6bc921053c954e4a606d9675c6a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.209\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5831b979fd7b5439637af1752d535ff49f4860c0f341d1baeb6faf0f4242170\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.127\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8043c06d9f82bd7271361ed64f415fe5e12a77fdb52e573e7f06a516dea329ad\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest\",\n \"keccak\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"subtle\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"578e081a14e0cefc3279b0472138c513f37b41a08d5a3cca9b6e4e8ceb6cd525\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.12.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f36bdaa60a83aca3921b5259d5400cbf5e90fc51931376a9bd4a0eb79aa7210f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"test_reserves_minter\"\nversion = \"0.2.0\"\ndependencies = [\n \"abax_library\",\n \"ink\",\n \"parity-scale-codec\",\n \"pendzl\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0342370b38b6a11b6cc11d6a805569958d54cfa061a29969c3b5ce2ea405724\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.63\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4558b58466b9ad7ca0f102865eccc95938dca1a74a856f2b57b6629050da261\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"229730647fbc343e3a80e463c1db7f78f3855d3f3739bee0dda773c9a037c90a\"\n\n[[package]]\nname = \"unwrap\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e33648dd74328e622c7be51f3b40a303c63f93e6fa5f08778b6203a4c25c20f\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a5cbf750400958819fb6178eaa83bee5cd9c29a26a40cc241df8c70fdd46984\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"byteorder\",\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.76\",\n]\n",
        "src/contracts/test_purpose/test_reserves_minter/Cargo.toml":"[package]\nname = \"test_reserves_minter\"\nversion = \"0.2.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"psp22_mintable\",\n    \"ownable\",\n    \"ownable_impl\",\n] }\n\n\nabax_library = { version = \"0.3.0\", default-features = false }\n\n\n[lib]\nname = \"test_reserves_minter\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n\n    # These dependencies\n\n\n    \"abax_library/std\",\n    \"pendzl/std\",\n]\nink-as-dependency = []\n",
        "src/contracts/test_purpose/test_reserves_minter/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[pendzl::implementation(Ownable)]\n#[ink::contract]\npub mod test_psp22 {\n\n    use pendzl::contracts::{\n        ownable,\n        psp22::{mintable::PSP22MintableRef, PSP22Error},\n    };\n\n    use ink::codegen::TraitCallBuilder;\n    use ink::{prelude::vec::Vec, storage::Mapping};\n    use pendzl::contracts::psp22::mintable::PSP22Mintable;\n\n    #[ink(storage)]\n    #[derive(Default, pendzl::traits::StorageFieldGetter)]\n    pub struct TestReservesMinter {\n        #[storage_field]\n        ownable: ownable::OwnableData,\n        reserves_to_mint: Vec<AccountId>,\n        already_minted: Mapping<AccountId, bool>,\n    }\n\n    impl TestReservesMinter {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let mut instance = Self::default();\n            let caller = instance.env().caller();\n            ownable::OwnableInternal::_update_owner(\n                &mut instance,\n                &Some(caller),\n            );\n            instance\n        }\n\n        #[ink(message)]\n        pub fn mint(\n            &mut self,\n            addreses_with_amounts: Vec<(AccountId, Balance)>,\n            to: AccountId,\n        ) -> Result<(), TestReservesMinterError> {\n            if !self.already_minted.contains(to) {\n                for &(addr, amount) in addreses_with_amounts.iter() {\n                    let mut psp22_mintable: PSP22MintableRef = addr.into();\n                    psp22_mintable\n                        .call_mut()\n                        .mint(to, amount)\n                        .call_v1()\n                        .invoke()?;\n                }\n                self.already_minted.insert(to, &true);\n            } else {\n                return Err(TestReservesMinterError::AlreadyMinted);\n            }\n            Ok(())\n        }\n    }\n\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\n    pub enum TestReservesMinterError {\n        OwnableError(OwnableError),\n        PSP22Error(PSP22Error),\n\n        AlreadyMinted,\n    }\n\n    impl From<OwnableError> for TestReservesMinterError {\n        fn from(error: OwnableError) -> Self {\n            TestReservesMinterError::OwnableError(error)\n        }\n    }\n    impl From<PSP22Error> for TestReservesMinterError {\n        fn from(error: PSP22Error) -> Self {\n            TestReservesMinterError::PSP22Error(error)\n        }\n    }\n}\n",
        "src/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\n#[allow(clippy::too_many_arguments)]\npub mod contracts_modules;\n// helper functions\npub mod library;\n",
        "src/library/Cargo.toml":"[package]\nname = \"abax_library\"\nversion = \"0.3.0\"\nauthors = [\"\u0141ukasz \u0141akomy\", \"Konrad Wierzbik\"]\nedition = \"2021\"\ndescription = \"Library for the Abax Protocol containing shared logic and data structures\"\nlicense = \"BUSL-1.1\"\n\n[dependencies]\nink = { version = \"5.0.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3.6.9\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"2.11\", default-features = false, features = [\n    \"derive\",\n], optional = true }\n\npendzl = { version = \"0.2.4\", default-features = false, features = [\n    \"psp22\",\n    \"ownable\",\n    \"pausable\",\n    \"access_control\",\n] }\nprimitive-types = { version = \"0.12.1\", default-features = false, features = [\n    \"codec\",\n] }\n\n[lib]\nname = \"abax_library\"\npath = \"lib.rs\"\ncrate-type = [\"rlib\"]\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info/std\",\n\n    # These dependencies\n    \"pendzl/std\",\n    \"primitive-types/std\",\n    \"primitive-types/scale-info\",\n]\n",
        "src/library/lib.rs":"// SPDX-License-Identifier: BUSL-1.1\n#![cfg_attr(not(feature = \"std\"), no_std)]\n\npub mod math;\npub mod structs;\n",
        "src/library/math/constants.rs":"// SPDX-License-Identifier: BUSL-1.1\npub const E6_U32: u32 = 10_u32.pow(6);\npub const E6_U64: u64 = 10_u64.pow(6);\n\npub const E6_U128: u128 = 10_u128.pow(6);\npub const E8_U128: u128 = 10_u128.pow(8);\npub const E9_U128: u128 = 10_u128.pow(9);\n\npub const E10_U128: u128 = 10_u128.pow(10);\npub const E12_U128: u128 = 10_u128.pow(12);\npub const E15_U128: u128 = 10_u128.pow(15);\npub const E18_U128: u128 = 10_u128.pow(18);\npub const E24_U128: u128 = 10_u128.pow(24);\npub const ONE_HOUR: u128 = 60 * 60 * 1000;\npub const DAY: u128 = 24 * ONE_HOUR;\n",
        "src/library/math/interest_rate_math.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::math::{errors::MathError, operations::mul_div};\n\nuse crate::structs::InterestRateModel;\n\nuse super::E6_U32;\n\npub fn utilization_rate_to_interest_rate_e18(\n    utilization_rate_e6: u32,\n    interest_rate_model: &InterestRateModel,\n) -> Result<u64, MathError> {\n    if utilization_rate_e6 == 0 {\n        return Ok(0);\n    }\n\n    if utilization_rate_e6 <= interest_rate_model.target_ur_e6 {\n        match u32::try_from(mul_div(\n            utilization_rate_e6 as u128,\n            interest_rate_model.rate_at_target_ur_e18 as u128,\n            interest_rate_model.target_ur_e6 as u128,\n            pendzl::math::operations::Rounding::Up,\n        )?) {\n            Ok(v) => Ok(v as u64),\n            _ => Err(MathError::Overflow),\n        }\n    } else {\n        let distance_from_target = utilization_rate_e6\n            .saturating_sub(interest_rate_model.target_ur_e6);\n\n        let max_distance_from_target =\n            E6_U32.saturating_sub(interest_rate_model.target_ur_e6);\n\n        let interest_step = interest_rate_model\n            .rate_at_max_ur_e18\n            .saturating_sub(interest_rate_model.rate_at_target_ur_e18);\n\n        match u32::try_from(mul_div(\n            distance_from_target as u128,\n            interest_step as u128,\n            max_distance_from_target as u128,\n            pendzl::math::operations::Rounding::Up,\n        )?) {\n            Ok(v) => Ok(interest_rate_model\n                .rate_at_target_ur_e18\n                .checked_add(v as u64)\n                .ok_or(MathError::Overflow)?),\n            _ => Err(MathError::Overflow),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    // 0.01 % / 365 * 24 * 60 * 60 * E18\n    const ONE_PERCENT_APR_E18: u64 = 3_170_979;\n    const TEN_PERCENT_APR: u64 = 10 * ONE_PERCENT_APR_E18;\n    const INTEREST_RATE_MDOEL: InterestRateModel = InterestRateModel {\n        target_ur_e6: 900_000,                         // 90%\n        min_rate_at_target_e18: ONE_PERCENT_APR_E18, // 1%, not imporant for this test\n        max_rate_at_target_e18: TEN_PERCENT_APR, // 10%, not imporant for this test\n        rate_at_target_ur_e18: TEN_PERCENT_APR,  // 10%\n        rate_at_max_ur_e18: 100 * ONE_PERCENT_APR_E18, // 100%\n        minimal_time_between_adjustments: 0,\n        last_adjustment_timestamp: 0,\n    };\n\n    #[test]\n    fn utilization_rate_to_interest_rate_e18_tests() {\n        //0%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(0, &INTEREST_RATE_MDOEL),\n            Ok(0)\n        );\n        //1%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(10_000, &INTEREST_RATE_MDOEL),\n            Ok(TEN_PERCENT_APR * 1 / 90)\n        );\n        //10%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                100_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(TEN_PERCENT_APR * 10 / 90)\n        );\n\n        //50%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                500_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(TEN_PERCENT_APR * 50 / 90)\n        );\n\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                900_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(TEN_PERCENT_APR)\n        );\n        //95%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                950_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(55 * ONE_PERCENT_APR_E18)\n        );\n\n        //100%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                1_000_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(100 * ONE_PERCENT_APR_E18)\n        );\n\n        //110%\n        assert_eq!(\n            utilization_rate_to_interest_rate_e18(\n                1_100_000,\n                &INTEREST_RATE_MDOEL\n            ),\n            Ok(190 * ONE_PERCENT_APR_E18)\n        );\n    }\n}\n",
        "src/library/math/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod constants;\nmod operations;\n\npub use constants::*;\npub use operations::*;\n\npub mod interest_rate_math;\n",
        "src/library/math/operations.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::math::{\n    errors::MathError,\n    operations::{mul_div, Rounding},\n};\n\nuse primitive_types::U256;\n\nuse super::{E10_U128, E18_U128, E6_U128, E8_U128};\n\npub fn e18_mul_e18_to_e18_rdown(a: u128, b: u128) -> Result<u128, MathError> {\n    if a == E18_U128 {\n        return Ok(b);\n    }\n    if b == E18_U128 {\n        return Ok(a);\n    }\n    mul_div(a, b, E18_U128, Rounding::Down)\n}\n\npub fn e18_mul_e18_to_e18_rup(a: u128, b: u128) -> Result<u128, MathError> {\n    if a == E18_U128 {\n        return Ok(b);\n    }\n    if b == E18_U128 {\n        return Ok(a);\n    }\n    mul_div(a, b, E18_U128, Rounding::Up)\n}\n\npub fn e18_mul_e0_to_e18(a: u64, b: u64) -> u128 {\n    (a as u128).checked_mul(b as u128).unwrap()\n}\n\npub fn e18_mul_e18_div_e18_to_e18_rdown(\n    a: u128,\n    b: u64,\n    c: u128,\n) -> Result<u64, MathError> {\n    match u64::try_from(mul_div(a, b as u128, c, Rounding::Down)?) {\n        Ok(v) => Ok(v),\n        _ => Err(MathError::Overflow),\n    }\n}\n\npub fn e0_mul_e18_div_e18_to_e0_rdown(\n    a: u128,\n    b: u128,\n    c: u128,\n) -> Result<u128, MathError> {\n    mul_div(a, b, c, Rounding::Down)\n}\n\npub fn e0_mul_e18_div_e18_to_e0_rup(\n    a: u128,\n    b: u128,\n    c: u128,\n) -> Result<u128, MathError> {\n    mul_div(a, b, c, Rounding::Up)\n}\n\npub fn e0_mul_e6_to_e0_rup(a: u128, b: u32) -> Result<u128, MathError> {\n    mul_div(a, b as u128, E6_U128, Rounding::Up)\n}\n\npub fn e8_mul_e6_to_e6_rdown(a: u128, b: u128) -> Result<u128, MathError> {\n    mul_div(a, b, E8_U128, Rounding::Down)\n}\n\npub fn calculate_amount_to_take(\n    amount_to_repay: &u128,\n    asset_to_repay_price_e18: &u128,\n    asset_to_take_price_e18: &u128,\n    reserve_to_repay_decimal_multiplier: &u128,\n    reserve_to_take_decimal_multiplier: &u128,\n    penalty_to_repay_e6: &u128,\n    penalty_to_take_e6: &u128,\n) -> Result<u128, MathError> {\n    let a = U256::from(*amount_to_repay);\n    let b = U256::from(*asset_to_repay_price_e18);\n    let c = U256::from(*reserve_to_take_decimal_multiplier);\n    let l = U256::from(*penalty_to_repay_e6);\n    let m = U256::from(*penalty_to_take_e6);\n    let x = U256::from(*asset_to_take_price_e18);\n    let y = U256::from(*reserve_to_repay_decimal_multiplier);\n\n    match u128::try_from(\n        a.checked_mul(b)\n            .unwrap()\n            .checked_mul(c)\n            .unwrap()\n            .checked_mul(\n                l.checked_add(m)\n                    .unwrap()\n                    .checked_add(E6_U128.into())\n                    .unwrap(),\n            )\n            .unwrap()\n            .checked_div(\n                x.checked_mul(y)\n                    .unwrap()\n                    .checked_mul(E6_U128.into())\n                    .unwrap(),\n            )\n            .unwrap(),\n    ) {\n        Ok(v) => Ok(v),\n        _ => Err(MathError::Overflow),\n    }\n}\n\npub fn calculate_asset_amount_value_e8(\n    amount: &u128,\n    price_e18: &u128,\n    decimal_multplier: &u128,\n) -> u128 {\n    let denominator = decimal_multplier.checked_mul(E10_U128).unwrap(); // here e18 coming from price is adjusted to e8 // this should not fail as long decimal multiplier is smaller than 3 *10^28\n    mul_div(*amount, *price_e18, denominator, Rounding::Down).unwrap()\n}\n",
        "src/library/structs/account_config.rs":"// SPDX-License-Identifier: BUSL-1.1\npub type Bitmap128 = u128;\n\n/// stores information about which asset is deposited, used as collatearl and borrowed by an account and which `market_rule_id` the account has chosen.\n#[derive(Debug, Default, scale::Encode, scale::Decode)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct AccountConfig {\n    /// active account deposits. The order in the Bitmap corresponds to the `assets_id`.\n    pub deposits: Bitmap128,\n    /// turned on collaterals. The order in the Bitmap corresponds to the `assets_id`.\n    pub collaterals: Bitmap128,\n    /// active borrow_variable. The order in the Bitmap corresponds to the `assets_id`.\n    pub borrows: Bitmap128,\n    /// id of `MarketRule` chosen by account\n    pub market_rule_id: u32,\n}\n",
        "src/library/structs/account_reserve_data.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::{math::errors::MathError, traits::Balance};\n\nuse crate::math::{\n    e0_mul_e18_div_e18_to_e0_rdown, e0_mul_e18_div_e18_to_e0_rup,\n    e0_mul_e6_to_e0_rup, E18_U128, E6_U32,\n};\n\nuse super::{\n    AccountConfig, FeeReductions, ReserveData, ReserveFees, ReserveIndexes,\n    ReserveRestrictions,\n};\n\n/// stores data of account\n#[derive(Debug, Default, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct AccountReserveData {\n    /// underlying asset amount of deposit plus accumulated interest.\n    pub deposit: Balance,\n    /// underlying asset amount of debt plus accumulated interest.\n    pub debt: Balance,\n    /// index that is used to accumulate deposit interest.\n    pub applied_deposit_index_e18: u128,\n    /// index that is used to accumulate debt interest.\n    pub applied_debt_index_e18: u128,\n}\n\n/// type used to identify asset\npub type AssetId = u32;\n\nimpl AccountReserveData {\n    pub fn increase_account_deposit(\n        &mut self,\n        asset_id: &AssetId,\n        account_config: &mut AccountConfig,\n        reserve_data: &mut ReserveData,\n        amount: &u128,\n    ) -> Result<(), MathError> {\n        account_config.deposits |= 1_u128 << *asset_id;\n\n        self.deposit = self\n            .deposit\n            .checked_add(*amount)\n            .ok_or(MathError::Overflow)?;\n\n        reserve_data.increase_total_deposit(amount)?;\n\n        Ok(())\n    }\n\n    pub fn decrease_account_deposit(\n        &mut self,\n        asset_id: &AssetId,\n        account_config: &mut AccountConfig,\n        reserve_data: &mut ReserveData,\n        reserve_restrictions: &ReserveRestrictions,\n        amount: &u128,\n    ) -> Result<(), MathError> {\n        if *amount == self.deposit {\n            account_config.deposits &= !(1_u128 << asset_id);\n        }\n        self.deposit = self\n            .deposit\n            .checked_sub(*amount)\n            .ok_or(MathError::Underflow)?;\n\n        reserve_data.decrease_total_deposit(amount)?;\n\n        if self.deposit < reserve_restrictions.minimal_collateral {\n            account_config.collaterals &= !(1_u128 << asset_id);\n        }\n        Ok(())\n    }\n\n    pub fn increase_account_debt(\n        &mut self,\n        asset_id: &AssetId,\n        account_config: &mut AccountConfig,\n        reserve_data: &mut ReserveData,\n        amount: &u128,\n    ) -> Result<(), MathError> {\n        account_config.borrows |= 1_u128 << *asset_id;\n\n        self.debt =\n            self.debt.checked_add(*amount).ok_or(MathError::Overflow)?;\n\n        reserve_data.increase_total_debt(amount)?;\n\n        Ok(())\n    }\n\n    pub fn decrease_account_debt(\n        &mut self,\n        asset_id: &AssetId,\n        account_config: &mut AccountConfig,\n        reserve_data: &mut ReserveData,\n        amount: &u128,\n    ) -> Result<(), MathError> {\n        if *amount == self.debt {\n            account_config.borrows &= !(1_u128 << asset_id);\n        }\n        self.debt =\n            self.debt.checked_sub(*amount).ok_or(MathError::Underflow)?;\n\n        reserve_data.decrease_total_debt(amount)?;\n\n        Ok(())\n    }\n\n    /// based on the `reserve_indexes_and_fees` and Self.applied_cumulative_**_index_e18 accumulates interest\n    ///\n    /// # Returns\n    /// (accumulated_deposit_interest, accumulated_debt_interest)\n    pub fn accumulate_account_interest(\n        &mut self,\n        reserve_indexes: &ReserveIndexes,\n        reserve_fees: &mut ReserveFees,\n        (deposit_fee_reduction_e6, debt_fee_reduction_e6): &FeeReductions,\n    ) -> Result<(Balance, Balance), MathError> {\n        if self.applied_deposit_index_e18 >= reserve_indexes.deposit_index_e18\n            && self.applied_debt_index_e18 >= reserve_indexes.debt_index_e18\n        {\n            return Ok((0, 0));\n        }\n\n        let (mut delta_account_deposit, mut delta_account_debt): (\n            Balance,\n            Balance,\n        ) = (0, 0);\n\n        if self.deposit != 0\n            && self.applied_deposit_index_e18 != 0\n            && self.applied_deposit_index_e18\n                < reserve_indexes.deposit_index_e18\n        {\n            let updated_deposit_with_fee = e0_mul_e18_div_e18_to_e0_rdown(\n                self.deposit,\n                reserve_indexes.deposit_index_e18,\n                self.applied_deposit_index_e18,\n            )?;\n\n            let interest_with_fee = updated_deposit_with_fee\n                .checked_sub(self.deposit)\n                .ok_or(MathError::Underflow)?;\n\n            let pre_fee = e0_mul_e6_to_e0_rup(\n                interest_with_fee,\n                reserve_fees.deposit_fee_e6,\n            )?;\n            let fee_part_e6 =\n                E6_U32.checked_sub(*deposit_fee_reduction_e6).unwrap();\n\n            let fee = e0_mul_e6_to_e0_rup(pre_fee, fee_part_e6)?;\n\n            let updated_deposit = updated_deposit_with_fee\n                .checked_sub(fee)\n                .ok_or(MathError::Underflow)?;\n\n            delta_account_deposit = updated_deposit\n                .checked_sub(self.deposit)\n                .ok_or(MathError::Underflow)?;\n            self.deposit = updated_deposit;\n\n            reserve_fees.increase_earned_fee(&fee)?;\n        }\n        self.applied_deposit_index_e18 = reserve_indexes.deposit_index_e18;\n\n        if self.debt != 0\n            && self.applied_debt_index_e18 != 0\n            && self.applied_debt_index_e18 < reserve_indexes.debt_index_e18\n        {\n            let updated_borrow_with_no_fee = e0_mul_e18_div_e18_to_e0_rup(\n                self.debt,\n                reserve_indexes.debt_index_e18,\n                self.applied_debt_index_e18,\n            )?;\n            ink::env::debug_println!(\n                \"updated_borrow_with_no_fee: {}\",\n                updated_borrow_with_no_fee\n            );\n\n            let interest_with_no_fee = updated_borrow_with_no_fee\n                .checked_sub(self.debt)\n                .ok_or(MathError::Underflow)?;\n\n            let pre_fee = e0_mul_e6_to_e0_rup(\n                interest_with_no_fee,\n                reserve_fees.debt_fee_e6,\n            )?;\n\n            let fee_part_e6 =\n                E6_U32.checked_sub(*debt_fee_reduction_e6).unwrap();\n\n            let fee = e0_mul_e6_to_e0_rup(pre_fee, fee_part_e6)?;\n\n            let updated_borrow = updated_borrow_with_no_fee\n                .checked_add(fee)\n                .ok_or(MathError::Overflow)?;\n\n            delta_account_debt = updated_borrow\n                .checked_sub(self.debt)\n                .ok_or(MathError::Underflow)?;\n            self.debt = updated_borrow;\n            reserve_fees.increase_earned_fee(&fee)?;\n        }\n        self.applied_debt_index_e18 = reserve_indexes.debt_index_e18;\n\n        Ok((delta_account_deposit, delta_account_debt))\n    }\n}\n\nimpl AccountReserveData {\n    pub fn my_default() -> Self {\n        Self {\n            deposit: 0,\n            debt: 0,\n            applied_deposit_index_e18: E18_U128,\n            applied_debt_index_e18: E18_U128,\n        }\n    }\n}\n",
        "src/library/structs/asset_rules.rs":"// SPDX-License-Identifier: BUSL-1.1\n/// Defines rules on which asset can be borrowed and used as collateral.\n#[derive(Debug, Default, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct AssetRules {\n    /// used while veryfing collateralization. If None then can not be used as collateral.\n    pub collateral_coefficient_e6: Option<u128>,\n    /// used while veryfing collateralization. If None then can not be borrowed.\n    pub borrow_coefficient_e6: Option<u128>,\n    /// penalty when liquidated, 1e6 == 100%.\n    pub penalty_e6: Option<u128>,\n}\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum AssetRulesError {\n    /// returned if the asset_rule to be set is invalid.\n    InvalidAssetRule,\n}\n\nimpl AssetRules {\n    /// verifies that:\n    /// 1) the rule is not empty\n    /// 2) that Some is not overriten by None\n    /// 3) that penalty is Some\n    ///\n    /// * `old_rule` - rule that is overwritten by Self\n    pub fn validate_new_rule(\n        &self,\n        old_rule: &Option<AssetRules>,\n    ) -> Result<(), AssetRulesError> {\n        if let Some(old_rule_unwrapped) = old_rule {\n            if old_rule_unwrapped.collateral_coefficient_e6.is_some()\n                && self.collateral_coefficient_e6.is_none()\n            {\n                return Err(AssetRulesError::InvalidAssetRule);\n            }\n            if old_rule_unwrapped.borrow_coefficient_e6.is_some()\n                && self.borrow_coefficient_e6.is_none()\n            {\n                return Err(AssetRulesError::InvalidAssetRule);\n            }\n        }\n        if ((self.collateral_coefficient_e6.is_some()\n            || self.borrow_coefficient_e6.is_some())\n            && self.penalty_e6.is_none())\n            || (self.collateral_coefficient_e6.is_none()\n                && self.borrow_coefficient_e6.is_none()\n                && self.penalty_e6.is_none())\n        {\n            return Err(AssetRulesError::InvalidAssetRule);\n        }\n\n        Ok(())\n    }\n}\n",
        "src/library/structs/fee_reduction.rs":"// SPDX-License-Identifier: BUSL-1.1\n/// (deposit_fee_reductino_e6, debt_fee_reduction_e6)\npub type FeeReductions = (u32, u32);\n",
        "src/library/structs/interest_rate_model.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::{math::errors::MathError, traits::Timestamp};\n\nuse crate::math::interest_rate_math::utilization_rate_to_interest_rate_e18;\n\n/// used to manage interest rate model\n#[derive(Debug, Default, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct InterestRateModelParams {\n    pub target_ur_e6: u32,\n    pub min_rate_at_target_e18: u64,\n    pub max_rate_at_target_e18: u64,\n\n    pub rate_at_max_ur_e18: u64,\n\n    pub minimal_time_between_adjustments: u64,\n}\n\n/// type used to represent interest rate model\n#[derive(Debug, Default, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct InterestRateModel {\n    pub target_ur_e6: u32,\n    pub min_rate_at_target_e18: u64,\n    pub max_rate_at_target_e18: u64,\n\n    pub rate_at_target_ur_e18: u64,\n    pub rate_at_max_ur_e18: u64,\n\n    pub minimal_time_between_adjustments: u64,\n    pub last_adjustment_timestamp: u64,\n}\n\nimpl InterestRateModel {\n    pub fn new(params: InterestRateModelParams, timestamp: Timestamp) -> Self {\n        InterestRateModel {\n            target_ur_e6: params.target_ur_e6,\n            min_rate_at_target_e18: params.min_rate_at_target_e18,\n            max_rate_at_target_e18: params.max_rate_at_target_e18,\n            rate_at_target_ur_e18: params.min_rate_at_target_e18,\n            rate_at_max_ur_e18: params.rate_at_max_ur_e18,\n            minimal_time_between_adjustments: params\n                .minimal_time_between_adjustments,\n            last_adjustment_timestamp: timestamp,\n        }\n    }\n}\n\nimpl InterestRateModel {\n    pub fn adjust_rate_at_target(\n        &mut self,\n        utilization_rate_e6: u32,\n        timestamp: Timestamp,\n    ) -> Result<u64, MathError> {\n        let current_rate_e18 =\n            utilization_rate_to_interest_rate_e18(utilization_rate_e6, self)?;\n\n        if current_rate_e18 < self.min_rate_at_target_e18 {\n            self.rate_at_target_ur_e18 = self.min_rate_at_target_e18;\n        } else if current_rate_e18 > self.max_rate_at_target_e18 {\n            self.rate_at_target_ur_e18 = self.max_rate_at_target_e18;\n        } else {\n            self.rate_at_target_ur_e18 = current_rate_e18;\n        }\n\n        self.last_adjustment_timestamp = timestamp;\n\n        Ok(self.rate_at_target_ur_e18)\n    }\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n\n    const ONE_PERCENT_APR_E18: u64 = 3_170_979;\n    const TEN_PERCENT_APR: u64 = 10 * ONE_PERCENT_APR_E18;\n    const INTEREST_RATE_MDOEL: InterestRateModel = InterestRateModel {\n        target_ur_e6: 900_000,                         // 90%\n        min_rate_at_target_e18: ONE_PERCENT_APR_E18,   // 1%,\n        max_rate_at_target_e18: 2 * TEN_PERCENT_APR,   // 10%,\n        rate_at_target_ur_e18: TEN_PERCENT_APR,        // 10%\n        rate_at_max_ur_e18: 100 * ONE_PERCENT_APR_E18, // 100%\n        minimal_time_between_adjustments: 0,\n        last_adjustment_timestamp: 0,\n    };\n\n    #[test]\n    fn adjust_rate_at_target() {\n        //0%\n        assert_eq!(\n            INTEREST_RATE_MDOEL.clone().adjust_rate_at_target(0, 1),\n            Ok(INTEREST_RATE_MDOEL.min_rate_at_target_e18)\n        );\n        //100%\n        assert_eq!(\n            INTEREST_RATE_MDOEL\n                .clone()\n                .adjust_rate_at_target(1_000_000, 1),\n            Ok(INTEREST_RATE_MDOEL.max_rate_at_target_e18)\n        );\n\n        //45%\n        assert_eq!(\n            INTEREST_RATE_MDOEL\n                .clone()\n                .adjust_rate_at_target(450_000, 1),\n            Ok(TEN_PERCENT_APR / 2)\n        );\n\n        //91%\n        assert_eq!(\n            INTEREST_RATE_MDOEL\n                .clone()\n                .adjust_rate_at_target(910_000, 1),\n            Ok(19 * ONE_PERCENT_APR_E18)\n        );\n    }\n}\n",
        "src/library/structs/mod.rs":"// SPDX-License-Identifier: BUSL-1.1\nmod account_config;\nmod account_reserve_data;\nmod asset_rules;\nmod fee_reduction;\nmod interest_rate_model;\nmod multi_op;\nmod reserve_abacus_tokens;\nmod reserve_data;\nmod reserve_indexes_and_fees;\nmod reserve_restrictions;\nmod tw;\n\npub use account_config::*;\npub use account_reserve_data::*;\npub use asset_rules::*;\npub use fee_reduction::*;\npub use interest_rate_model::*;\npub use multi_op::*;\npub use reserve_abacus_tokens::*;\npub use reserve_data::*;\npub use reserve_indexes_and_fees::*;\npub use reserve_restrictions::*;\npub use tw::*;\n",
        "src/library/structs/multi_op.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::primitives::AccountId;\nuse pendzl::traits::Balance;\n\n/// Arguments for operations in multi-op\n#[derive(Debug, scale::Encode, scale::Decode, Clone)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct OperationArgs {\n    pub asset: AccountId,\n    pub amount: Balance,\n}\n\n/// possible operations in multi-op\n#[derive(Debug, Eq, PartialEq, Copy, scale::Encode, scale::Decode, Clone)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub enum Operation {\n    Deposit,\n    Withdraw,\n    Borrow,\n    Repay,\n}\n\n/// Action to be executed in multi-op\n#[derive(Debug, scale::Encode, scale::Decode, Clone)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct Action {\n    pub op: Operation,\n    pub args: OperationArgs,\n}\n",
        "src/library/structs/reserve_abacus_tokens.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse ink::primitives::AccountId;\n\n/// Stores AccountIds of PSP22 contracts that are wrappers of deposit(debt).\n#[derive(Debug, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveAbacusTokens {\n    /// address of the token wrapping deposit - aToken\n    pub a_token_address: AccountId,\n    /// address of the token wrapping debt - vToken\n    pub v_token_address: AccountId,\n}\n\nimpl ReserveAbacusTokens {\n    pub fn new(\n        a_token_address: &AccountId,\n        v_token_address: &AccountId,\n    ) -> Self {\n        ReserveAbacusTokens {\n            a_token_address: *a_token_address,\n            v_token_address: *v_token_address,\n        }\n    }\n}\n",
        "src/library/structs/reserve_data.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::{\n    math::{errors::MathError, operations::mul_div},\n    traits::Balance,\n};\n\nuse crate::math::{\n    e18_mul_e18_div_e18_to_e18_rdown,\n    interest_rate_math::utilization_rate_to_interest_rate_e18, E6_U128, E6_U32,\n};\n\nuse super::InterestRateModel;\n\n/// Contains most often used data of a reserve\n#[derive(Debug, scale::Encode, scale::Decode)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveData {\n    /// are any actions allowed?\n    pub activated: bool,\n    /// are borrows and deposits frozen?\n    pub frozen: bool,\n\n    /// total deposit of underlying asset. It is sum of deposits and  of accumulated interests. Total deposit of aToken.\n    pub total_deposit: Balance,\n    /// current interest rate for deposited tokens per millisecond. 10^24 = 100%  millisecond Percentage Rate.\n    pub current_deposit_rate_e18: u64,\n\n    /// total debt. It is sum of debts with accumulated interests. Total supply of vToken.\n    pub total_debt: Balance,\n    // current interest rate for debt per millisecond. 10^24 = 100%  millisecond Percentage Rate.\n    pub current_debt_rate_e18: u64,\n}\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum ReserveDataError {\n    /// returned if activating, disactivating, freezing, unfreezing action is redundant.\n    AlreadySet,\n    /// returned if reserve is inactive\n    Inactive,\n    /// returned if reserve is frozen\n    Frozen,\n}\n\nimpl Default for ReserveData {\n    fn default() -> Self {\n        ReserveData {\n            activated: true,\n            frozen: false,\n            total_deposit: 0,\n            current_deposit_rate_e18: 0,\n            total_debt: 0,\n            current_debt_rate_e18: 0,\n        }\n    }\n}\n\nimpl ReserveData {\n    pub fn set_is_active(\n        &mut self,\n        active: bool,\n    ) -> Result<(), ReserveDataError> {\n        if self.activated == active {\n            return Err(ReserveDataError::AlreadySet);\n        }\n        self.activated = active;\n        Ok(())\n    }\n\n    pub fn ensure_activated(&self) -> Result<(), ReserveDataError> {\n        if !self.activated {\n            return Err(ReserveDataError::Inactive);\n        }\n        Ok(())\n    }\n\n    pub fn set_is_frozen(\n        &mut self,\n        freeze: bool,\n    ) -> Result<(), ReserveDataError> {\n        if self.frozen == freeze {\n            return Err(ReserveDataError::AlreadySet);\n        }\n        self.activated = freeze;\n        Ok(())\n    }\n\n    pub fn ensure_not_frozen(&self) -> Result<(), ReserveDataError> {\n        if self.frozen {\n            return Err(ReserveDataError::Frozen);\n        }\n        Ok(())\n    }\n\n    pub fn increase_total_deposit(\n        &mut self,\n        amount: &Balance,\n    ) -> Result<(), MathError> {\n        self.total_deposit = self\n            .total_deposit\n            .checked_add(*amount)\n            .ok_or(MathError::Overflow)?;\n        Ok(())\n    }\n\n    // total deposit can not underflow because it is a sum of account deposits which are already checked for underflow.\n    pub fn decrease_total_deposit(\n        &mut self,\n        amount: &Balance,\n    ) -> Result<(), MathError> {\n        self.total_deposit = self\n            .total_deposit\n            .checked_sub(*amount)\n            .ok_or(MathError::Underflow)?;\n        Ok(())\n    }\n\n    pub fn increase_total_debt(\n        &mut self,\n        amount: &Balance,\n    ) -> Result<(), MathError> {\n        self.total_debt = self\n            .total_debt\n            .checked_add(*amount)\n            .ok_or(MathError::Overflow)?;\n        Ok(())\n    }\n\n    // total debt can not underflow because it is a sum of account debts which are already checked for underflow.\n    pub fn decrease_total_debt(\n        &mut self,\n        amount: &Balance,\n    ) -> Result<(), MathError> {\n        self.total_debt = self\n            .total_debt\n            .checked_sub(*amount)\n            .ok_or(MathError::Underflow)?;\n        Ok(())\n    }\n\n    pub fn add_interests(\n        &mut self,\n        interests: (Balance, Balance),\n    ) -> Result<(Balance, Balance), MathError> {\n        self.increase_total_deposit(&interests.0)?;\n        self.increase_total_debt(&interests.1)?;\n        Ok(interests)\n    }\n\n    pub fn current_utilization_rate_e6(&self) -> Result<u32, MathError> {\n        if self.total_deposit == 0 {\n            return Ok(E6_U32);\n        }\n        let total_debt = self.total_debt;\n        match u32::try_from(mul_div(\n            total_debt,\n            E6_U128,\n            self.total_deposit,\n            pendzl::math::operations::Rounding::Down,\n        )?) {\n            Ok(v) => Ok(v),\n            _ => Err(MathError::Overflow),\n        }\n    }\n\n    pub fn recalculate_current_rates(\n        &mut self,\n        interest_rate_model: &InterestRateModel,\n    ) -> Result<(), MathError> {\n        ink::env::debug_println!(\"recalculate_current_rates\");\n        if self.total_debt == 0 {\n            self.current_debt_rate_e18 = 0;\n            self.current_deposit_rate_e18 = 0;\n            return Ok(());\n        }\n        let utilization_rate_e6 = self.current_utilization_rate_e6()?;\n        ink::env::debug_println!(\n            \"utilization_rate_e6: {}\",\n            utilization_rate_e6\n        );\n        self.current_debt_rate_e18 = utilization_rate_to_interest_rate_e18(\n            utilization_rate_e6,\n            interest_rate_model,\n        )?;\n        ink::env::debug_println!(\n            \"current_debt_rate_e18: {}\",\n            self.current_debt_rate_e18\n        );\n\n        if self.total_deposit != 0 {\n            self.current_deposit_rate_e18 = e18_mul_e18_div_e18_to_e18_rdown(\n                self.total_debt,\n                self.current_debt_rate_e18,\n                self.total_deposit,\n            )?;\n        } else {\n            self.current_deposit_rate_e18 = 0;\n        }\n        Ok(())\n    }\n}\n",
        "src/library/structs/reserve_indexes_and_fees.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::{\n    math::errors::MathError,\n    traits::{Balance, Timestamp},\n};\n\nuse crate::math::{\n    e18_mul_e0_to_e18, e18_mul_e18_to_e18_rdown, e18_mul_e18_to_e18_rup,\n    E18_U128,\n};\n\nuse super::ReserveData;\n\n/// Stores data used to accumulate deposit and debt interest rates.\n#[derive(Debug, scale::Encode, scale::Decode)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveIndexesAndFees {\n    /// indexes used during calculations\n    pub indexes: ReserveIndexes,\n    /// fee is used to accumulate accounts debt interest. The real rate is the current_borrow_rate * (1+fee). 10^6 =100%\n    pub fees: ReserveFees,\n}\n\nimpl ReserveIndexesAndFees {\n    pub fn new(timestamp: &Timestamp, fees: &ReserveFees) -> Self {\n        ReserveIndexesAndFees {\n            indexes: ReserveIndexes::new(timestamp),\n            fees: *fees,\n        }\n    }\n}\n\n/// reserve fees\n#[derive(Debug, scale::Encode, scale::Decode, Clone, Copy)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveFees {\n    /// fee is used to accumulate accounts deposit interest. The real rate is the current_deposit_rate * (1-fee). 10^6 =100%\n    pub deposit_fee_e6: u32,\n    /// fee is used to accumulate accounts debt interest. The real rate is the current_borrow_rate * (1+fee). 10^6 =100%\n    pub debt_fee_e6: u32,\n    /// fee earned by the protocol from the reserve\n    pub earned_fee: Balance,\n}\n\nimpl ReserveFees {\n    pub fn new(deposit_fee_e6: u32, debt_fee_e6: u32) -> Self {\n        ReserveFees {\n            deposit_fee_e6,\n            debt_fee_e6,\n            earned_fee: 0,\n        }\n    }\n\n    pub fn increase_earned_fee(\n        &mut self,\n        amount: &Balance,\n    ) -> Result<(), MathError> {\n        self.earned_fee = self\n            .earned_fee\n            .checked_add(*amount)\n            .ok_or(MathError::Overflow)?;\n        Ok(())\n    }\n\n    pub fn take_earned_fee(&mut self) -> Balance {\n        let earned_fee = self.earned_fee;\n        self.earned_fee = 0;\n        earned_fee\n    }\n}\n\n/// Stores data used to accumulate deposit and debt interest rates.\n#[derive(Debug, scale::Encode, scale::Decode)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveIndexes {\n    /// index used to calculate deposit accumulated interest\n    pub deposit_index_e18: u128,\n    /// index used to calculate debt accumulated interest\n    pub debt_index_e18: u128,\n    /// timestamp of the last update of the rate indexes\n    pub update_timestamp: Timestamp,\n}\n\nimpl ReserveIndexes {\n    pub fn new(timestamp: &Timestamp) -> Self {\n        ReserveIndexes {\n            deposit_index_e18: E18_U128,\n            debt_index_e18: E18_U128,\n            update_timestamp: *timestamp,\n        }\n    }\n\n    pub fn update(\n        &mut self,\n        reserve_data: &ReserveData,\n        timestamp: &Timestamp,\n    ) -> Result<(), MathError> {\n        let delta_timestamp = timestamp\n            .checked_sub(self.update_timestamp)\n            .ok_or(MathError::Underflow)?;\n        if delta_timestamp == 0 {\n            return Ok(());\n        }\n        let mut deposit_index_multiplier_e18: u128 = E18_U128;\n        let mut debt_index_multiplier_e18: u128 = E18_U128;\n\n        // total deposit can be 0 while rate isn't 0 for aabx stable token\n        if reserve_data.current_deposit_rate_e18 != 0\n            && reserve_data.total_deposit != 0\n        {\n            deposit_index_multiplier_e18 = deposit_index_multiplier_e18\n                .checked_add(e18_mul_e0_to_e18(\n                    reserve_data.current_deposit_rate_e18,\n                    delta_timestamp,\n                ))\n                .ok_or(MathError::Overflow)?;\n\n            self.deposit_index_e18 = e18_mul_e18_to_e18_rdown(\n                self.deposit_index_e18,\n                deposit_index_multiplier_e18,\n            )?;\n        }\n\n        // total debt can be 0 while rate isn't 0 for aabx stable token\n        if reserve_data.current_debt_rate_e18 != 0\n            && reserve_data.total_debt != 0\n        {\n            debt_index_multiplier_e18 = debt_index_multiplier_e18\n                .checked_add(e18_mul_e0_to_e18(\n                    reserve_data.current_debt_rate_e18,\n                    delta_timestamp,\n                ))\n                .ok_or(MathError::Overflow)?;\n            ink::env::debug_println!(\"delta_timestamp: {}\", delta_timestamp);\n            ink::env::debug_println!(\n                \"reserve_data.current_debt_rate_e18: {}\",\n                reserve_data.current_debt_rate_e18\n            );\n            ink::env::debug_println!(\n                \"debt_index_multiplier_e18: {}\",\n                debt_index_multiplier_e18\n            );\n\n            self.debt_index_e18 = e18_mul_e18_to_e18_rup(\n                self.debt_index_e18,\n                debt_index_multiplier_e18,\n            )?;\n        }\n        self.update_timestamp = *timestamp;\n        Ok(())\n    }\n}\n",
        "src/library/structs/reserve_restrictions.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::traits::Balance;\n\nuse super::{AccountReserveData, ReserveData};\n\n/// Stores restrictions made on the reserve\n#[derive(Debug, scale::Encode, scale::Decode, Default, Copy, Clone)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\npub struct ReserveRestrictions {\n    /// maximal allowed total deposit\n    pub maximal_total_deposit: Option<Balance>,\n    /// maximal allowad total debt\n    pub maximal_total_debt: Option<Balance>,\n    /// minimal collateral that can be used by each account.\n    /// if account's collateral drops below this value (during withdraw) then it will be automatically turned off (as collateral).\n    /// it may happen during liquidation that accounts collateral will drop below this value.\n    pub minimal_collateral: Balance,\n    /// minimal debt that can be taken and maintained by each account.\n    /// At any time account's debt can not bee smaller than minimal debt.\n    pub minimal_debt: Balance,\n}\n\nimpl ReserveRestrictions {\n    pub fn new(\n        maximal_total_deposit: &Option<Balance>,\n        maximal_total_debt: &Option<Balance>,\n        minimal_collateral: &Balance,\n        minimal_debt: &Balance,\n    ) -> Self {\n        ReserveRestrictions {\n            maximal_total_deposit: *maximal_total_deposit,\n            maximal_total_debt: *maximal_total_debt,\n            minimal_collateral: *minimal_collateral,\n            minimal_debt: *minimal_debt,\n        }\n    }\n}\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum ReserveRestrictionsError {\n    /// returned if after the action total debt of an asset is freater than the maximal total debt restriocion.\n    MaxDebtReached,\n    /// returned if after the action total deposit of an asset is grreater then the maximal total deposit restriction.\n    MaxDepositReached,\n    /// returned if after the action minimal debt restricion would be no satisfied.\n    MinimalDebt,\n    /// returned if after the action minimal collaetral restricion would be no satisfied.\n    MinimalCollateral,\n}\n\nimpl ReserveRestrictions {\n    pub fn ensure_max_total_deposit_not_reached(\n        &self,\n        reserve_data: &ReserveData,\n    ) -> Result<(), ReserveRestrictionsError> {\n        match self.maximal_total_deposit {\n            Some(max_total_deposit)\n                if reserve_data.total_deposit > max_total_deposit =>\n            {\n                Err(ReserveRestrictionsError::MaxDepositReached)\n            }\n            _ => Ok(()),\n        }\n    }\n\n    pub fn ensure_max_total_debt_not_reached(\n        &self,\n        reserve_data: &ReserveData,\n    ) -> Result<(), ReserveRestrictionsError> {\n        match self.maximal_total_debt {\n            Some(max_total_debt)\n                if reserve_data.total_debt > max_total_debt =>\n            {\n                Err(ReserveRestrictionsError::MaxDebtReached)\n            }\n            _ => Ok(()),\n        }\n    }\n\n    pub fn ensure_debt_exceeds_minimum(\n        &self,\n        account_reserve_data: &AccountReserveData,\n    ) -> Result<(), ReserveRestrictionsError> {\n        if account_reserve_data.debt != 0\n            && account_reserve_data.debt < self.minimal_debt\n        {\n            return Err(ReserveRestrictionsError::MinimalDebt);\n        }\n        Ok(())\n    }\n\n    pub fn ensure_collateral_exceeds_minimum(\n        &self,\n        account_reserve_data: &AccountReserveData,\n    ) -> Result<(), ReserveRestrictionsError> {\n        if account_reserve_data.deposit < self.minimal_collateral {\n            return Err(ReserveRestrictionsError::MinimalCollateral);\n        }\n        Ok(())\n    }\n}\n",
        "src/library/structs/tw.rs":"// SPDX-License-Identifier: BUSL-1.1\nuse pendzl::traits::Timestamp;\n\nconst TW_INDEX_SIZE: u32 = 60;\n\n#[cfg(build = \"release\")]\nconst TW_INDEX_SIZE: u32 = 3600 * 8;\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\n/// An index in cyclic group of size `tail`\npub struct TwIndex {\n    pub value: u32,\n}\n\nimpl TwIndex {\n    pub fn new() -> Self {\n        TwIndex { value: 0 }\n    }\n\n    pub fn next(&self) -> Self {\n        let index = self\n            .value\n            .overflowing_add(1)\n            .0\n            .checked_rem(TW_INDEX_SIZE)\n            .unwrap();\n        TwIndex { value: index }\n    }\n}\n\n#[derive(\n    Debug, Default, PartialEq, Eq, scale::Encode, scale::Decode, Clone, Copy,\n)]\n#[cfg_attr(\n    feature = \"std\",\n    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n)]\n/// A timestamped entry in the TW accumulator\npub struct TwEntry {\n    pub timestamp: Timestamp,\n    pub accumulator: u64,\n}\n",
        "src/rust-toolchain.toml":"# https://rust-lang.github.io/rustup/overrides.html\n\n[toolchain]\n# To update version:\n#   - Find the latest nightly release that matches RUST_VERSION here: https://github.com/oxalica/rust-overlay/tree/master/manifests/nightly/2023\n#   - update `channel = \"nightly-OLD_DATE\"` below\n\nchannel = \"stable\" # \"nightly-2023-03-21\" # 1.69.0 nightly for unstable features and no sign-ext\n# for more on the sign-ext issue: https://github.com/paritytech/cargo-contract/issues/1139\ntargets = [\n    \"wasm32-unknown-unknown\",\n]\n\nprofile = \"default\"\ncomponents = [\n    # Rust source code, useful for dev tooling\n    \"rust-src\",\n    \"rustfmt\"\n]"
    },
    "manifest-path":"Cargo.toml"
}
